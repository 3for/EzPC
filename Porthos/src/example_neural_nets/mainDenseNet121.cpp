/*
This is an autogenerated file, generated using the EzPC compiler.
*/
#include "globals.h"

#include<vector>
#include<math.h>
#include<cstdlib>
#include<iostream>
#include<fstream>
#include "EzPCFunctionalities.h"

using namespace std;
uint32_t FLOAT_PRECISION = 11;
uint32_t public_lrshift(uint32_t x, uint32_t y){
return (x >> y);
}

int32_t public_lrshift(int32_t x, uint32_t y){
return ((int32_t)(((uint32_t)x) >> y));
}

uint64_t public_lrshift(uint64_t x, uint64_t y){
return (x >> y);
}

int64_t public_lrshift(int64_t x, uint64_t y){
return ((int64_t)(((uint64_t)x) >> y));
}

template<typename T>
vector<T> make_vector(size_t size) {
return std::vector<T>(size);
}

template <typename T, typename... Args>
auto make_vector(size_t first, Args... sizes)
{
auto inner = make_vector<T>(sizes...);
return vector<decltype(inner)>(first, inner);
}

template<typename T>
ostream& operator<< (ostream &os, const vector<T> &v)
{
for(auto it = v.begin (); it != v.end (); ++it) {
os << *it << endl;
}
return os;
}


#include "ezpc.h"

extern int partyNum;
vector<uint64_t*> toFreeMemoryLaterArr;
int NUM_OF_PARTIES;

AESObject* aes_common;
AESObject* aes_indep;
AESObject* aes_a_1;
AESObject* aes_a_2;
AESObject* aes_b_1;
AESObject* aes_b_2;
AESObject* aes_c_1;
AESObject* aes_share_conv_bit_shares_p0_p2;
AESObject* aes_share_conv_bit_shares_p1_p2;
AESObject* aes_share_conv_shares_mod_odd_p0_p2;
AESObject* aes_share_conv_shares_mod_odd_p1_p2;
AESObject* aes_comp_msb_shares_lsb_p0_p2;
AESObject* aes_comp_msb_shares_lsb_p1_p2;
AESObject* aes_comp_msb_shares_bit_vec_p0_p2;
AESObject* aes_comp_msb_shares_bit_vec_p1_p2;
AESObject* aes_conv_opti_a_1;
AESObject* aes_conv_opti_a_2;
AESObject* aes_conv_opti_b_1;
AESObject* aes_conv_opti_b_2;
AESObject* aes_conv_opti_c_1;
ParallelAESObject* aes_parallel;































void MatAddBroadCast2(int32_t s1, int32_t s2, vector < vector < uint64_t > >& A, vector < uint64_t >& B, vector < vector < uint64_t > >& outArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
outArr[i1][i2] = A[i1][i2]+B[i2];
}
}
}

void MatAdd2(int32_t s1, int32_t s2, vector < vector < uint64_t > >& A, vector < vector < uint64_t > >& B, vector < vector < uint64_t > >& outArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
outArr[i1][i2] = A[i1][i2]+B[i1][i2];
}
}
}

void MatAddBroadCast4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, vector < vector < vector < vector < uint64_t > > > >& A, vector < uint64_t >& B, vector < vector < vector < vector < uint64_t > > > >& outArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
outArr[i1][i2][i3][i4] = A[i1][i2][i3][i4]+B[i4];
}
}
}
}
}

void MatAdd4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, vector < vector < vector < vector < uint64_t > > > >& A, vector < vector < vector < vector < uint64_t > > > >& B, vector < vector < vector < vector < uint64_t > > > >& outArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
outArr[i1][i2][i3][i4] = A[i1][i2][i3][i4]+B[i1][i2][i3][i4];
}
}
}
}
}

void MatAddBroadCast5(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, vector < vector < vector < vector < vector < uint64_t > > > > >& A, vector < uint64_t >& B, vector < vector < vector < vector < vector < uint64_t > > > > >& outArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){
outArr[i1][i2][i3][i4][i5] = A[i1][i2][i3][i4][i5]+B[i5];
}
}
}
}
}
}

void MatAdd5(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, vector < vector < vector < vector < vector < uint64_t > > > > >& A, vector < vector < vector < vector < vector < uint64_t > > > > >& B, vector < vector < vector < vector < vector < uint64_t > > > > >& outArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){
outArr[i1][i2][i3][i4][i5] = A[i1][i2][i3][i4][i5]+B[i1][i2][i3][i4][i5];
}
}
}
}
}
}

void CreateTensor1(int32_t s1, int32_t val, vector < int32_t >& arr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
arr[i1] = val;
}
}

void CreateTensor2(int32_t s1, int32_t s2, int32_t val, vector < vector < int32_t > >& arr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
arr[i1][i2] = val;
}
}
}

void CreateTensor3(int32_t s1, int32_t s2, int32_t s3, int32_t val, vector < vector < vector < int32_t > > >& arr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
arr[i1][i2][i3] = val;
}
}
}
}

void CreateTensor4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t val, vector < vector < vector < vector < int32_t > > > >& arr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
arr[i1][i2][i3][i4] = val;
}
}
}
}
}

void CreateTensor5(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, int32_t val, vector < vector < vector < vector < vector < int32_t > > > > >& arr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){
arr[i1][i2][i3][i4][i5] = val;
}
}
}
}
}
}

void CopyTensor1(int32_t s1, vector < uint64_t >& targetArr, vector < uint64_t >& fromArr, vector < uint64_t >& ignore){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
targetArr[i1] = fromArr[i1];
}
}

void CopyTensor2(int32_t s1, int32_t s2, vector < vector < uint64_t > >& targetArr, vector < vector < uint64_t > >& fromArr, vector < vector < uint64_t > >& ignore){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
targetArr[i1][i2] = fromArr[i1][i2];
}
}
}

void CopyTensor3(int32_t s1, int32_t s2, int32_t s3, vector < vector < vector < uint64_t > > >& targetArr, vector < vector < vector < uint64_t > > >& fromArr, vector < vector < vector < uint64_t > > >& ignore){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
targetArr[i1][i2][i3] = fromArr[i1][i2][i3];
}
}
}
}

void CopyTensor4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, vector < vector < vector < vector < uint64_t > > > >& targetArr, vector < vector < vector < vector < uint64_t > > > >& fromArr, vector < vector < vector < vector < uint64_t > > > >& ignore){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
targetArr[i1][i2][i3][i4] = fromArr[i1][i2][i3][i4];
}
}
}
}
}

void CreateIdentity11(int32_t s1, vector < uint64_t >& fromArr, vector < uint64_t >& newArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
newArr[i1] = fromArr[i1];
}
}

void CreateIdentity22(int32_t s1, int32_t s2, vector < vector < uint64_t > >& fromArr, vector < vector < uint64_t > >& newArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
newArr[i1][i2] = fromArr[i1][i2];
}
}
}

void CreateIdentity33(int32_t s1, int32_t s2, int32_t s3, vector < vector < vector < uint64_t > > >& fromArr, vector < vector < vector < uint64_t > > >& newArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
newArr[i1][i2][i3] = fromArr[i1][i2][i3];
}
}
}
}

void CreateIdentity44(int32_t s1, int32_t s2, int32_t s3, int32_t s4, vector < vector < vector < vector < uint64_t > > > >& fromArr, vector < vector < vector < vector < uint64_t > > > >& newArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
newArr[i1][i2][i3][i4] = fromArr[i1][i2][i3][i4];
}
}
}
}
}

void CreateCopy2211(int32_t s1, int32_t s2, int32_t inps1, int32_t inps2, vector < vector < uint64_t > >& inArr, int32_t perDimSize, vector < int32_t >& beginIdx, vector < int32_t >& sizeIdx, vector < vector < uint64_t > >& outArr){
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
outArr[i][j] = inArr[(beginIdx[ (int32_t)0] + i)][(beginIdx[ (int32_t)1] + j)];
}
}
}

void CreateCopy5511(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, int32_t inps1, int32_t inps2, int32_t inps3, int32_t inps4, int32_t inps5, vector < vector < vector < vector < vector < uint64_t > > > > >& inArr, int32_t perDimSize, vector < int32_t >& beginIdx, vector < int32_t >& sizeIdx, vector < vector < vector < vector < vector < uint64_t > > > > >& outArr){
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
for (uint32_t l =  (int32_t)0; l < s4; l++){
for (uint32_t m =  (int32_t)0; m < s5; m++){
outArr[i][j][k][l][m] = inArr[(beginIdx[ (int32_t)0] + i)][(beginIdx[ (int32_t)1] + j)][(beginIdx[ (int32_t)2] + k)][(beginIdx[ (int32_t)3] + l)][(beginIdx[ (int32_t)4] + m)];
}
}
}
}
}
}

void Concat2T222(int32_t s1, int32_t s2, int32_t inp1s1, int32_t inp1s2, vector < vector < uint64_t > >& inp1, int32_t inp2s1, int32_t inp2s2, vector < vector < uint64_t > >& inp2, int32_t axis, vector < vector < uint64_t > >& outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
outp[i1][i2] = inp1[i1][i2];
} else {
outp[i1][i2] = inp2[(i1 - inp1s1)][i2];
}
} else {
if ((i2 < inp1s2)) {
outp[i1][i2] = inp1[i1][i2];
} else {
outp[i1][i2] = inp2[i1][(i2 - inp1s2)];
}
}
}
}
}

void Concat2T444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, vector < vector < vector < vector < uint64_t > > > >& inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, vector < vector < vector < vector < uint64_t > > > >& inp2, int32_t axis, vector < vector < vector < vector < uint64_t > > > >& outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp2[(i1 - inp1s1)][i2][i3][i4];
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp2[i1][(i2 - inp1s2)][i3][i4];
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp2[i1][i2][(i3 - inp1s3)][i4];
}
} else {
if ((i4 < inp1s4)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp2[i1][i2][i3][(i4 - inp1s4)];
}
}
}
}
}
}
}
}
}

void Split44(int32_t O1, int32_t O2, int32_t O3, int32_t O4, int32_t I1, int32_t I2, int32_t I3, int32_t I4, vector < vector < vector < vector < uint64_t > > > >& inp, int32_t axis, int32_t curCount, int32_t total, vector < vector < vector < vector < uint64_t > > > >& out){
for (uint32_t o1 =  (int32_t)0; o1 < O1; o1++){
for (uint32_t o2 =  (int32_t)0; o2 < O2; o2++){
for (uint32_t o3 =  (int32_t)0; o3 < O3; o3++){
for (uint32_t o4 =  (int32_t)0; o4 < O4; o4++){

int32_t i1 = o1;

int32_t i2 = o2;

int32_t i3 = o3;

int32_t i4 = o4;
if ((axis ==  (int32_t)0)) {
i1 = (((I1 / total) * curCount) + o1);
}
if ((axis ==  (int32_t)1)) {
i2 = (((I2 / total) * curCount) + o2);
}
if ((axis ==  (int32_t)2)) {
i3 = (((I3 / total) * curCount) + o3);
}
if ((axis ==  (int32_t)3)) {
i4 = (((I4 / total) * curCount) + o4);
}
out[o1][o2][o3][o4] = inp[i1][i2][i3][i4];
}
}
}
}
}

void Conv2DReshapeFilter(int32_t FH, int32_t FW, int32_t CI, int32_t CO, vector < vector < vector < vector < uint64_t > > > >& inputArr, vector < vector < uint64_t > >& outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){

int32_t linIdx = ((((fh * FW) * CI) + (fw * CI)) + ci);
outputArr[co][linIdx] = inputArr[fh][fw][ci][co];
}
}
}
}
}

void Conv2DReshapeMatMulOP(int32_t N, int32_t finalH, int32_t finalW, int32_t CO, vector < vector < uint64_t > >& inputArr, vector < vector < vector < vector < uint64_t > > > >& outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t n =  (int32_t)0; n < N; n++){
for (uint32_t h =  (int32_t)0; h < finalH; h++){
for (uint32_t w =  (int32_t)0; w < finalW; w++){
outputArr[n][h][w][co] = inputArr[co][((((n * finalH) * finalW) + (h * finalW)) + w)];
}
}
}
}
}

void Conv2DReshapeInput(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, int32_t RRows, int32_t RCols, vector < vector < vector < vector < uint64_t > > > >& inputArr, vector < vector < uint64_t > >& outputArr){

int32_t linIdxFilterMult =  (int32_t)0;
for (uint32_t n =  (int32_t)0; n < N; n++){

int32_t leftTopCornerH = ( (int32_t)0 - zPadHLeft);

int32_t extremeRightBottomCornerH = ((H -  (int32_t)1) + zPadHRight);
while ((((leftTopCornerH + FH) -  (int32_t)1) <= extremeRightBottomCornerH)) {

int32_t leftTopCornerW = ( (int32_t)0 - zPadWLeft);

int32_t extremeRightBottomCornerW = ((W -  (int32_t)1) + zPadWRight);
while ((((leftTopCornerW + FW) -  (int32_t)1) <= extremeRightBottomCornerW)) {
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){

int32_t curPosH = (leftTopCornerH + fh);

int32_t curPosW = (leftTopCornerW + fw);

uint64_t val = funcSSCons( (int64_t)0);
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){
if ((((curPosH <  (int32_t)0) || (curPosH >= H)) || ((curPosW <  (int32_t)0) || (curPosW >= W)))) {
val = funcSSCons( (int64_t)0);
} else {
val = inputArr[n][curPosH][curPosW][ci];
}
outputArr[((((fh * FW) * CI) + (fw * CI)) + ci)][linIdxFilterMult] = val;
}
}
}
linIdxFilterMult = (linIdxFilterMult +  (int32_t)1);
leftTopCornerW = (leftTopCornerW + strideW);
}

leftTopCornerH = (leftTopCornerH + strideH);
}

}
}

void Conv2D(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t CO, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, vector < vector < vector < vector < uint64_t > > > >& inputArr, vector < vector < vector < vector < uint64_t > > > >& filterArr, vector < vector < vector < vector < uint64_t > > > >& outArr){

int32_t reshapedFilterRows = CO;

int32_t reshapedFilterCols = ((FH * FW) * CI);

int32_t reshapedIPRows = ((FH * FW) * CI);

int32_t newH = ((((H + (zPadHLeft + zPadHRight)) - FH) / strideH) +  (int32_t)1);

int32_t newW = ((((W + (zPadWLeft + zPadWRight)) - FW) / strideW) +  (int32_t)1);

int32_t reshapedIPCols = ((N * newH) * newW);

vector < vector < uint64_t > > filterReshaped = make_vector<uint64_t>(reshapedFilterRows, reshapedFilterCols);

vector < vector < uint64_t > > inputReshaped = make_vector<uint64_t>(reshapedIPRows, reshapedIPCols);

vector < vector < uint64_t > > matmulOP = make_vector<uint64_t>(reshapedFilterRows, reshapedIPCols);
Conv2DReshapeFilter(FH, FW, CI, CO, filterArr, filterReshaped);
Conv2DReshapeInput(N, H, W, CI, FH, FW, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideH, strideW, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);
MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, 1);
Conv2DReshapeMatMulOP(N, newH, newW, CO, matmulOP, outArr);
ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

void Conv2DLoopInner(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t CO, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, int32_t outH, int32_t outW, int32_t G, vector < vector < vector < vector < uint64_t > > > >& inputArr, vector < vector < vector < vector < uint64_t > > > >& filterArr, vector < vector < vector < vector < uint64_t > > > >& outArr){

int32_t GIS = (CI / G);

int32_t GOS = (CO / G);
for (uint32_t n =  (int32_t)0; n < N; n++){
for (uint32_t cog =  (int32_t)0; cog < GOS; cog++){
for (uint32_t cig =  (int32_t)0; cig < GIS; cig++){
for (uint32_t g =  (int32_t)0; g < G; g++){
for (uint32_t h =  (int32_t)0; h < outH; h++){
for (uint32_t w =  (int32_t)0; w < outW; w++){

uint64_t val = funcSSCons( (int64_t)0);

int32_t ci = ((GIS * g) + cig);

int32_t co = ((GOS * g) + cog);

int32_t curPosH = ((strideH * h) - zPadHLeft);
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){

int32_t curPosW = ((strideW * w) - zPadWLeft);
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){
if (((((curPosH >=  (int32_t)0) && (curPosW >=  (int32_t)0)) && (curPosH < H)) && (curPosW < W))) {
val = val+funcMult(inputArr[n][curPosH][curPosW][ci], filterArr[fh][fw][(ci / G)][co]);
}
curPosW = (curPosW +  (int32_t)1);
}
curPosH = (curPosH +  (int32_t)1);
}
outArr[n][h][w][co] = outArr[n][h][w][co]+val;
}
}
}
}
}
}
}

void Conv2DLoop(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t CO, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, int32_t G, vector < vector < vector < vector < uint64_t > > > >& inputArr, vector < vector < vector < vector < uint64_t > > > >& filterArr, vector < vector < vector < vector < uint64_t > > > >& outArr){

int32_t outH = ((((H - FH) + (zPadHLeft + zPadHRight)) / strideH) +  (int32_t)1);

int32_t outW = ((((W - FW) + (zPadWLeft + zPadWRight)) / strideW) +  (int32_t)1);
Conv2DLoopInner(N, H, W, CI, FH, FW, CO, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideH, strideW, outH, outW, G, inputArr, filterArr, outArr);
}

void Conv2DReshapeFilterGroup(int32_t FH, int32_t FW, int32_t CI, int32_t CO, int32_t g, int32_t G, vector < vector < vector < vector < uint64_t > > > >& inputArr, vector < vector < uint64_t > >& outputArr){

int32_t CIG = (CI / G);

int32_t COG = (CO / G);

int32_t startCO = (g * COG);
for (uint32_t co =  (int32_t)0; co < COG; co++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){
for (uint32_t ci =  (int32_t)0; ci < CIG; ci++){

int32_t linIdx = ((((fh * FW) * CIG) + (fw * CIG)) + ci);
outputArr[co][linIdx] = inputArr[fh][fw][ci][(co + startCO)];
}
}
}
}
}

void Conv2DReshapeMatMulOPGroup(int32_t N, int32_t finalH, int32_t finalW, int32_t CO, int32_t g, int32_t G, vector < vector < uint64_t > >& inputArr, vector < vector < vector < vector < uint64_t > > > >& outputArr){

int32_t COG = (CO / G);

int32_t startCO = (g * COG);
for (uint32_t co =  (int32_t)0; co < COG; co++){
for (uint32_t n =  (int32_t)0; n < N; n++){
for (uint32_t h =  (int32_t)0; h < finalH; h++){
for (uint32_t w =  (int32_t)0; w < finalW; w++){
outputArr[n][h][w][(co + startCO)] = inputArr[co][((((n * finalH) * finalW) + (h * finalW)) + w)];
}
}
}
}
}

void Conv2DReshapeInputGroup(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, int32_t g, int32_t G, int32_t RRows, int32_t RCols, vector < vector < vector < vector < uint64_t > > > >& inputArr, vector < vector < uint64_t > >& outputArr){

int32_t linIdxFilterMult =  (int32_t)0;

int32_t CIG = (CI / G);
for (uint32_t n =  (int32_t)0; n < N; n++){

int32_t leftTopCornerH = ( (int32_t)0 - zPadHLeft);

int32_t extremeRightBottomCornerH = ((H -  (int32_t)1) + zPadHRight);
while ((((leftTopCornerH + FH) -  (int32_t)1) <= extremeRightBottomCornerH)) {

int32_t leftTopCornerW = ( (int32_t)0 - zPadWLeft);

int32_t extremeRightBottomCornerW = ((W -  (int32_t)1) + zPadWRight);
while ((((leftTopCornerW + FW) -  (int32_t)1) <= extremeRightBottomCornerW)) {
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){

int32_t curPosH = (leftTopCornerH + fh);

int32_t curPosW = (leftTopCornerW + fw);

uint64_t val = funcSSCons( (int64_t)0);

int32_t startCI = (g * CIG);
for (uint32_t ci =  (int32_t)0; ci < CIG; ci++){
if ((((curPosH <  (int32_t)0) || (curPosH >= H)) || ((curPosW <  (int32_t)0) || (curPosW >= W)))) {
val = funcSSCons( (int64_t)0);
} else {
val = inputArr[n][curPosH][curPosW][(ci + startCI)];
}
outputArr[((((fh * FW) * CIG) + (fw * CIG)) + ci)][linIdxFilterMult] = val;
}
}
}
linIdxFilterMult = (linIdxFilterMult +  (int32_t)1);
leftTopCornerW = (leftTopCornerW + strideW);
}

leftTopCornerH = (leftTopCornerH + strideH);
}

}
}

void Conv2DGroup(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t CO, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, int32_t G, vector < vector < vector < vector < uint64_t > > > >& inputArr, vector < vector < vector < vector < uint64_t > > > >& filterArr, vector < vector < vector < vector < uint64_t > > > >& outArr){

int32_t CIG = (CI / G);

int32_t reshapedFilterRows = (CO / G);

int32_t reshapedFilterCols = ((FH * FW) * CIG);

int32_t reshapedIPRows = ((FH * FW) * CIG);

int32_t outH = ((((H + (zPadHLeft + zPadHRight)) - FH) / strideH) +  (int32_t)1);

int32_t outW = ((((W + (zPadWLeft + zPadWRight)) - FW) / strideW) +  (int32_t)1);

int32_t reshapedIPCols = ((N * outH) * outW);
for (uint32_t g =  (int32_t)0; g < G; g++){

vector < vector < uint64_t > > inputReshaped = make_vector<uint64_t>(reshapedIPRows, reshapedIPCols);

vector < vector < uint64_t > > matmulOP = make_vector<uint64_t>(reshapedFilterRows, reshapedIPCols);

vector < vector < uint64_t > > filterReshaped = make_vector<uint64_t>(reshapedFilterRows, reshapedFilterCols);
Conv2DReshapeFilterGroup(FH, FW, CI, CO, g, G, filterArr, filterReshaped);
Conv2DReshapeInputGroup(N, H, W, CI, FH, FW, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideH, strideW, g, G, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);
MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, 1);
Conv2DReshapeMatMulOPGroup(N, outH, outW, CO, g, G, matmulOP, outArr);
ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}
}

void Conv3DReshapeFilter(int32_t FD, int32_t FH, int32_t FW, int32_t CI, int32_t CO, vector < vector < vector < vector < vector < uint64_t > > > > >& inputArr, vector < vector < uint64_t > >& outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t fd =  (int32_t)0; fd < FD; fd++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){

int32_t linIdx = ((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) + (fw * CI)) + ci);
outputArr[co][linIdx] = inputArr[fd][fh][fw][ci][co];
}
}
}
}
}
}

void Conv3DReshapeMatMulOP(int32_t N, int32_t finalD, int32_t finalH, int32_t finalW, int32_t CO, vector < vector < uint64_t > >& inputArr, vector < vector < vector < vector < vector < uint64_t > > > > >& outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t n =  (int32_t)0; n < N; n++){
for (uint32_t d =  (int32_t)0; d < finalD; d++){
for (uint32_t h =  (int32_t)0; h < finalH; h++){
for (uint32_t w =  (int32_t)0; w < finalW; w++){
outputArr[n][d][h][w][co] = inputArr[co][((((((n * finalD) * finalH) * finalW) + ((d * finalH) * finalW)) + (h * finalW)) + w)];
}
}
}
}
}
}

void Conv3DReshapeInput(int32_t N, int32_t D, int32_t H, int32_t W, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t zPadDLeft, int32_t zPadDRight, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideD, int32_t strideH, int32_t strideW, int32_t RRows, int32_t RCols, vector < vector < vector < vector < vector < uint64_t > > > > >& inputArr, vector < vector < uint64_t > >& outputArr){

int32_t linIdxFilterMult =  (int32_t)0;
for (uint32_t n =  (int32_t)0; n < N; n++){

int32_t leftTopCornerD = ( (int32_t)0 - zPadDLeft);

int32_t extremeRightBottomCornerD = ((D -  (int32_t)1) + zPadDRight);
while ((((leftTopCornerD + FD) -  (int32_t)1) <= extremeRightBottomCornerD)) {

int32_t leftTopCornerH = ( (int32_t)0 - zPadHLeft);

int32_t extremeRightBottomCornerH = ((H -  (int32_t)1) + zPadHRight);
while ((((leftTopCornerH + FH) -  (int32_t)1) <= extremeRightBottomCornerH)) {

int32_t leftTopCornerW = ( (int32_t)0 - zPadWLeft);

int32_t extremeRightBottomCornerW = ((W -  (int32_t)1) + zPadWRight);
while ((((leftTopCornerW + FW) -  (int32_t)1) <= extremeRightBottomCornerW)) {
for (uint32_t fd =  (int32_t)0; fd < FD; fd++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){

int32_t curPosD = (leftTopCornerD + fd);

int32_t curPosH = (leftTopCornerH + fh);

int32_t curPosW = (leftTopCornerW + fw);

uint64_t val = funcSSCons( (int64_t)0);
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){
if (((((curPosD <  (int32_t)0) || (curPosD >= D)) || ((curPosH <  (int32_t)0) || (curPosH >= H))) || ((curPosW <  (int32_t)0) || (curPosW >= W)))) {
val = funcSSCons( (int64_t)0);
} else {
val = inputArr[n][curPosD][curPosH][curPosW][ci];
}
outputArr[((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) + (fw * CI)) + ci)][linIdxFilterMult] = val;
}
}
}
}
linIdxFilterMult = (linIdxFilterMult +  (int32_t)1);
leftTopCornerW = (leftTopCornerW + strideW);
}

leftTopCornerH = (leftTopCornerH + strideH);
}

leftTopCornerD = (leftTopCornerD + strideD);
}

}
}

void Conv3D(int32_t N, int32_t D, int32_t H, int32_t W, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t zPadDLeft, int32_t zPadDRight, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideD, int32_t strideH, int32_t strideW, vector < vector < vector < vector < vector < uint64_t > > > > >& inputArr, vector < vector < vector < vector < vector < uint64_t > > > > >& filterArr, vector < vector < vector < vector < vector < uint64_t > > > > >& outArr){

int32_t reshapedFilterRows = CO;

int32_t reshapedFilterCols = (((FD * FH) * FW) * CI);

int32_t reshapedIPRows = (((FD * FH) * FW) * CI);

int32_t newD = ((((D + (zPadDLeft + zPadDRight)) - FD) / strideD) +  (int32_t)1);

int32_t newH = ((((H + (zPadHLeft + zPadHRight)) - FH) / strideH) +  (int32_t)1);

int32_t newW = ((((W + (zPadWLeft + zPadWRight)) - FW) / strideW) +  (int32_t)1);

int32_t reshapedIPCols = (((N * newD) * newH) * newW);

vector < vector < uint64_t > > filterReshaped = make_vector<uint64_t>(reshapedFilterRows, reshapedFilterCols);

vector < vector < uint64_t > > inputReshaped = make_vector<uint64_t>(reshapedIPRows, reshapedIPCols);

vector < vector < uint64_t > > matmulOP = make_vector<uint64_t>(reshapedFilterRows, reshapedIPCols);
Conv3DReshapeFilter(FD, FH, FW, CI, CO, filterArr, filterReshaped);
Conv3DReshapeInput(N, D, H, W, CI, FD, FH, FW, zPadDLeft, zPadDRight, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideD, strideH, strideW, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);
MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, 1);
Conv3DReshapeMatMulOP(N, newD, newH, newW, CO, matmulOP, outArr);
ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

void Conv3DLoopInner(int32_t N, int32_t D, int32_t H, int32_t W, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t zPadDLeft, int32_t zPadDRight, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideD, int32_t strideH, int32_t strideW, int32_t outD, int32_t outH, int32_t outW, vector < vector < vector < vector < vector < uint64_t > > > > >& inputArr, vector < vector < vector < vector < vector < uint64_t > > > > >& filterArr, vector < vector < vector < vector < vector < uint64_t > > > > >& outArr){
for (uint32_t n =  (int32_t)0; n < N; n++){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t d =  (int32_t)0; d < outD; d++){
for (uint32_t h =  (int32_t)0; h < outH; h++){
for (uint32_t w =  (int32_t)0; w < outW; w++){
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){

uint64_t val = funcSSCons( (int64_t)0);
for (uint32_t fd = (d * strideD); fd < ((d * strideD) + FD); fd++){
for (uint32_t fh = (h * strideH); fh < ((h * strideH) + FH); fh++){
for (uint32_t fw = (w * strideW); fw < ((w * strideW) + FW); fw++){

int32_t curPosD = (fd - zPadDLeft);

int32_t curPosH = (fh - zPadHLeft);

int32_t curPosW = (fw - zPadWLeft);
if (((((((curPosD >=  (int32_t)0) && (curPosH >=  (int32_t)0)) && (curPosW >=  (int32_t)0)) && (curPosD < D)) && (curPosH < H)) && (curPosW < W))) {

int32_t curFilterPosD = (fd - (d * strideD));

int32_t curFilterPosH = (fh - (h * strideH));

int32_t curFilterPosW = (fw - (w * strideW));
val = val+funcMult(inputArr[n][curPosD][curPosH][curPosW][ci], filterArr[curFilterPosD][curFilterPosH][curFilterPosW][ci][co]);
}
}
}
}
outArr[n][d][h][w][co] = outArr[n][d][h][w][co]+val;
}
}
}
}
}
}
}

void Conv3DLoop(int32_t N, int32_t D, int32_t H, int32_t W, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t zPadDLeft, int32_t zPadDRight, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideD, int32_t strideH, int32_t strideW, vector < vector < vector < vector < vector < uint64_t > > > > >& inputArr, vector < vector < vector < vector < vector < uint64_t > > > > >& filterArr, vector < vector < vector < vector < vector < uint64_t > > > > >& outArr){

int32_t outD = ((((D - FD) + (zPadDLeft + zPadDRight)) / strideD) +  (int32_t)1);

int32_t outH = ((((H - FH) + (zPadHLeft + zPadHRight)) / strideH) +  (int32_t)1);

int32_t outW = ((((W - FW) + (zPadWLeft + zPadWRight)) / strideW) +  (int32_t)1);
Conv3DLoopInner(N, D, H, W, CI, FD, FH, FW, CO, zPadDLeft, zPadDRight, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideD, strideH, strideW, outD, outH, outW, inputArr, filterArr, outArr);
}

void ConvTranspose2DReshapeMatMulOP(int32_t N, int32_t finalH, int32_t finalW, int32_t CO, vector < vector < uint64_t > >& inputArr, vector < vector < vector < vector < uint64_t > > > >& outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t n =  (int32_t)0; n < N; n++){
for (uint32_t h =  (int32_t)0; h < finalH; h++){
for (uint32_t w =  (int32_t)0; w < finalW; w++){
outputArr[n][h][w][co] = inputArr[co][((((n * finalH) * finalW) + (h * finalW)) + w)];
}
}
}
}
}

void ConvTranspose2DReshapeFilter(int32_t FH, int32_t FW, int32_t CO, int32_t CI, vector < vector < vector < vector < uint64_t > > > >& inputArr, vector < vector < uint64_t > >& outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){

int32_t linIdx = ((((fh * FW) * CI) + (fw * CI)) + ci);
outputArr[co][linIdx] = inputArr[((FH -  (int32_t)1) - fh)][((FW -  (int32_t)1) - fw)][co][ci];
}
}
}
}
}

void ConvTranspose2DReshapeInput(int32_t N, int32_t HPrime, int32_t WPrime, int32_t CI, int32_t FH, int32_t FW, int32_t zPadTrHLeft, int32_t zPadTrHRight, int32_t zPadTrWLeft, int32_t zPadTrWRight, int32_t strideH, int32_t strideW, int32_t RRows, int32_t RCols, vector < vector < vector < vector < uint64_t > > > >& inputArr, vector < vector < uint64_t > >& outputArr){

int32_t linIdxFilterMult =  (int32_t)0;
for (uint32_t n =  (int32_t)0; n < N; n++){

int32_t leftTopCornerH = ( (int32_t)0 - zPadTrHLeft);

int32_t HPrimeTilde = (HPrime + ((HPrime -  (int32_t)1) * (strideH -  (int32_t)1)));

int32_t extremeRightBottomCornerH = ((HPrimeTilde -  (int32_t)1) + zPadTrHRight);
while ((((leftTopCornerH + FH) -  (int32_t)1) <= extremeRightBottomCornerH)) {

int32_t leftTopCornerW = ( (int32_t)0 - zPadTrWLeft);

int32_t WPrimeTilde = (WPrime + ((WPrime -  (int32_t)1) * (strideW -  (int32_t)1)));

int32_t extremeRightBottomCornerW = ((WPrimeTilde -  (int32_t)1) + zPadTrWRight);
while ((((leftTopCornerW + FW) -  (int32_t)1) <= extremeRightBottomCornerW)) {
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){

int32_t curPosH = (leftTopCornerH + fh);

int32_t curPosW = (leftTopCornerW + fw);

uint64_t val = funcSSCons( (int64_t)0);
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){
if ((((curPosH <  (int32_t)0) || (curPosH >= HPrimeTilde)) || ((curPosW <  (int32_t)0) || (curPosW >= WPrimeTilde)))) {
val = funcSSCons( (int64_t)0);
} else {
if ((((curPosH % strideH) ==  (int32_t)0) && ((curPosW % strideW) ==  (int32_t)0))) {

int32_t idxInputH = (curPosH / strideH);

int32_t idxInputW = (curPosW / strideW);
val = inputArr[n][idxInputH][idxInputW][ci];
} else {
val = funcSSCons( (int64_t)0);
}
}
outputArr[((((fh * FW) * CI) + (fw * CI)) + ci)][linIdxFilterMult] = val;
}
}
}
linIdxFilterMult = (linIdxFilterMult +  (int32_t)1);
leftTopCornerW = (leftTopCornerW +  (int32_t)1);
}

leftTopCornerH = (leftTopCornerH +  (int32_t)1);
}

}
}

void ConvTranspose2D(int32_t N, int32_t HPrime, int32_t WPrime, int32_t CI, int32_t FH, int32_t FW, int32_t CO, int32_t H, int32_t W, int32_t zPadTrHLeft, int32_t zPadTrHRight, int32_t zPadTrWLeft, int32_t zPadTrWRight, int32_t strideH, int32_t strideW, vector < vector < vector < vector < uint64_t > > > >& inputArr, vector < vector < vector < vector < uint64_t > > > >& filterArr, vector < vector < vector < vector < uint64_t > > > >& outArr){

int32_t reshapedFilterRows = CO;

int32_t reshapedFilterCols = ((FH * FW) * CI);

int32_t reshapedIPRows = ((FH * FW) * CI);

int32_t reshapedIPCols = ((N * H) * W);

vector < vector < uint64_t > > filterReshaped = make_vector<uint64_t>(reshapedFilterRows, reshapedFilterCols);

vector < vector < uint64_t > > inputReshaped = make_vector<uint64_t>(reshapedIPRows, reshapedIPCols);

vector < vector < uint64_t > > matmulOP = make_vector<uint64_t>(reshapedFilterRows, reshapedIPCols);
ConvTranspose2DReshapeFilter(FH, FW, CO, CI, filterArr, filterReshaped);
ConvTranspose2DReshapeInput(N, HPrime, WPrime, CI, FH, FW, zPadTrHLeft, zPadTrHRight, zPadTrWLeft, zPadTrWRight, strideH, strideW, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);
MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, 1);
ConvTranspose2DReshapeMatMulOP(N, H, W, CO, matmulOP, outArr);
ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

void ConvTranspose3DReshapeFilter(int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t CI, vector < vector < vector < vector < vector < uint64_t > > > > >& inputArr, vector < vector < uint64_t > >& outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t fd =  (int32_t)0; fd < FD; fd++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){

int32_t linIdx = ((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) + (fw * CI)) + ci);
outputArr[co][linIdx] = inputArr[((FD -  (int32_t)1) - fd)][((FH -  (int32_t)1) - fh)][((FW -  (int32_t)1) - fw)][co][ci];
}
}
}
}
}
}

void ConvTranspose3DReshapeInput(int32_t N, int32_t DPrime, int32_t HPrime, int32_t WPrime, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t zPadTrDLeft, int32_t zPadTrDRight, int32_t zPadTrHLeft, int32_t zPadTrHRight, int32_t zPadTrWLeft, int32_t zPadTrWRight, int32_t strideD, int32_t strideH, int32_t strideW, int32_t RRows, int32_t RCols, vector < vector < vector < vector < vector < uint64_t > > > > >& inputArr, vector < vector < uint64_t > >& outputArr){

int32_t linIdxFilterMult =  (int32_t)0;
for (uint32_t n =  (int32_t)0; n < N; n++){

int32_t leftTopCornerD = ( (int32_t)0 - zPadTrDLeft);

int32_t DPrimeTilde = (DPrime + ((DPrime -  (int32_t)1) * (strideD -  (int32_t)1)));

int32_t extremeRightBottomCornerD = ((DPrimeTilde -  (int32_t)1) + zPadTrDRight);
while ((((leftTopCornerD + FD) -  (int32_t)1) <= extremeRightBottomCornerD)) {

int32_t leftTopCornerH = ( (int32_t)0 - zPadTrHLeft);

int32_t HPrimeTilde = (HPrime + ((HPrime -  (int32_t)1) * (strideH -  (int32_t)1)));

int32_t extremeRightBottomCornerH = ((HPrimeTilde -  (int32_t)1) + zPadTrHRight);
while ((((leftTopCornerH + FH) -  (int32_t)1) <= extremeRightBottomCornerH)) {

int32_t leftTopCornerW = ( (int32_t)0 - zPadTrWLeft);

int32_t WPrimeTilde = (WPrime + ((WPrime -  (int32_t)1) * (strideW -  (int32_t)1)));

int32_t extremeRightBottomCornerW = ((WPrimeTilde -  (int32_t)1) + zPadTrWRight);
while ((((leftTopCornerW + FW) -  (int32_t)1) <= extremeRightBottomCornerW)) {
for (uint32_t fd =  (int32_t)0; fd < FD; fd++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){

int32_t curPosD = (leftTopCornerD + fd);

int32_t curPosH = (leftTopCornerH + fh);

int32_t curPosW = (leftTopCornerW + fw);

uint64_t val = funcSSCons( (int64_t)0);
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){
if (((((curPosD <  (int32_t)0) || (curPosD >= DPrimeTilde)) || ((curPosH <  (int32_t)0) || (curPosH >= HPrimeTilde))) || ((curPosW <  (int32_t)0) || (curPosW >= WPrimeTilde)))) {
val = funcSSCons( (int64_t)0);
} else {
if (((((curPosD % strideD) ==  (int32_t)0) && ((curPosH % strideH) ==  (int32_t)0)) && ((curPosW % strideW) ==  (int32_t)0))) {

int32_t idxInputD = (curPosD / strideD);

int32_t idxInputH = (curPosH / strideH);

int32_t idxInputW = (curPosW / strideW);
val = inputArr[n][idxInputD][idxInputH][idxInputW][ci];
} else {
val = funcSSCons( (int64_t)0);
}
}
outputArr[((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) + (fw * CI)) + ci)][linIdxFilterMult] = val;
}
}
}
}
linIdxFilterMult = (linIdxFilterMult +  (int32_t)1);
leftTopCornerW = (leftTopCornerW +  (int32_t)1);
}

leftTopCornerH = (leftTopCornerH +  (int32_t)1);
}

leftTopCornerD = (leftTopCornerD +  (int32_t)1);
}

}
}

void ConvTranspose3D(int32_t N, int32_t DPrime, int32_t HPrime, int32_t WPrime, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t D, int32_t H, int32_t W, int32_t zPadTrDLeft, int32_t zPadTrDRight, int32_t zPadTrHLeft, int32_t zPadTrHRight, int32_t zPadTrWLeft, int32_t zPadTrWRight, int32_t strideD, int32_t strideH, int32_t strideW, vector < vector < vector < vector < vector < uint64_t > > > > >& inputArr, vector < vector < vector < vector < vector < uint64_t > > > > >& filterArr, vector < vector < vector < vector < vector < uint64_t > > > > >& outArr){

int32_t reshapedFilterRows = CO;

int32_t reshapedFilterCols = (((FD * FH) * FW) * CI);

int32_t reshapedIPRows = (((FD * FH) * FW) * CI);

int32_t reshapedIPCols = (((N * D) * H) * W);

vector < vector < uint64_t > > filterReshaped = make_vector<uint64_t>(reshapedFilterRows, reshapedFilterCols);

vector < vector < uint64_t > > inputReshaped = make_vector<uint64_t>(reshapedIPRows, reshapedIPCols);

vector < vector < uint64_t > > matmulOP = make_vector<uint64_t>(reshapedFilterRows, reshapedIPCols);
ConvTranspose3DReshapeFilter(FD, FH, FW, CO, CI, filterArr, filterReshaped);
ConvTranspose3DReshapeInput(N, DPrime, HPrime, WPrime, CI, FD, FH, FW, zPadTrDLeft, zPadTrDRight, zPadTrHLeft, zPadTrHRight, zPadTrWLeft, zPadTrWRight, strideD, strideH, strideW, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);
MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, 1);
Conv3DReshapeMatMulOP(N, D, H, W, CO, matmulOP, outArr);
ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

void ConvTranspose3DLoopInner(int32_t N, int32_t D, int32_t H, int32_t W, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t zPadDLeft, int32_t zPadDRight, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideD, int32_t strideH, int32_t strideW, int32_t outD, int32_t outH, int32_t outW, vector < vector < vector < vector < vector < uint64_t > > > > >& inputArr, vector < vector < vector < vector < vector < uint64_t > > > > >& filterArr, vector < vector < vector < vector < vector < uint64_t > > > > >& outArr){
for (uint32_t n =  (int32_t)0; n < N; n++){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t d =  (int32_t)0; d < outD; d++){
for (uint32_t h =  (int32_t)0; h < outH; h++){
for (uint32_t w =  (int32_t)0; w < outW; w++){
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){

uint64_t val = funcSSCons( (int64_t)0);
for (uint32_t fd = d; fd < (d + FD); fd++){
for (uint32_t fh = h; fh < (h + FH); fh++){
for (uint32_t fw = w; fw < (w + FW); fw++){

int32_t curPosD = ((fd - zPadDLeft) / strideD);

int32_t curPosH = ((fh - zPadHLeft) / strideD);

int32_t curPosW = ((fw - zPadWLeft) / strideD);
if ((((((((((curPosD >=  (int32_t)0) && (curPosH >=  (int32_t)0)) && (curPosW >=  (int32_t)0)) && (curPosD < D)) && (curPosH < H)) && (curPosW < W)) && (((fd - zPadDLeft) % strideD) ==  (int32_t)0)) && (((fh - zPadHLeft) % strideH) ==  (int32_t)0)) && (((fw - zPadWLeft) % strideW) ==  (int32_t)0))) {

int32_t curFilterPosD = (((FD + d) - fd) -  (int32_t)1);

int32_t curFilterPosH = (((FH + h) - fh) -  (int32_t)1);

int32_t curFilterPosW = (((FW + w) - fw) -  (int32_t)1);
val = val+funcMult(inputArr[n][curPosD][curPosH][curPosW][ci], filterArr[curFilterPosD][curFilterPosH][curFilterPosW][co][ci]);
}
}
}
}
outArr[n][d][h][w][co] = outArr[n][d][h][w][co]+val;
}
}
}
}
}
}
}

void ConvTranspose3DLoop(int32_t N, int32_t DPrime, int32_t HPrime, int32_t WPrime, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t D, int32_t H, int32_t W, int32_t zPadTrDLeft, int32_t zPadTrDRight, int32_t zPadTrHLeft, int32_t zPadTrHRight, int32_t zPadTrWLeft, int32_t zPadTrWRight, int32_t strideD, int32_t strideH, int32_t strideW, vector < vector < vector < vector < vector < uint64_t > > > > >& inputArr, vector < vector < vector < vector < vector < uint64_t > > > > >& filterArr, vector < vector < vector < vector < vector < uint64_t > > > > >& outArr){
ConvTranspose3DLoopInner(N, DPrime, HPrime, WPrime, CI, FD, FH, FW, CO, zPadTrDLeft, zPadTrDRight, zPadTrHLeft, zPadTrHRight, zPadTrWLeft, zPadTrWRight, strideD, strideH, strideW, D, H, W, inputArr, filterArr, outArr);
}

void Transpose2(int32_t s1, int32_t s2, vector < vector < uint64_t > >& inArr, vector < vector < uint64_t > >& outArr){
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
outArr[i][j] = inArr[j][i];
}
}
}

void Pad442(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inps1, int32_t inps2, int32_t inps3, int32_t inps4, vector < vector < vector < vector < uint64_t > > > >& inpArr, int32_t pads1, int32_t pads2, vector < vector < int32_t > >& paddings, vector < vector < vector < vector < uint64_t > > > >& outArr){

int32_t lbounds1 = paddings[ (int32_t)0][ (int32_t)0];

int32_t rbounds1excl = (s1 - paddings[ (int32_t)0][ (int32_t)1]);

int32_t lbounds2 = paddings[ (int32_t)1][ (int32_t)0];

int32_t rbounds2excl = (s2 - paddings[ (int32_t)1][ (int32_t)1]);

int32_t lbounds3 = paddings[ (int32_t)2][ (int32_t)0];

int32_t rbounds3excl = (s3 - paddings[ (int32_t)2][ (int32_t)1]);

int32_t lbounds4 = paddings[ (int32_t)3][ (int32_t)0];

int32_t rbounds4excl = (s4 - paddings[ (int32_t)3][ (int32_t)1]);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
for (uint32_t l =  (int32_t)0; l < s4; l++){
if (((((((((i >= lbounds1) && (i < rbounds1excl)) && (j >= lbounds2)) && (j < rbounds2excl)) && (k >= lbounds3)) && (k < rbounds3excl)) && (l >= lbounds4)) && (l < rbounds4excl))) {
outArr[i][j][k][l] = inpArr[(i - paddings[ (int32_t)0][ (int32_t)0])][(j - paddings[ (int32_t)1][ (int32_t)0])][(k - paddings[ (int32_t)2][ (int32_t)0])][(l - paddings[ (int32_t)3][ (int32_t)0])];
} else {
outArr[i][j][k][l] = funcSSCons( (int64_t)0);
}
}
}
}
}
}

void Pad552(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, int32_t inps1, int32_t inps2, int32_t inps3, int32_t inps4, int32_t inps5, vector < vector < vector < vector < vector < uint64_t > > > > >& inpArr, int32_t pads1, int32_t pads2, vector < vector < int32_t > >& paddings, vector < vector < vector < vector < vector < uint64_t > > > > >& outArr){

int32_t lbounds1 = paddings[ (int32_t)0][ (int32_t)0];

int32_t rbounds1excl = (s1 - paddings[ (int32_t)0][ (int32_t)1]);

int32_t lbounds2 = paddings[ (int32_t)1][ (int32_t)0];

int32_t rbounds2excl = (s2 - paddings[ (int32_t)1][ (int32_t)1]);

int32_t lbounds3 = paddings[ (int32_t)2][ (int32_t)0];

int32_t rbounds3excl = (s3 - paddings[ (int32_t)2][ (int32_t)1]);

int32_t lbounds4 = paddings[ (int32_t)3][ (int32_t)0];

int32_t rbounds4excl = (s4 - paddings[ (int32_t)3][ (int32_t)1]);

int32_t lbounds5 = paddings[ (int32_t)4][ (int32_t)0];

int32_t rbounds5excl = (s5 - paddings[ (int32_t)4][ (int32_t)1]);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
for (uint32_t l =  (int32_t)0; l < s4; l++){
for (uint32_t m =  (int32_t)0; m < s5; m++){
if (((((((((((i >= lbounds1) && (i < rbounds1excl)) && (j >= lbounds2)) && (j < rbounds2excl)) && (k >= lbounds3)) && (k < rbounds3excl)) && (l >= lbounds4)) && (l < rbounds4excl)) && (m >= lbounds5)) && (m < rbounds5excl))) {
outArr[i][j][k][l][m] = inpArr[(i - paddings[ (int32_t)0][ (int32_t)0])][(j - paddings[ (int32_t)1][ (int32_t)0])][(k - paddings[ (int32_t)2][ (int32_t)0])][(l - paddings[ (int32_t)3][ (int32_t)0])][(m - paddings[ (int32_t)4][ (int32_t)0])];
} else {
outArr[i][j][k][l][m] = funcSSCons( (int64_t)0);
}
}
}
}
}
}
}

void PadONNX441(int32_t o1, int32_t o2, int32_t o3, int32_t o4, int32_t i1, int32_t i2, int32_t i3, int32_t i4, vector < vector < vector < vector < uint64_t > > > >& inpArr, int32_t pads, vector < int32_t >& paddings, vector < vector < vector < vector < uint64_t > > > >& outArr){

int32_t lbounds1 = paddings[ (int32_t)0];

int32_t rbounds1excl = (o1 - paddings[ (int32_t)4]);

int32_t lbounds2 = paddings[ (int32_t)1];

int32_t rbounds2excl = (o2 - paddings[ (int32_t)5]);

int32_t lbounds3 = paddings[ (int32_t)2];

int32_t rbounds3excl = (o3 - paddings[ (int32_t)6]);

int32_t lbounds4 = paddings[ (int32_t)3];

int32_t rbounds4excl = (o4 - paddings[ (int32_t)7]);
for (uint32_t i =  (int32_t)0; i < o1; i++){
for (uint32_t j =  (int32_t)0; j < o2; j++){
for (uint32_t k =  (int32_t)0; k < o3; k++){
for (uint32_t l =  (int32_t)0; l < o4; l++){
if (((((((((i >= lbounds1) && (i < rbounds1excl)) && (j >= lbounds2)) && (j < rbounds2excl)) && (k >= lbounds3)) && (k < rbounds3excl)) && (l >= lbounds4)) && (l < rbounds4excl))) {
outArr[i][j][k][l] = inpArr[(i - paddings[ (int32_t)0])][(j - paddings[ (int32_t)1])][(k - paddings[ (int32_t)2])][(l - paddings[ (int32_t)3])];
} else {
outArr[i][j][k][l] = funcSSCons( (int64_t)0);
}
}
}
}
}
}

void Squeeze24(int32_t s1, int32_t s2, int32_t dim1, int32_t dim2, int32_t ins1, int32_t ins2, int32_t ins3, int32_t ins4, vector < vector < vector < vector < uint64_t > > > >& inArr, vector < vector < uint64_t > >& outArr){
for (uint32_t i =  (int32_t)0; i < ins1; i++){
for (uint32_t j =  (int32_t)0; j < ins2; j++){
for (uint32_t k =  (int32_t)0; k < ins3; k++){
for (uint32_t l =  (int32_t)0; l < ins4; l++){

int32_t linIdx = ((((((i * ins2) * ins3) * ins4) + ((j * ins3) * ins4)) + (k * ins4)) + l);

int32_t outIdx1 = (linIdx / s2);

int32_t outIdx2 = (linIdx % s2);
outArr[outIdx1][outIdx2] = inArr[i][j][k][l];
}
}
}
}
}

void FusedBatchNorm4411(int32_t s1, int32_t s2, int32_t s3, int32_t s4, vector < vector < vector < vector < uint64_t > > > >& inArr, vector < uint64_t >& multArr, vector < uint64_t >& biasArr, int32_t multExprScaleDownSf, int32_t biasExprScaleUpSf, vector < vector < vector < vector < uint64_t > > > >& outputArr){

int32_t inpSize = (((s1 * s2) * s3) * s4);

vector < uint64_t > inArrReshaped = make_vector<uint64_t>(inpSize);

vector < uint64_t > multArrReshaped = make_vector<uint64_t>(inpSize);

vector < uint64_t > multExprAns = make_vector<uint64_t>(inpSize);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
inArrReshaped[linIdx] = inArr[i1][i2][i3][i4];
multArrReshaped[linIdx] = multArr[i4];
}
}
}
}
ElemWiseActModelVectorMult(inpSize, inArrReshaped, multArrReshaped, multExprAns);
if ((multExprScaleDownSf >  (int32_t)0)) {
ScaleDown(inpSize, multExprAns, multExprScaleDownSf);
}

vector < uint64_t > biasArrScaledUp = make_vector<uint64_t>(s4);
for (uint32_t ii =  (int32_t)0; ii < s4; ii++){
biasArrScaledUp[ii] = biasArr[ii];
}
if ((biasExprScaleUpSf >  (int32_t)0)) {
ScaleUp(s4, biasArrScaledUp, biasExprScaleUpSf);
}
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
outputArr[i1][i2][i3][i4] = multExprAns[linIdx]+biasArrScaledUp[i4];
}
}
}
}
ClearMemSecret1(inpSize, inArrReshaped);
ClearMemSecret1(inpSize, multArrReshaped);
ClearMemSecret1(inpSize, multExprAns);
ClearMemSecret1(s4, biasArrScaledUp);
}

void FusedBatchNorm5511(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, vector < vector < vector < vector < vector < uint64_t > > > > >& inArr, vector < uint64_t >& multArr, vector < uint64_t >& biasArr, int32_t multExprScaleDownSf, int32_t biasExprScaleUpSf, vector < vector < vector < vector < vector < uint64_t > > > > >& outputArr){

int32_t inpSize = ((((s1 * s2) * s3) * s4) * s5);

vector < uint64_t > inArrReshaped = make_vector<uint64_t>(inpSize);

vector < uint64_t > multArrReshaped = make_vector<uint64_t>(inpSize);

vector < uint64_t > multExprAns = make_vector<uint64_t>(inpSize);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){

int32_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
inArrReshaped[linIdx] = inArr[i1][i2][i3][i4][i5];
multArrReshaped[linIdx] = multArr[i5];
}
}
}
}
}
ElemWiseActModelVectorMult(inpSize, inArrReshaped, multArrReshaped, multExprAns);
if ((multExprScaleDownSf >  (int32_t)0)) {
ScaleDown(inpSize, multExprAns, multExprScaleDownSf);
}

vector < uint64_t > biasArrScaledUp = make_vector<uint64_t>(s5);
for (uint32_t ii =  (int32_t)0; ii < s5; ii++){
biasArrScaledUp[ii] = biasArr[ii];
}
if ((biasExprScaleUpSf >  (int32_t)0)) {
ScaleUp(s5, biasArrScaledUp, biasExprScaleUpSf);
}
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){

int32_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
outputArr[i1][i2][i3][i4][i5] = multExprAns[linIdx]+biasArrScaledUp[i5];
}
}
}
}
}
ClearMemSecret1(inpSize, inArrReshaped);
ClearMemSecret1(inpSize, multArrReshaped);
ClearMemSecret1(inpSize, multExprAns);
ClearMemSecret1(s5, biasArrScaledUp);
}

void ElemWiseMul2(int32_t s1, int32_t s2, vector < vector < uint64_t > >& arr1, vector < vector < uint64_t > >& arr2, vector < vector < uint64_t > >& outArr){

int32_t inpSize = (s1 * s2);

vector < uint64_t > arr1Reshaped = make_vector<uint64_t>(inpSize);

vector < uint64_t > arr2Reshaped = make_vector<uint64_t>(inpSize);

vector < uint64_t > outArrReshaped = make_vector<uint64_t>(inpSize);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
arr1Reshaped[linIdx] = arr1[i1][i2];
arr2Reshaped[linIdx] = arr2[i1][i2];
}
}
ElemWiseSecretSharedVectorMult(inpSize, arr1Reshaped, arr2Reshaped, outArrReshaped);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
outArr[i1][i2] = outArrReshaped[linIdx];
}
}
ClearMemSecret1(inpSize, arr1Reshaped);
ClearMemSecret1(inpSize, arr2Reshaped);
ClearMemSecret1(inpSize, outArrReshaped);
}

void ElemWiseMul4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, vector < vector < vector < vector < uint64_t > > > >& arr1, vector < vector < vector < vector < uint64_t > > > >& arr2, vector < vector < vector < vector < uint64_t > > > >& outArr){

int32_t inpSize = (((s1 * s2) * s3) * s4);

vector < uint64_t > arr1Reshaped = make_vector<uint64_t>(inpSize);

vector < uint64_t > arr2Reshaped = make_vector<uint64_t>(inpSize);

vector < uint64_t > outArrReshaped = make_vector<uint64_t>(inpSize);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
arr1Reshaped[linIdx] = arr1[i1][i2][i3][i4];
arr2Reshaped[linIdx] = arr2[i1][i2][i3][i4];
}
}
}
}
ElemWiseSecretSharedVectorMult(inpSize, arr1Reshaped, arr2Reshaped, outArrReshaped);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
outArr[i1][i2][i3][i4] = outArrReshaped[linIdx];
}
}
}
}
ClearMemSecret1(inpSize, arr1Reshaped);
ClearMemSecret1(inpSize, arr2Reshaped);
ClearMemSecret1(inpSize, outArrReshaped);
}

void ElemWiseMul5(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, vector < vector < vector < vector < vector < uint64_t > > > > >& arr1, vector < vector < vector < vector < vector < uint64_t > > > > >& arr2, vector < vector < vector < vector < vector < uint64_t > > > > >& outArr){

int32_t inpSize = ((((s1 * s2) * s3) * s4) * s5);

vector < uint64_t > arr1Reshaped = make_vector<uint64_t>(inpSize);

vector < uint64_t > arr2Reshaped = make_vector<uint64_t>(inpSize);

vector < uint64_t > outArrReshaped = make_vector<uint64_t>(inpSize);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){

int32_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
arr1Reshaped[linIdx] = arr1[i1][i2][i3][i4][i5];
arr2Reshaped[linIdx] = arr2[i1][i2][i3][i4][i5];
}
}
}
}
}
ElemWiseSecretSharedVectorMult(inpSize, arr1Reshaped, arr2Reshaped, outArrReshaped);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){

int32_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
outArr[i1][i2][i3][i4][i5] = outArrReshaped[linIdx];
}
}
}
}
}
ClearMemSecret1(inpSize, arr1Reshaped);
ClearMemSecret1(inpSize, arr2Reshaped);
ClearMemSecret1(inpSize, outArrReshaped);
}

void ReduceMean24(int32_t outS1, int32_t outS2, int32_t inS1, int32_t inS2, int32_t inS3, int32_t inS4, vector < vector < vector < vector < uint64_t > > > >& inputArr, vector < int32_t >& axes, vector < vector < uint64_t > >& outputArr){

int32_t divisor = (inS2 * inS3);

int32_t outputSize = (outS1 * outS2);

vector < uint64_t > sumArr = make_vector<uint64_t>(outputSize);

vector < uint64_t > outputArrReshaped = make_vector<uint64_t>(outputSize);
for (uint32_t i1 =  (int32_t)0; i1 < outS1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < outS2; i2++){

uint64_t summ = funcSSCons( (int64_t)0);
for (uint32_t i =  (int32_t)0; i < inS2; i++){
for (uint32_t j =  (int32_t)0; j < inS3; j++){
summ = summ+inputArr[i1][i][j][i2];
}
}
sumArr[((i1 * outS2) + i2)] = summ;
}
}
ElemWiseVectorPublicDiv(outputSize, sumArr, divisor, outputArrReshaped);
for (uint32_t i1 =  (int32_t)0; i1 < outS1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < outS2; i2++){
outputArr[i1][i2] = outputArrReshaped[((i1 * outS2) + i2)];
}
}
ClearMemSecret1(outputSize, sumArr);
ClearMemSecret1(outputSize, outputArrReshaped);
}

void ReduceMeanONNX24(int32_t outS1, int32_t outS2, int32_t inS1, int32_t inS2, int32_t inS3, int32_t inS4, vector < vector < vector < vector < uint64_t > > > >& inputArr, int32_t axis1, int32_t axis2, vector < vector < uint64_t > >& outputArr){

int32_t divisor = (inS3 * inS4);

int32_t outputSize = (outS1 * outS2);

vector < uint64_t > sumArr = make_vector<uint64_t>(outputSize);

vector < uint64_t > outputArrReshaped = make_vector<uint64_t>(outputSize);
for (uint32_t i1 =  (int32_t)0; i1 < outS1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < outS2; i2++){

uint64_t summ = funcSSCons( (int64_t)0);
for (uint32_t i =  (int32_t)0; i < inS3; i++){
for (uint32_t j =  (int32_t)0; j < inS4; j++){
summ = summ+inputArr[i1][i2][i][j];
}
}
sumArr[((i1 * outS2) + i2)] = summ;
}
}
ElemWiseVectorPublicDiv(outputSize, sumArr, divisor, outputArrReshaped);
for (uint32_t i1 =  (int32_t)0; i1 < outS1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < outS2; i2++){
outputArr[i1][i2] = outputArrReshaped[((i1 * outS2) + i2)];
}
}
ClearMemSecret1(outputSize, sumArr);
ClearMemSecret1(outputSize, outputArrReshaped);
}

void ArgMax1(int32_t outArrS1, int32_t inArrS1, int32_t inArrS2, vector < vector < uint64_t > >& inArr, int32_t dim, vector < uint64_t >& outArr){
ArgMax(inArrS1, inArrS2, inArr, outArr);
}

void ArgMax3(int32_t outs1, int32_t outs2, int32_t outs3, int32_t ins1, int32_t ins2, int32_t ins3, int32_t ins4, vector < vector < vector < vector < uint64_t > > > >& inArr, int32_t dim, vector < vector < vector < uint64_t > > >& outArr){

int32_t size = ((ins1 * ins2) * ins3);

vector < vector < uint64_t > > reshapedInArr = make_vector<uint64_t>(size, ins4);

vector < uint64_t > reshapedOutArr = make_vector<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < ins1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < ins2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < ins3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < ins4; i4++){

int32_t linIdx = ((((i1 * ins2) * ins3) + (i2 * ins3)) + i3);
reshapedInArr[linIdx][i4] = inArr[i1][i2][i3][i4];
}
}
}
}
ArgMax(size, ins4, reshapedInArr, reshapedOutArr);
for (uint32_t i1 =  (int32_t)0; i1 < ins1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < ins2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < ins3; i3++){

int32_t linIdx = ((((i1 * ins2) * ins3) + (i2 * ins3)) + i3);
outArr[i1][i2][i3] = reshapedOutArr[linIdx];
}
}
}
ClearMemSecret2(size, ins4, reshapedInArr);
ClearMemSecret1(size, reshapedOutArr);
}

void Relu2(int32_t s1, int32_t s2, vector < vector < uint64_t > >& inArr, vector < vector < uint64_t > >& outArr, int32_t sf, uint32_t doTruncation){

int32_t size = (s1 * s2);

vector < uint64_t > reshapedInArr = make_vector<uint64_t>(size);

vector < uint64_t > reshapedOutArr = make_vector<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
reshapedInArr[linIdx] = inArr[i1][i2];
}
}
Relu(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
outArr[i1][i2] = reshapedOutArr[linIdx];
}
}
ClearMemSecret1(size, reshapedInArr);
ClearMemSecret1(size, reshapedOutArr);
}

void Relu4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, vector < vector < vector < vector < uint64_t > > > >& inArr, vector < vector < vector < vector < uint64_t > > > >& outArr, int32_t sf, uint32_t doTruncation){

int32_t size = (((s1 * s2) * s3) * s4);

vector < uint64_t > reshapedInArr = make_vector<uint64_t>(size);

vector < uint64_t > reshapedOutArr = make_vector<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
reshapedInArr[linIdx] = inArr[i1][i2][i3][i4];
}
}
}
}
Relu(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
outArr[i1][i2][i3][i4] = reshapedOutArr[linIdx];
}
}
}
}
ClearMemSecret1(size, reshapedInArr);
ClearMemSecret1(size, reshapedOutArr);
}

void Relu5(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, vector < vector < vector < vector < vector < uint64_t > > > > >& inArr, vector < vector < vector < vector < vector < uint64_t > > > > >& outArr, int32_t sf, uint32_t doTruncation){

int32_t size = ((((s1 * s2) * s3) * s4) * s5);

vector < uint64_t > reshapedInArr = make_vector<uint64_t>(size);

vector < uint64_t > reshapedOutArr = make_vector<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){

int32_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
reshapedInArr[linIdx] = inArr[i1][i2][i3][i4][i5];
}
}
}
}
}
Relu(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){

int32_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
outArr[i1][i2][i3][i4][i5] = reshapedOutArr[linIdx];
}
}
}
}
}
ClearMemSecret1(size, reshapedInArr);
ClearMemSecret1(size, reshapedOutArr);
}

void Floor2(int32_t s1, int32_t s2, vector < vector < uint64_t > >& inArr, vector < vector < uint64_t > >& outArr, int32_t sf){

int32_t size = (s1 * s2);

vector < uint64_t > reshapedInArr = make_vector<uint64_t>(size);

vector < uint64_t > reshapedOutArr = make_vector<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
reshapedInArr[linIdx] = inArr[i1][i2];
}
}
Floor(size, reshapedInArr, reshapedOutArr, sf);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
outArr[i1][i2] = reshapedOutArr[linIdx];
}
}
ClearMemSecret1(size, reshapedInArr);
ClearMemSecret1(size, reshapedOutArr);
}

void ScaleUp1(int32_t s1, vector < uint64_t >& arr, int32_t sf){
ScaleUp(s1, arr, sf);
}

void ScaleUp2(int32_t s1, int32_t s2, vector < vector < uint64_t > >& arr, int32_t sf){

int32_t size = (s1 * s2);

vector < uint64_t > reshapedArr = make_vector<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
reshapedArr[linIdx] = arr[i1][i2];
}
}
ScaleUp(size, reshapedArr, sf);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
arr[i1][i2] = reshapedArr[linIdx];
}
}
ClearMemSecret1(size, reshapedArr);
}

void ScaleUp3(int32_t s1, int32_t s2, int32_t s3, vector < vector < vector < uint64_t > > >& arr, int32_t sf){

int32_t size = ((s1 * s2) * s3);

vector < uint64_t > reshapedArr = make_vector<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){

int32_t linIdx = ((((i1 * s2) * s3) + (i2 * s3)) + i3);
reshapedArr[linIdx] = arr[i1][i2][i3];
}
}
}
ScaleUp(size, reshapedArr, sf);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){

int32_t linIdx = ((((i1 * s2) * s3) + (i2 * s3)) + i3);
arr[i1][i2][i3] = reshapedArr[linIdx];
}
}
}
ClearMemSecret1(size, reshapedArr);
}

void ScaleUp4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, vector < vector < vector < vector < uint64_t > > > >& arr, int32_t sf){

int32_t size = (((s1 * s2) * s3) * s4);

vector < uint64_t > reshapedArr = make_vector<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
reshapedArr[linIdx] = arr[i1][i2][i3][i4];
}
}
}
}
ScaleUp(size, reshapedArr, sf);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
arr[i1][i2][i3][i4] = reshapedArr[linIdx];
}
}
}
}
ClearMemSecret1(size, reshapedArr);
}

void ScaleDown1(int32_t s1, vector < uint64_t >& arr, int32_t sf){
ScaleDown(s1, arr, sf);
}

void ScaleDown2(int32_t s1, int32_t s2, vector < vector < uint64_t > >& arr, int32_t sf){

int32_t size = (s1 * s2);

vector < uint64_t > reshapedArr = make_vector<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
reshapedArr[linIdx] = arr[i1][i2];
}
}
ScaleDown(size, reshapedArr, sf);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
arr[i1][i2] = reshapedArr[linIdx];
}
}
ClearMemSecret1(size, reshapedArr);
}

void ScaleDown3(int32_t s1, int32_t s2, int32_t s3, vector < vector < vector < uint64_t > > >& arr, int32_t sf){

int32_t size = ((s1 * s2) * s3);

vector < uint64_t > reshapedArr = make_vector<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){

int32_t linIdx = ((((i1 * s2) * s3) + (i2 * s3)) + i3);
reshapedArr[linIdx] = arr[i1][i2][i3];
}
}
}
ScaleDown(size, reshapedArr, sf);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){

int32_t linIdx = ((((i1 * s2) * s3) + (i2 * s3)) + i3);
arr[i1][i2][i3] = reshapedArr[linIdx];
}
}
}
ClearMemSecret1(size, reshapedArr);
}

void ScaleDown4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, vector < vector < vector < vector < uint64_t > > > >& arr, int32_t sf){

int32_t size = (((s1 * s2) * s3) * s4);

vector < uint64_t > reshapedArr = make_vector<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
reshapedArr[linIdx] = arr[i1][i2][i3][i4];
}
}
}
}
ScaleDown(size, reshapedArr, sf);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
arr[i1][i2][i3][i4] = reshapedArr[linIdx];
}
}
}
}
ClearMemSecret1(size, reshapedArr);
}


extern int instanceID;
int main(int argc, char** argv)
{
parseInputs(argc, argv);
string whichNetwork = "Your Network";
show_porthos_mode();
string indep_key_location, common_key_location;
if(partyNum == PARTY_A){
indep_key_location = "files/keyA";
common_key_location = "files/keyAB";
}
else if(partyNum == PARTY_B){
indep_key_location = "files/keyB";
common_key_location = "files/keyAB";
}
else{
indep_key_location = "files/keyB";
common_key_location = "files/keyAB";
}
aes_indep = new AESObject(indep_key_location);
aes_common = new AESObject(common_key_location);
aes_a_1 = new AESObject("files/keyD");
aes_a_2 = new AESObject("files/keyD");
aes_b_1 = new AESObject("files/keyD");
aes_b_2 = new AESObject("files/keyD");
aes_c_1 = new AESObject("files/keyD");
aes_share_conv_bit_shares_p0_p2 = new AESObject("files/keyD");
aes_share_conv_bit_shares_p1_p2 = new AESObject("files/keyD");
aes_share_conv_shares_mod_odd_p0_p2 = new AESObject("files/keyD");
aes_share_conv_shares_mod_odd_p1_p2 = new AESObject("files/keyD");
aes_comp_msb_shares_lsb_p0_p2 = new AESObject("files/keyD");
aes_comp_msb_shares_lsb_p1_p2 = new AESObject("files/keyD");
aes_comp_msb_shares_bit_vec_p0_p2 = new AESObject("files/keyD");
aes_comp_msb_shares_bit_vec_p1_p2 = new AESObject("files/keyD");
aes_conv_opti_a_1 = new AESObject("files/keyD");
aes_conv_opti_a_2 = new AESObject("files/keyD");
aes_conv_opti_b_1 = new AESObject("files/keyD");
aes_conv_opti_b_2 = new AESObject("files/keyD");
aes_conv_opti_c_1 = new AESObject("files/keyD");
aes_parallel = new ParallelAESObject(common_key_location);

if (MPC)
{
initializeMPC();
initializeCommunication(argv[2], partyNum);
synchronize(2000000); 
}

if (PARALLEL) aes_parallel->precompute();

e_role role = partyNum;


vector < vector < vector < vector < uint64_t > > > > tmp0 = make_vector<uint64_t>( (int32_t)1,  (int32_t)224,  (int32_t)224,  (int32_t)3);
/* Variable to read the clear value corresponding to the input variable tmp0 at (1930,1-1930,46) */
uint64_t __tmp_in_tmp0;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)224; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)224; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)3; i3++){
if ((role == CLIENT)) {
cin >> __tmp_in_tmp0;
}
tmp0[i0][i1][i2][i3] = (role == CLIENT) ? __tmp_in_tmp0 : 0;
}
}
}
}

vector < vector < vector < vector < uint64_t > > > > tmp1 = make_vector<uint64_t>( (int32_t)7,  (int32_t)7,  (int32_t)3,  (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp1 at (1933,1-1933,43) */
uint64_t __tmp_in_tmp1;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)7; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)7; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)3; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)64; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp1;
}
tmp1[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp1 : 0;
}
}
}
}

vector < uint64_t > tmp2 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp2 at (1936,1-1936,34) */
uint64_t __tmp_in_tmp2;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp2;
}
tmp2[i0] = (role == SERVER) ? __tmp_in_tmp2 : 0;
}

vector < uint64_t > tmp3 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp3 at (1939,1-1939,34) */
uint64_t __tmp_in_tmp3;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp3;
}
tmp3[i0] = (role == SERVER) ? __tmp_in_tmp3 : 0;
}

vector < uint64_t > tmp4 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp4 at (1942,1-1942,34) */
uint64_t __tmp_in_tmp4;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp4;
}
tmp4[i0] = (role == SERVER) ? __tmp_in_tmp4 : 0;
}

vector < uint64_t > tmp5 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp5 at (1945,1-1945,34) */
uint64_t __tmp_in_tmp5;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp5;
}
tmp5[i0] = (role == SERVER) ? __tmp_in_tmp5 : 0;
}

vector < uint64_t > tmp6 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp6 at (1948,1-1948,34) */
uint64_t __tmp_in_tmp6;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp6;
}
tmp6[i0] = (role == SERVER) ? __tmp_in_tmp6 : 0;
}

vector < uint64_t > tmp7 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp7 at (1951,1-1951,34) */
uint64_t __tmp_in_tmp7;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp7;
}
tmp7[i0] = (role == SERVER) ? __tmp_in_tmp7 : 0;
}

vector < uint64_t > tmp8 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp8 at (1954,1-1954,34) */
uint64_t __tmp_in_tmp8;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp8;
}
tmp8[i0] = (role == SERVER) ? __tmp_in_tmp8 : 0;
}

vector < uint64_t > tmp9 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp9 at (1957,1-1957,34) */
uint64_t __tmp_in_tmp9;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp9;
}
tmp9[i0] = (role == SERVER) ? __tmp_in_tmp9 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp10 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp10 at (1960,1-1960,46) */
uint64_t __tmp_in_tmp10;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)64; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp10;
}
tmp10[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp10 : 0;
}
}
}
}

vector < uint64_t > tmp11 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp11 at (1963,1-1963,36) */
uint64_t __tmp_in_tmp11;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp11;
}
tmp11[i0] = (role == SERVER) ? __tmp_in_tmp11 : 0;
}

vector < uint64_t > tmp12 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp12 at (1966,1-1966,36) */
uint64_t __tmp_in_tmp12;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp12;
}
tmp12[i0] = (role == SERVER) ? __tmp_in_tmp12 : 0;
}

vector < uint64_t > tmp13 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp13 at (1969,1-1969,36) */
uint64_t __tmp_in_tmp13;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp13;
}
tmp13[i0] = (role == SERVER) ? __tmp_in_tmp13 : 0;
}

vector < uint64_t > tmp14 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp14 at (1972,1-1972,36) */
uint64_t __tmp_in_tmp14;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp14;
}
tmp14[i0] = (role == SERVER) ? __tmp_in_tmp14 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp15 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp15 at (1975,1-1975,46) */
uint64_t __tmp_in_tmp15;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp15;
}
tmp15[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp15 : 0;
}
}
}
}

vector < uint64_t > tmp16 = make_vector<uint64_t>( (int32_t)96);
/* Variable to read the clear value corresponding to the input variable tmp16 at (1978,1-1978,35) */
uint64_t __tmp_in_tmp16;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)96; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp16;
}
tmp16[i0] = (role == SERVER) ? __tmp_in_tmp16 : 0;
}

vector < uint64_t > tmp17 = make_vector<uint64_t>( (int32_t)96);
/* Variable to read the clear value corresponding to the input variable tmp17 at (1981,1-1981,35) */
uint64_t __tmp_in_tmp17;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)96; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp17;
}
tmp17[i0] = (role == SERVER) ? __tmp_in_tmp17 : 0;
}

vector < uint64_t > tmp18 = make_vector<uint64_t>( (int32_t)96);
/* Variable to read the clear value corresponding to the input variable tmp18 at (1984,1-1984,35) */
uint64_t __tmp_in_tmp18;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)96; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp18;
}
tmp18[i0] = (role == SERVER) ? __tmp_in_tmp18 : 0;
}

vector < uint64_t > tmp19 = make_vector<uint64_t>( (int32_t)96);
/* Variable to read the clear value corresponding to the input variable tmp19 at (1987,1-1987,35) */
uint64_t __tmp_in_tmp19;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)96; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp19;
}
tmp19[i0] = (role == SERVER) ? __tmp_in_tmp19 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp20 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)96,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp20 at (1990,1-1990,46) */
uint64_t __tmp_in_tmp20;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)96; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp20;
}
tmp20[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp20 : 0;
}
}
}
}

vector < uint64_t > tmp21 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp21 at (1993,1-1993,36) */
uint64_t __tmp_in_tmp21;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp21;
}
tmp21[i0] = (role == SERVER) ? __tmp_in_tmp21 : 0;
}

vector < uint64_t > tmp22 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp22 at (1996,1-1996,36) */
uint64_t __tmp_in_tmp22;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp22;
}
tmp22[i0] = (role == SERVER) ? __tmp_in_tmp22 : 0;
}

vector < uint64_t > tmp23 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp23 at (1999,1-1999,36) */
uint64_t __tmp_in_tmp23;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp23;
}
tmp23[i0] = (role == SERVER) ? __tmp_in_tmp23 : 0;
}

vector < uint64_t > tmp24 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp24 at (2002,1-2002,36) */
uint64_t __tmp_in_tmp24;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp24;
}
tmp24[i0] = (role == SERVER) ? __tmp_in_tmp24 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp25 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp25 at (2005,1-2005,46) */
uint64_t __tmp_in_tmp25;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp25;
}
tmp25[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp25 : 0;
}
}
}
}

vector < uint64_t > tmp26 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp26 at (2008,1-2008,36) */
uint64_t __tmp_in_tmp26;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp26;
}
tmp26[i0] = (role == SERVER) ? __tmp_in_tmp26 : 0;
}

vector < uint64_t > tmp27 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp27 at (2011,1-2011,36) */
uint64_t __tmp_in_tmp27;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp27;
}
tmp27[i0] = (role == SERVER) ? __tmp_in_tmp27 : 0;
}

vector < uint64_t > tmp28 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp28 at (2014,1-2014,36) */
uint64_t __tmp_in_tmp28;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp28;
}
tmp28[i0] = (role == SERVER) ? __tmp_in_tmp28 : 0;
}

vector < uint64_t > tmp29 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp29 at (2017,1-2017,36) */
uint64_t __tmp_in_tmp29;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp29;
}
tmp29[i0] = (role == SERVER) ? __tmp_in_tmp29 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp30 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp30 at (2020,1-2020,47) */
uint64_t __tmp_in_tmp30;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp30;
}
tmp30[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp30 : 0;
}
}
}
}

vector < uint64_t > tmp31 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp31 at (2023,1-2023,36) */
uint64_t __tmp_in_tmp31;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp31;
}
tmp31[i0] = (role == SERVER) ? __tmp_in_tmp31 : 0;
}

vector < uint64_t > tmp32 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp32 at (2026,1-2026,36) */
uint64_t __tmp_in_tmp32;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp32;
}
tmp32[i0] = (role == SERVER) ? __tmp_in_tmp32 : 0;
}

vector < uint64_t > tmp33 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp33 at (2029,1-2029,36) */
uint64_t __tmp_in_tmp33;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp33;
}
tmp33[i0] = (role == SERVER) ? __tmp_in_tmp33 : 0;
}

vector < uint64_t > tmp34 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp34 at (2032,1-2032,36) */
uint64_t __tmp_in_tmp34;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp34;
}
tmp34[i0] = (role == SERVER) ? __tmp_in_tmp34 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp35 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp35 at (2035,1-2035,46) */
uint64_t __tmp_in_tmp35;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp35;
}
tmp35[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp35 : 0;
}
}
}
}

vector < uint64_t > tmp36 = make_vector<uint64_t>( (int32_t)160);
/* Variable to read the clear value corresponding to the input variable tmp36 at (2038,1-2038,36) */
uint64_t __tmp_in_tmp36;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)160; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp36;
}
tmp36[i0] = (role == SERVER) ? __tmp_in_tmp36 : 0;
}

vector < uint64_t > tmp37 = make_vector<uint64_t>( (int32_t)160);
/* Variable to read the clear value corresponding to the input variable tmp37 at (2041,1-2041,36) */
uint64_t __tmp_in_tmp37;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)160; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp37;
}
tmp37[i0] = (role == SERVER) ? __tmp_in_tmp37 : 0;
}

vector < uint64_t > tmp38 = make_vector<uint64_t>( (int32_t)160);
/* Variable to read the clear value corresponding to the input variable tmp38 at (2044,1-2044,36) */
uint64_t __tmp_in_tmp38;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)160; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp38;
}
tmp38[i0] = (role == SERVER) ? __tmp_in_tmp38 : 0;
}

vector < uint64_t > tmp39 = make_vector<uint64_t>( (int32_t)160);
/* Variable to read the clear value corresponding to the input variable tmp39 at (2047,1-2047,36) */
uint64_t __tmp_in_tmp39;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)160; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp39;
}
tmp39[i0] = (role == SERVER) ? __tmp_in_tmp39 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp40 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)160,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp40 at (2050,1-2050,47) */
uint64_t __tmp_in_tmp40;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)160; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp40;
}
tmp40[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp40 : 0;
}
}
}
}

vector < uint64_t > tmp41 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp41 at (2053,1-2053,36) */
uint64_t __tmp_in_tmp41;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp41;
}
tmp41[i0] = (role == SERVER) ? __tmp_in_tmp41 : 0;
}

vector < uint64_t > tmp42 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp42 at (2056,1-2056,36) */
uint64_t __tmp_in_tmp42;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp42;
}
tmp42[i0] = (role == SERVER) ? __tmp_in_tmp42 : 0;
}

vector < uint64_t > tmp43 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp43 at (2059,1-2059,36) */
uint64_t __tmp_in_tmp43;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp43;
}
tmp43[i0] = (role == SERVER) ? __tmp_in_tmp43 : 0;
}

vector < uint64_t > tmp44 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp44 at (2062,1-2062,36) */
uint64_t __tmp_in_tmp44;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp44;
}
tmp44[i0] = (role == SERVER) ? __tmp_in_tmp44 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp45 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp45 at (2065,1-2065,46) */
uint64_t __tmp_in_tmp45;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp45;
}
tmp45[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp45 : 0;
}
}
}
}

vector < uint64_t > tmp46 = make_vector<uint64_t>( (int32_t)192);
/* Variable to read the clear value corresponding to the input variable tmp46 at (2068,1-2068,36) */
uint64_t __tmp_in_tmp46;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)192; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp46;
}
tmp46[i0] = (role == SERVER) ? __tmp_in_tmp46 : 0;
}

vector < uint64_t > tmp47 = make_vector<uint64_t>( (int32_t)192);
/* Variable to read the clear value corresponding to the input variable tmp47 at (2071,1-2071,36) */
uint64_t __tmp_in_tmp47;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)192; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp47;
}
tmp47[i0] = (role == SERVER) ? __tmp_in_tmp47 : 0;
}

vector < uint64_t > tmp48 = make_vector<uint64_t>( (int32_t)192);
/* Variable to read the clear value corresponding to the input variable tmp48 at (2074,1-2074,36) */
uint64_t __tmp_in_tmp48;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)192; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp48;
}
tmp48[i0] = (role == SERVER) ? __tmp_in_tmp48 : 0;
}

vector < uint64_t > tmp49 = make_vector<uint64_t>( (int32_t)192);
/* Variable to read the clear value corresponding to the input variable tmp49 at (2077,1-2077,36) */
uint64_t __tmp_in_tmp49;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)192; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp49;
}
tmp49[i0] = (role == SERVER) ? __tmp_in_tmp49 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp50 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)192,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp50 at (2080,1-2080,47) */
uint64_t __tmp_in_tmp50;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)192; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp50;
}
tmp50[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp50 : 0;
}
}
}
}

vector < uint64_t > tmp51 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp51 at (2083,1-2083,36) */
uint64_t __tmp_in_tmp51;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp51;
}
tmp51[i0] = (role == SERVER) ? __tmp_in_tmp51 : 0;
}

vector < uint64_t > tmp52 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp52 at (2086,1-2086,36) */
uint64_t __tmp_in_tmp52;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp52;
}
tmp52[i0] = (role == SERVER) ? __tmp_in_tmp52 : 0;
}

vector < uint64_t > tmp53 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp53 at (2089,1-2089,36) */
uint64_t __tmp_in_tmp53;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp53;
}
tmp53[i0] = (role == SERVER) ? __tmp_in_tmp53 : 0;
}

vector < uint64_t > tmp54 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp54 at (2092,1-2092,36) */
uint64_t __tmp_in_tmp54;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp54;
}
tmp54[i0] = (role == SERVER) ? __tmp_in_tmp54 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp55 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp55 at (2095,1-2095,46) */
uint64_t __tmp_in_tmp55;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp55;
}
tmp55[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp55 : 0;
}
}
}
}

vector < uint64_t > tmp56 = make_vector<uint64_t>( (int32_t)224);
/* Variable to read the clear value corresponding to the input variable tmp56 at (2098,1-2098,36) */
uint64_t __tmp_in_tmp56;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)224; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp56;
}
tmp56[i0] = (role == SERVER) ? __tmp_in_tmp56 : 0;
}

vector < uint64_t > tmp57 = make_vector<uint64_t>( (int32_t)224);
/* Variable to read the clear value corresponding to the input variable tmp57 at (2101,1-2101,36) */
uint64_t __tmp_in_tmp57;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)224; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp57;
}
tmp57[i0] = (role == SERVER) ? __tmp_in_tmp57 : 0;
}

vector < uint64_t > tmp58 = make_vector<uint64_t>( (int32_t)224);
/* Variable to read the clear value corresponding to the input variable tmp58 at (2104,1-2104,36) */
uint64_t __tmp_in_tmp58;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)224; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp58;
}
tmp58[i0] = (role == SERVER) ? __tmp_in_tmp58 : 0;
}

vector < uint64_t > tmp59 = make_vector<uint64_t>( (int32_t)224);
/* Variable to read the clear value corresponding to the input variable tmp59 at (2107,1-2107,36) */
uint64_t __tmp_in_tmp59;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)224; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp59;
}
tmp59[i0] = (role == SERVER) ? __tmp_in_tmp59 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp60 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)224,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp60 at (2110,1-2110,47) */
uint64_t __tmp_in_tmp60;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)224; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp60;
}
tmp60[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp60 : 0;
}
}
}
}

vector < uint64_t > tmp61 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp61 at (2113,1-2113,36) */
uint64_t __tmp_in_tmp61;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp61;
}
tmp61[i0] = (role == SERVER) ? __tmp_in_tmp61 : 0;
}

vector < uint64_t > tmp62 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp62 at (2116,1-2116,36) */
uint64_t __tmp_in_tmp62;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp62;
}
tmp62[i0] = (role == SERVER) ? __tmp_in_tmp62 : 0;
}

vector < uint64_t > tmp63 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp63 at (2119,1-2119,36) */
uint64_t __tmp_in_tmp63;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp63;
}
tmp63[i0] = (role == SERVER) ? __tmp_in_tmp63 : 0;
}

vector < uint64_t > tmp64 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp64 at (2122,1-2122,36) */
uint64_t __tmp_in_tmp64;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp64;
}
tmp64[i0] = (role == SERVER) ? __tmp_in_tmp64 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp65 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp65 at (2125,1-2125,46) */
uint64_t __tmp_in_tmp65;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp65;
}
tmp65[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp65 : 0;
}
}
}
}

vector < uint64_t > tmp66 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp66 at (2128,1-2128,36) */
uint64_t __tmp_in_tmp66;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp66;
}
tmp66[i0] = (role == SERVER) ? __tmp_in_tmp66 : 0;
}

vector < uint64_t > tmp67 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp67 at (2131,1-2131,36) */
uint64_t __tmp_in_tmp67;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp67;
}
tmp67[i0] = (role == SERVER) ? __tmp_in_tmp67 : 0;
}

vector < uint64_t > tmp68 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp68 at (2134,1-2134,36) */
uint64_t __tmp_in_tmp68;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp68;
}
tmp68[i0] = (role == SERVER) ? __tmp_in_tmp68 : 0;
}

vector < uint64_t > tmp69 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp69 at (2137,1-2137,36) */
uint64_t __tmp_in_tmp69;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp69;
}
tmp69[i0] = (role == SERVER) ? __tmp_in_tmp69 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp70 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp70 at (2140,1-2140,47) */
uint64_t __tmp_in_tmp70;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)256; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp70;
}
tmp70[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp70 : 0;
}
}
}
}

vector < uint64_t > tmp71 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp71 at (2143,1-2143,36) */
uint64_t __tmp_in_tmp71;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp71;
}
tmp71[i0] = (role == SERVER) ? __tmp_in_tmp71 : 0;
}

vector < uint64_t > tmp72 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp72 at (2146,1-2146,36) */
uint64_t __tmp_in_tmp72;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp72;
}
tmp72[i0] = (role == SERVER) ? __tmp_in_tmp72 : 0;
}

vector < uint64_t > tmp73 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp73 at (2149,1-2149,36) */
uint64_t __tmp_in_tmp73;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp73;
}
tmp73[i0] = (role == SERVER) ? __tmp_in_tmp73 : 0;
}

vector < uint64_t > tmp74 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp74 at (2152,1-2152,36) */
uint64_t __tmp_in_tmp74;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp74;
}
tmp74[i0] = (role == SERVER) ? __tmp_in_tmp74 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp75 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp75 at (2155,1-2155,47) */
uint64_t __tmp_in_tmp75;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp75;
}
tmp75[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp75 : 0;
}
}
}
}

vector < uint64_t > tmp76 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp76 at (2158,1-2158,36) */
uint64_t __tmp_in_tmp76;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp76;
}
tmp76[i0] = (role == SERVER) ? __tmp_in_tmp76 : 0;
}

vector < uint64_t > tmp77 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp77 at (2161,1-2161,36) */
uint64_t __tmp_in_tmp77;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp77;
}
tmp77[i0] = (role == SERVER) ? __tmp_in_tmp77 : 0;
}

vector < uint64_t > tmp78 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp78 at (2164,1-2164,36) */
uint64_t __tmp_in_tmp78;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp78;
}
tmp78[i0] = (role == SERVER) ? __tmp_in_tmp78 : 0;
}

vector < uint64_t > tmp79 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp79 at (2167,1-2167,36) */
uint64_t __tmp_in_tmp79;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp79;
}
tmp79[i0] = (role == SERVER) ? __tmp_in_tmp79 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp80 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp80 at (2170,1-2170,46) */
uint64_t __tmp_in_tmp80;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp80;
}
tmp80[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp80 : 0;
}
}
}
}

vector < uint64_t > tmp81 = make_vector<uint64_t>( (int32_t)160);
/* Variable to read the clear value corresponding to the input variable tmp81 at (2173,1-2173,36) */
uint64_t __tmp_in_tmp81;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)160; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp81;
}
tmp81[i0] = (role == SERVER) ? __tmp_in_tmp81 : 0;
}

vector < uint64_t > tmp82 = make_vector<uint64_t>( (int32_t)160);
/* Variable to read the clear value corresponding to the input variable tmp82 at (2176,1-2176,36) */
uint64_t __tmp_in_tmp82;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)160; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp82;
}
tmp82[i0] = (role == SERVER) ? __tmp_in_tmp82 : 0;
}

vector < uint64_t > tmp83 = make_vector<uint64_t>( (int32_t)160);
/* Variable to read the clear value corresponding to the input variable tmp83 at (2179,1-2179,36) */
uint64_t __tmp_in_tmp83;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)160; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp83;
}
tmp83[i0] = (role == SERVER) ? __tmp_in_tmp83 : 0;
}

vector < uint64_t > tmp84 = make_vector<uint64_t>( (int32_t)160);
/* Variable to read the clear value corresponding to the input variable tmp84 at (2182,1-2182,36) */
uint64_t __tmp_in_tmp84;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)160; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp84;
}
tmp84[i0] = (role == SERVER) ? __tmp_in_tmp84 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp85 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)160,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp85 at (2185,1-2185,47) */
uint64_t __tmp_in_tmp85;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)160; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp85;
}
tmp85[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp85 : 0;
}
}
}
}

vector < uint64_t > tmp86 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp86 at (2188,1-2188,36) */
uint64_t __tmp_in_tmp86;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp86;
}
tmp86[i0] = (role == SERVER) ? __tmp_in_tmp86 : 0;
}

vector < uint64_t > tmp87 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp87 at (2191,1-2191,36) */
uint64_t __tmp_in_tmp87;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp87;
}
tmp87[i0] = (role == SERVER) ? __tmp_in_tmp87 : 0;
}

vector < uint64_t > tmp88 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp88 at (2194,1-2194,36) */
uint64_t __tmp_in_tmp88;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp88;
}
tmp88[i0] = (role == SERVER) ? __tmp_in_tmp88 : 0;
}

vector < uint64_t > tmp89 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp89 at (2197,1-2197,36) */
uint64_t __tmp_in_tmp89;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp89;
}
tmp89[i0] = (role == SERVER) ? __tmp_in_tmp89 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp90 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp90 at (2200,1-2200,46) */
uint64_t __tmp_in_tmp90;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp90;
}
tmp90[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp90 : 0;
}
}
}
}

vector < uint64_t > tmp91 = make_vector<uint64_t>( (int32_t)192);
/* Variable to read the clear value corresponding to the input variable tmp91 at (2203,1-2203,36) */
uint64_t __tmp_in_tmp91;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)192; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp91;
}
tmp91[i0] = (role == SERVER) ? __tmp_in_tmp91 : 0;
}

vector < uint64_t > tmp92 = make_vector<uint64_t>( (int32_t)192);
/* Variable to read the clear value corresponding to the input variable tmp92 at (2206,1-2206,36) */
uint64_t __tmp_in_tmp92;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)192; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp92;
}
tmp92[i0] = (role == SERVER) ? __tmp_in_tmp92 : 0;
}

vector < uint64_t > tmp93 = make_vector<uint64_t>( (int32_t)192);
/* Variable to read the clear value corresponding to the input variable tmp93 at (2209,1-2209,36) */
uint64_t __tmp_in_tmp93;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)192; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp93;
}
tmp93[i0] = (role == SERVER) ? __tmp_in_tmp93 : 0;
}

vector < uint64_t > tmp94 = make_vector<uint64_t>( (int32_t)192);
/* Variable to read the clear value corresponding to the input variable tmp94 at (2212,1-2212,36) */
uint64_t __tmp_in_tmp94;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)192; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp94;
}
tmp94[i0] = (role == SERVER) ? __tmp_in_tmp94 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp95 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)192,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp95 at (2215,1-2215,47) */
uint64_t __tmp_in_tmp95;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)192; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp95;
}
tmp95[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp95 : 0;
}
}
}
}

vector < uint64_t > tmp96 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp96 at (2218,1-2218,36) */
uint64_t __tmp_in_tmp96;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp96;
}
tmp96[i0] = (role == SERVER) ? __tmp_in_tmp96 : 0;
}

vector < uint64_t > tmp97 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp97 at (2221,1-2221,36) */
uint64_t __tmp_in_tmp97;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp97;
}
tmp97[i0] = (role == SERVER) ? __tmp_in_tmp97 : 0;
}

vector < uint64_t > tmp98 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp98 at (2224,1-2224,36) */
uint64_t __tmp_in_tmp98;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp98;
}
tmp98[i0] = (role == SERVER) ? __tmp_in_tmp98 : 0;
}

vector < uint64_t > tmp99 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp99 at (2227,1-2227,36) */
uint64_t __tmp_in_tmp99;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp99;
}
tmp99[i0] = (role == SERVER) ? __tmp_in_tmp99 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp100 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp100 at (2230,1-2230,47) */
uint64_t __tmp_in_tmp100;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp100;
}
tmp100[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp100 : 0;
}
}
}
}

vector < uint64_t > tmp101 = make_vector<uint64_t>( (int32_t)224);
/* Variable to read the clear value corresponding to the input variable tmp101 at (2233,1-2233,37) */
uint64_t __tmp_in_tmp101;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)224; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp101;
}
tmp101[i0] = (role == SERVER) ? __tmp_in_tmp101 : 0;
}

vector < uint64_t > tmp102 = make_vector<uint64_t>( (int32_t)224);
/* Variable to read the clear value corresponding to the input variable tmp102 at (2236,1-2236,37) */
uint64_t __tmp_in_tmp102;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)224; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp102;
}
tmp102[i0] = (role == SERVER) ? __tmp_in_tmp102 : 0;
}

vector < uint64_t > tmp103 = make_vector<uint64_t>( (int32_t)224);
/* Variable to read the clear value corresponding to the input variable tmp103 at (2239,1-2239,37) */
uint64_t __tmp_in_tmp103;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)224; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp103;
}
tmp103[i0] = (role == SERVER) ? __tmp_in_tmp103 : 0;
}

vector < uint64_t > tmp104 = make_vector<uint64_t>( (int32_t)224);
/* Variable to read the clear value corresponding to the input variable tmp104 at (2242,1-2242,37) */
uint64_t __tmp_in_tmp104;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)224; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp104;
}
tmp104[i0] = (role == SERVER) ? __tmp_in_tmp104 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp105 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)224,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp105 at (2245,1-2245,48) */
uint64_t __tmp_in_tmp105;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)224; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp105;
}
tmp105[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp105 : 0;
}
}
}
}

vector < uint64_t > tmp106 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp106 at (2248,1-2248,37) */
uint64_t __tmp_in_tmp106;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp106;
}
tmp106[i0] = (role == SERVER) ? __tmp_in_tmp106 : 0;
}

vector < uint64_t > tmp107 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp107 at (2251,1-2251,37) */
uint64_t __tmp_in_tmp107;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp107;
}
tmp107[i0] = (role == SERVER) ? __tmp_in_tmp107 : 0;
}

vector < uint64_t > tmp108 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp108 at (2254,1-2254,37) */
uint64_t __tmp_in_tmp108;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp108;
}
tmp108[i0] = (role == SERVER) ? __tmp_in_tmp108 : 0;
}

vector < uint64_t > tmp109 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp109 at (2257,1-2257,37) */
uint64_t __tmp_in_tmp109;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp109;
}
tmp109[i0] = (role == SERVER) ? __tmp_in_tmp109 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp110 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp110 at (2260,1-2260,47) */
uint64_t __tmp_in_tmp110;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp110;
}
tmp110[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp110 : 0;
}
}
}
}

vector < uint64_t > tmp111 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp111 at (2263,1-2263,37) */
uint64_t __tmp_in_tmp111;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp111;
}
tmp111[i0] = (role == SERVER) ? __tmp_in_tmp111 : 0;
}

vector < uint64_t > tmp112 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp112 at (2266,1-2266,37) */
uint64_t __tmp_in_tmp112;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp112;
}
tmp112[i0] = (role == SERVER) ? __tmp_in_tmp112 : 0;
}

vector < uint64_t > tmp113 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp113 at (2269,1-2269,37) */
uint64_t __tmp_in_tmp113;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp113;
}
tmp113[i0] = (role == SERVER) ? __tmp_in_tmp113 : 0;
}

vector < uint64_t > tmp114 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp114 at (2272,1-2272,37) */
uint64_t __tmp_in_tmp114;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp114;
}
tmp114[i0] = (role == SERVER) ? __tmp_in_tmp114 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp115 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp115 at (2275,1-2275,48) */
uint64_t __tmp_in_tmp115;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)256; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp115;
}
tmp115[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp115 : 0;
}
}
}
}

vector < uint64_t > tmp116 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp116 at (2278,1-2278,37) */
uint64_t __tmp_in_tmp116;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp116;
}
tmp116[i0] = (role == SERVER) ? __tmp_in_tmp116 : 0;
}

vector < uint64_t > tmp117 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp117 at (2281,1-2281,37) */
uint64_t __tmp_in_tmp117;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp117;
}
tmp117[i0] = (role == SERVER) ? __tmp_in_tmp117 : 0;
}

vector < uint64_t > tmp118 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp118 at (2284,1-2284,37) */
uint64_t __tmp_in_tmp118;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp118;
}
tmp118[i0] = (role == SERVER) ? __tmp_in_tmp118 : 0;
}

vector < uint64_t > tmp119 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp119 at (2287,1-2287,37) */
uint64_t __tmp_in_tmp119;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp119;
}
tmp119[i0] = (role == SERVER) ? __tmp_in_tmp119 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp120 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp120 at (2290,1-2290,47) */
uint64_t __tmp_in_tmp120;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp120;
}
tmp120[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp120 : 0;
}
}
}
}

vector < uint64_t > tmp121 = make_vector<uint64_t>( (int32_t)288);
/* Variable to read the clear value corresponding to the input variable tmp121 at (2293,1-2293,37) */
uint64_t __tmp_in_tmp121;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)288; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp121;
}
tmp121[i0] = (role == SERVER) ? __tmp_in_tmp121 : 0;
}

vector < uint64_t > tmp122 = make_vector<uint64_t>( (int32_t)288);
/* Variable to read the clear value corresponding to the input variable tmp122 at (2296,1-2296,37) */
uint64_t __tmp_in_tmp122;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)288; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp122;
}
tmp122[i0] = (role == SERVER) ? __tmp_in_tmp122 : 0;
}

vector < uint64_t > tmp123 = make_vector<uint64_t>( (int32_t)288);
/* Variable to read the clear value corresponding to the input variable tmp123 at (2299,1-2299,37) */
uint64_t __tmp_in_tmp123;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)288; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp123;
}
tmp123[i0] = (role == SERVER) ? __tmp_in_tmp123 : 0;
}

vector < uint64_t > tmp124 = make_vector<uint64_t>( (int32_t)288);
/* Variable to read the clear value corresponding to the input variable tmp124 at (2302,1-2302,37) */
uint64_t __tmp_in_tmp124;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)288; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp124;
}
tmp124[i0] = (role == SERVER) ? __tmp_in_tmp124 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp125 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)288,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp125 at (2305,1-2305,48) */
uint64_t __tmp_in_tmp125;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)288; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp125;
}
tmp125[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp125 : 0;
}
}
}
}

vector < uint64_t > tmp126 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp126 at (2308,1-2308,37) */
uint64_t __tmp_in_tmp126;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp126;
}
tmp126[i0] = (role == SERVER) ? __tmp_in_tmp126 : 0;
}

vector < uint64_t > tmp127 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp127 at (2311,1-2311,37) */
uint64_t __tmp_in_tmp127;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp127;
}
tmp127[i0] = (role == SERVER) ? __tmp_in_tmp127 : 0;
}

vector < uint64_t > tmp128 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp128 at (2314,1-2314,37) */
uint64_t __tmp_in_tmp128;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp128;
}
tmp128[i0] = (role == SERVER) ? __tmp_in_tmp128 : 0;
}

vector < uint64_t > tmp129 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp129 at (2317,1-2317,37) */
uint64_t __tmp_in_tmp129;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp129;
}
tmp129[i0] = (role == SERVER) ? __tmp_in_tmp129 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp130 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp130 at (2320,1-2320,47) */
uint64_t __tmp_in_tmp130;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp130;
}
tmp130[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp130 : 0;
}
}
}
}

vector < uint64_t > tmp131 = make_vector<uint64_t>( (int32_t)320);
/* Variable to read the clear value corresponding to the input variable tmp131 at (2323,1-2323,37) */
uint64_t __tmp_in_tmp131;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)320; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp131;
}
tmp131[i0] = (role == SERVER) ? __tmp_in_tmp131 : 0;
}

vector < uint64_t > tmp132 = make_vector<uint64_t>( (int32_t)320);
/* Variable to read the clear value corresponding to the input variable tmp132 at (2326,1-2326,37) */
uint64_t __tmp_in_tmp132;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)320; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp132;
}
tmp132[i0] = (role == SERVER) ? __tmp_in_tmp132 : 0;
}

vector < uint64_t > tmp133 = make_vector<uint64_t>( (int32_t)320);
/* Variable to read the clear value corresponding to the input variable tmp133 at (2329,1-2329,37) */
uint64_t __tmp_in_tmp133;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)320; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp133;
}
tmp133[i0] = (role == SERVER) ? __tmp_in_tmp133 : 0;
}

vector < uint64_t > tmp134 = make_vector<uint64_t>( (int32_t)320);
/* Variable to read the clear value corresponding to the input variable tmp134 at (2332,1-2332,37) */
uint64_t __tmp_in_tmp134;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)320; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp134;
}
tmp134[i0] = (role == SERVER) ? __tmp_in_tmp134 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp135 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)320,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp135 at (2335,1-2335,48) */
uint64_t __tmp_in_tmp135;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)320; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp135;
}
tmp135[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp135 : 0;
}
}
}
}

vector < uint64_t > tmp136 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp136 at (2338,1-2338,37) */
uint64_t __tmp_in_tmp136;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp136;
}
tmp136[i0] = (role == SERVER) ? __tmp_in_tmp136 : 0;
}

vector < uint64_t > tmp137 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp137 at (2341,1-2341,37) */
uint64_t __tmp_in_tmp137;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp137;
}
tmp137[i0] = (role == SERVER) ? __tmp_in_tmp137 : 0;
}

vector < uint64_t > tmp138 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp138 at (2344,1-2344,37) */
uint64_t __tmp_in_tmp138;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp138;
}
tmp138[i0] = (role == SERVER) ? __tmp_in_tmp138 : 0;
}

vector < uint64_t > tmp139 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp139 at (2347,1-2347,37) */
uint64_t __tmp_in_tmp139;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp139;
}
tmp139[i0] = (role == SERVER) ? __tmp_in_tmp139 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp140 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp140 at (2350,1-2350,47) */
uint64_t __tmp_in_tmp140;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp140;
}
tmp140[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp140 : 0;
}
}
}
}

vector < uint64_t > tmp141 = make_vector<uint64_t>( (int32_t)352);
/* Variable to read the clear value corresponding to the input variable tmp141 at (2353,1-2353,37) */
uint64_t __tmp_in_tmp141;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)352; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp141;
}
tmp141[i0] = (role == SERVER) ? __tmp_in_tmp141 : 0;
}

vector < uint64_t > tmp142 = make_vector<uint64_t>( (int32_t)352);
/* Variable to read the clear value corresponding to the input variable tmp142 at (2356,1-2356,37) */
uint64_t __tmp_in_tmp142;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)352; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp142;
}
tmp142[i0] = (role == SERVER) ? __tmp_in_tmp142 : 0;
}

vector < uint64_t > tmp143 = make_vector<uint64_t>( (int32_t)352);
/* Variable to read the clear value corresponding to the input variable tmp143 at (2359,1-2359,37) */
uint64_t __tmp_in_tmp143;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)352; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp143;
}
tmp143[i0] = (role == SERVER) ? __tmp_in_tmp143 : 0;
}

vector < uint64_t > tmp144 = make_vector<uint64_t>( (int32_t)352);
/* Variable to read the clear value corresponding to the input variable tmp144 at (2362,1-2362,37) */
uint64_t __tmp_in_tmp144;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)352; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp144;
}
tmp144[i0] = (role == SERVER) ? __tmp_in_tmp144 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp145 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)352,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp145 at (2365,1-2365,48) */
uint64_t __tmp_in_tmp145;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)352; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp145;
}
tmp145[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp145 : 0;
}
}
}
}

vector < uint64_t > tmp146 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp146 at (2368,1-2368,37) */
uint64_t __tmp_in_tmp146;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp146;
}
tmp146[i0] = (role == SERVER) ? __tmp_in_tmp146 : 0;
}

vector < uint64_t > tmp147 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp147 at (2371,1-2371,37) */
uint64_t __tmp_in_tmp147;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp147;
}
tmp147[i0] = (role == SERVER) ? __tmp_in_tmp147 : 0;
}

vector < uint64_t > tmp148 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp148 at (2374,1-2374,37) */
uint64_t __tmp_in_tmp148;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp148;
}
tmp148[i0] = (role == SERVER) ? __tmp_in_tmp148 : 0;
}

vector < uint64_t > tmp149 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp149 at (2377,1-2377,37) */
uint64_t __tmp_in_tmp149;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp149;
}
tmp149[i0] = (role == SERVER) ? __tmp_in_tmp149 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp150 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp150 at (2380,1-2380,47) */
uint64_t __tmp_in_tmp150;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp150;
}
tmp150[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp150 : 0;
}
}
}
}

vector < uint64_t > tmp151 = make_vector<uint64_t>( (int32_t)384);
/* Variable to read the clear value corresponding to the input variable tmp151 at (2383,1-2383,37) */
uint64_t __tmp_in_tmp151;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)384; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp151;
}
tmp151[i0] = (role == SERVER) ? __tmp_in_tmp151 : 0;
}

vector < uint64_t > tmp152 = make_vector<uint64_t>( (int32_t)384);
/* Variable to read the clear value corresponding to the input variable tmp152 at (2386,1-2386,37) */
uint64_t __tmp_in_tmp152;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)384; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp152;
}
tmp152[i0] = (role == SERVER) ? __tmp_in_tmp152 : 0;
}

vector < uint64_t > tmp153 = make_vector<uint64_t>( (int32_t)384);
/* Variable to read the clear value corresponding to the input variable tmp153 at (2389,1-2389,37) */
uint64_t __tmp_in_tmp153;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)384; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp153;
}
tmp153[i0] = (role == SERVER) ? __tmp_in_tmp153 : 0;
}

vector < uint64_t > tmp154 = make_vector<uint64_t>( (int32_t)384);
/* Variable to read the clear value corresponding to the input variable tmp154 at (2392,1-2392,37) */
uint64_t __tmp_in_tmp154;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)384; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp154;
}
tmp154[i0] = (role == SERVER) ? __tmp_in_tmp154 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp155 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)384,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp155 at (2395,1-2395,48) */
uint64_t __tmp_in_tmp155;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)384; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp155;
}
tmp155[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp155 : 0;
}
}
}
}

vector < uint64_t > tmp156 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp156 at (2398,1-2398,37) */
uint64_t __tmp_in_tmp156;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp156;
}
tmp156[i0] = (role == SERVER) ? __tmp_in_tmp156 : 0;
}

vector < uint64_t > tmp157 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp157 at (2401,1-2401,37) */
uint64_t __tmp_in_tmp157;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp157;
}
tmp157[i0] = (role == SERVER) ? __tmp_in_tmp157 : 0;
}

vector < uint64_t > tmp158 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp158 at (2404,1-2404,37) */
uint64_t __tmp_in_tmp158;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp158;
}
tmp158[i0] = (role == SERVER) ? __tmp_in_tmp158 : 0;
}

vector < uint64_t > tmp159 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp159 at (2407,1-2407,37) */
uint64_t __tmp_in_tmp159;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp159;
}
tmp159[i0] = (role == SERVER) ? __tmp_in_tmp159 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp160 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp160 at (2410,1-2410,47) */
uint64_t __tmp_in_tmp160;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp160;
}
tmp160[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp160 : 0;
}
}
}
}

vector < uint64_t > tmp161 = make_vector<uint64_t>( (int32_t)416);
/* Variable to read the clear value corresponding to the input variable tmp161 at (2413,1-2413,37) */
uint64_t __tmp_in_tmp161;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)416; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp161;
}
tmp161[i0] = (role == SERVER) ? __tmp_in_tmp161 : 0;
}

vector < uint64_t > tmp162 = make_vector<uint64_t>( (int32_t)416);
/* Variable to read the clear value corresponding to the input variable tmp162 at (2416,1-2416,37) */
uint64_t __tmp_in_tmp162;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)416; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp162;
}
tmp162[i0] = (role == SERVER) ? __tmp_in_tmp162 : 0;
}

vector < uint64_t > tmp163 = make_vector<uint64_t>( (int32_t)416);
/* Variable to read the clear value corresponding to the input variable tmp163 at (2419,1-2419,37) */
uint64_t __tmp_in_tmp163;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)416; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp163;
}
tmp163[i0] = (role == SERVER) ? __tmp_in_tmp163 : 0;
}

vector < uint64_t > tmp164 = make_vector<uint64_t>( (int32_t)416);
/* Variable to read the clear value corresponding to the input variable tmp164 at (2422,1-2422,37) */
uint64_t __tmp_in_tmp164;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)416; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp164;
}
tmp164[i0] = (role == SERVER) ? __tmp_in_tmp164 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp165 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)416,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp165 at (2425,1-2425,48) */
uint64_t __tmp_in_tmp165;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)416; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp165;
}
tmp165[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp165 : 0;
}
}
}
}

vector < uint64_t > tmp166 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp166 at (2428,1-2428,37) */
uint64_t __tmp_in_tmp166;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp166;
}
tmp166[i0] = (role == SERVER) ? __tmp_in_tmp166 : 0;
}

vector < uint64_t > tmp167 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp167 at (2431,1-2431,37) */
uint64_t __tmp_in_tmp167;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp167;
}
tmp167[i0] = (role == SERVER) ? __tmp_in_tmp167 : 0;
}

vector < uint64_t > tmp168 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp168 at (2434,1-2434,37) */
uint64_t __tmp_in_tmp168;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp168;
}
tmp168[i0] = (role == SERVER) ? __tmp_in_tmp168 : 0;
}

vector < uint64_t > tmp169 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp169 at (2437,1-2437,37) */
uint64_t __tmp_in_tmp169;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp169;
}
tmp169[i0] = (role == SERVER) ? __tmp_in_tmp169 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp170 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp170 at (2440,1-2440,47) */
uint64_t __tmp_in_tmp170;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp170;
}
tmp170[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp170 : 0;
}
}
}
}

vector < uint64_t > tmp171 = make_vector<uint64_t>( (int32_t)448);
/* Variable to read the clear value corresponding to the input variable tmp171 at (2443,1-2443,37) */
uint64_t __tmp_in_tmp171;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)448; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp171;
}
tmp171[i0] = (role == SERVER) ? __tmp_in_tmp171 : 0;
}

vector < uint64_t > tmp172 = make_vector<uint64_t>( (int32_t)448);
/* Variable to read the clear value corresponding to the input variable tmp172 at (2446,1-2446,37) */
uint64_t __tmp_in_tmp172;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)448; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp172;
}
tmp172[i0] = (role == SERVER) ? __tmp_in_tmp172 : 0;
}

vector < uint64_t > tmp173 = make_vector<uint64_t>( (int32_t)448);
/* Variable to read the clear value corresponding to the input variable tmp173 at (2449,1-2449,37) */
uint64_t __tmp_in_tmp173;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)448; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp173;
}
tmp173[i0] = (role == SERVER) ? __tmp_in_tmp173 : 0;
}

vector < uint64_t > tmp174 = make_vector<uint64_t>( (int32_t)448);
/* Variable to read the clear value corresponding to the input variable tmp174 at (2452,1-2452,37) */
uint64_t __tmp_in_tmp174;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)448; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp174;
}
tmp174[i0] = (role == SERVER) ? __tmp_in_tmp174 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp175 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)448,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp175 at (2455,1-2455,48) */
uint64_t __tmp_in_tmp175;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)448; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp175;
}
tmp175[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp175 : 0;
}
}
}
}

vector < uint64_t > tmp176 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp176 at (2458,1-2458,37) */
uint64_t __tmp_in_tmp176;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp176;
}
tmp176[i0] = (role == SERVER) ? __tmp_in_tmp176 : 0;
}

vector < uint64_t > tmp177 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp177 at (2461,1-2461,37) */
uint64_t __tmp_in_tmp177;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp177;
}
tmp177[i0] = (role == SERVER) ? __tmp_in_tmp177 : 0;
}

vector < uint64_t > tmp178 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp178 at (2464,1-2464,37) */
uint64_t __tmp_in_tmp178;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp178;
}
tmp178[i0] = (role == SERVER) ? __tmp_in_tmp178 : 0;
}

vector < uint64_t > tmp179 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp179 at (2467,1-2467,37) */
uint64_t __tmp_in_tmp179;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp179;
}
tmp179[i0] = (role == SERVER) ? __tmp_in_tmp179 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp180 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp180 at (2470,1-2470,47) */
uint64_t __tmp_in_tmp180;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp180;
}
tmp180[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp180 : 0;
}
}
}
}

vector < uint64_t > tmp181 = make_vector<uint64_t>( (int32_t)480);
/* Variable to read the clear value corresponding to the input variable tmp181 at (2473,1-2473,37) */
uint64_t __tmp_in_tmp181;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)480; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp181;
}
tmp181[i0] = (role == SERVER) ? __tmp_in_tmp181 : 0;
}

vector < uint64_t > tmp182 = make_vector<uint64_t>( (int32_t)480);
/* Variable to read the clear value corresponding to the input variable tmp182 at (2476,1-2476,37) */
uint64_t __tmp_in_tmp182;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)480; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp182;
}
tmp182[i0] = (role == SERVER) ? __tmp_in_tmp182 : 0;
}

vector < uint64_t > tmp183 = make_vector<uint64_t>( (int32_t)480);
/* Variable to read the clear value corresponding to the input variable tmp183 at (2479,1-2479,37) */
uint64_t __tmp_in_tmp183;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)480; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp183;
}
tmp183[i0] = (role == SERVER) ? __tmp_in_tmp183 : 0;
}

vector < uint64_t > tmp184 = make_vector<uint64_t>( (int32_t)480);
/* Variable to read the clear value corresponding to the input variable tmp184 at (2482,1-2482,37) */
uint64_t __tmp_in_tmp184;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)480; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp184;
}
tmp184[i0] = (role == SERVER) ? __tmp_in_tmp184 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp185 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)480,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp185 at (2485,1-2485,48) */
uint64_t __tmp_in_tmp185;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)480; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp185;
}
tmp185[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp185 : 0;
}
}
}
}

vector < uint64_t > tmp186 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp186 at (2488,1-2488,37) */
uint64_t __tmp_in_tmp186;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp186;
}
tmp186[i0] = (role == SERVER) ? __tmp_in_tmp186 : 0;
}

vector < uint64_t > tmp187 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp187 at (2491,1-2491,37) */
uint64_t __tmp_in_tmp187;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp187;
}
tmp187[i0] = (role == SERVER) ? __tmp_in_tmp187 : 0;
}

vector < uint64_t > tmp188 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp188 at (2494,1-2494,37) */
uint64_t __tmp_in_tmp188;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp188;
}
tmp188[i0] = (role == SERVER) ? __tmp_in_tmp188 : 0;
}

vector < uint64_t > tmp189 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp189 at (2497,1-2497,37) */
uint64_t __tmp_in_tmp189;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp189;
}
tmp189[i0] = (role == SERVER) ? __tmp_in_tmp189 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp190 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp190 at (2500,1-2500,47) */
uint64_t __tmp_in_tmp190;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp190;
}
tmp190[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp190 : 0;
}
}
}
}

vector < uint64_t > tmp191 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp191 at (2503,1-2503,37) */
uint64_t __tmp_in_tmp191;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp191;
}
tmp191[i0] = (role == SERVER) ? __tmp_in_tmp191 : 0;
}

vector < uint64_t > tmp192 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp192 at (2506,1-2506,37) */
uint64_t __tmp_in_tmp192;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp192;
}
tmp192[i0] = (role == SERVER) ? __tmp_in_tmp192 : 0;
}

vector < uint64_t > tmp193 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp193 at (2509,1-2509,37) */
uint64_t __tmp_in_tmp193;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp193;
}
tmp193[i0] = (role == SERVER) ? __tmp_in_tmp193 : 0;
}

vector < uint64_t > tmp194 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp194 at (2512,1-2512,37) */
uint64_t __tmp_in_tmp194;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp194;
}
tmp194[i0] = (role == SERVER) ? __tmp_in_tmp194 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp195 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp195 at (2515,1-2515,48) */
uint64_t __tmp_in_tmp195;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)512; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)256; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp195;
}
tmp195[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp195 : 0;
}
}
}
}

vector < uint64_t > tmp196 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp196 at (2518,1-2518,37) */
uint64_t __tmp_in_tmp196;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp196;
}
tmp196[i0] = (role == SERVER) ? __tmp_in_tmp196 : 0;
}

vector < uint64_t > tmp197 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp197 at (2521,1-2521,37) */
uint64_t __tmp_in_tmp197;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp197;
}
tmp197[i0] = (role == SERVER) ? __tmp_in_tmp197 : 0;
}

vector < uint64_t > tmp198 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp198 at (2524,1-2524,37) */
uint64_t __tmp_in_tmp198;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp198;
}
tmp198[i0] = (role == SERVER) ? __tmp_in_tmp198 : 0;
}

vector < uint64_t > tmp199 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp199 at (2527,1-2527,37) */
uint64_t __tmp_in_tmp199;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp199;
}
tmp199[i0] = (role == SERVER) ? __tmp_in_tmp199 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp200 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp200 at (2530,1-2530,48) */
uint64_t __tmp_in_tmp200;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)256; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp200;
}
tmp200[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp200 : 0;
}
}
}
}

vector < uint64_t > tmp201 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp201 at (2533,1-2533,37) */
uint64_t __tmp_in_tmp201;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp201;
}
tmp201[i0] = (role == SERVER) ? __tmp_in_tmp201 : 0;
}

vector < uint64_t > tmp202 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp202 at (2536,1-2536,37) */
uint64_t __tmp_in_tmp202;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp202;
}
tmp202[i0] = (role == SERVER) ? __tmp_in_tmp202 : 0;
}

vector < uint64_t > tmp203 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp203 at (2539,1-2539,37) */
uint64_t __tmp_in_tmp203;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp203;
}
tmp203[i0] = (role == SERVER) ? __tmp_in_tmp203 : 0;
}

vector < uint64_t > tmp204 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp204 at (2542,1-2542,37) */
uint64_t __tmp_in_tmp204;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp204;
}
tmp204[i0] = (role == SERVER) ? __tmp_in_tmp204 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp205 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp205 at (2545,1-2545,47) */
uint64_t __tmp_in_tmp205;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp205;
}
tmp205[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp205 : 0;
}
}
}
}

vector < uint64_t > tmp206 = make_vector<uint64_t>( (int32_t)288);
/* Variable to read the clear value corresponding to the input variable tmp206 at (2548,1-2548,37) */
uint64_t __tmp_in_tmp206;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)288; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp206;
}
tmp206[i0] = (role == SERVER) ? __tmp_in_tmp206 : 0;
}

vector < uint64_t > tmp207 = make_vector<uint64_t>( (int32_t)288);
/* Variable to read the clear value corresponding to the input variable tmp207 at (2551,1-2551,37) */
uint64_t __tmp_in_tmp207;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)288; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp207;
}
tmp207[i0] = (role == SERVER) ? __tmp_in_tmp207 : 0;
}

vector < uint64_t > tmp208 = make_vector<uint64_t>( (int32_t)288);
/* Variable to read the clear value corresponding to the input variable tmp208 at (2554,1-2554,37) */
uint64_t __tmp_in_tmp208;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)288; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp208;
}
tmp208[i0] = (role == SERVER) ? __tmp_in_tmp208 : 0;
}

vector < uint64_t > tmp209 = make_vector<uint64_t>( (int32_t)288);
/* Variable to read the clear value corresponding to the input variable tmp209 at (2557,1-2557,37) */
uint64_t __tmp_in_tmp209;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)288; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp209;
}
tmp209[i0] = (role == SERVER) ? __tmp_in_tmp209 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp210 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)288,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp210 at (2560,1-2560,48) */
uint64_t __tmp_in_tmp210;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)288; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp210;
}
tmp210[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp210 : 0;
}
}
}
}

vector < uint64_t > tmp211 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp211 at (2563,1-2563,37) */
uint64_t __tmp_in_tmp211;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp211;
}
tmp211[i0] = (role == SERVER) ? __tmp_in_tmp211 : 0;
}

vector < uint64_t > tmp212 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp212 at (2566,1-2566,37) */
uint64_t __tmp_in_tmp212;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp212;
}
tmp212[i0] = (role == SERVER) ? __tmp_in_tmp212 : 0;
}

vector < uint64_t > tmp213 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp213 at (2569,1-2569,37) */
uint64_t __tmp_in_tmp213;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp213;
}
tmp213[i0] = (role == SERVER) ? __tmp_in_tmp213 : 0;
}

vector < uint64_t > tmp214 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp214 at (2572,1-2572,37) */
uint64_t __tmp_in_tmp214;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp214;
}
tmp214[i0] = (role == SERVER) ? __tmp_in_tmp214 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp215 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp215 at (2575,1-2575,47) */
uint64_t __tmp_in_tmp215;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp215;
}
tmp215[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp215 : 0;
}
}
}
}

vector < uint64_t > tmp216 = make_vector<uint64_t>( (int32_t)320);
/* Variable to read the clear value corresponding to the input variable tmp216 at (2578,1-2578,37) */
uint64_t __tmp_in_tmp216;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)320; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp216;
}
tmp216[i0] = (role == SERVER) ? __tmp_in_tmp216 : 0;
}

vector < uint64_t > tmp217 = make_vector<uint64_t>( (int32_t)320);
/* Variable to read the clear value corresponding to the input variable tmp217 at (2581,1-2581,37) */
uint64_t __tmp_in_tmp217;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)320; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp217;
}
tmp217[i0] = (role == SERVER) ? __tmp_in_tmp217 : 0;
}

vector < uint64_t > tmp218 = make_vector<uint64_t>( (int32_t)320);
/* Variable to read the clear value corresponding to the input variable tmp218 at (2584,1-2584,37) */
uint64_t __tmp_in_tmp218;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)320; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp218;
}
tmp218[i0] = (role == SERVER) ? __tmp_in_tmp218 : 0;
}

vector < uint64_t > tmp219 = make_vector<uint64_t>( (int32_t)320);
/* Variable to read the clear value corresponding to the input variable tmp219 at (2587,1-2587,37) */
uint64_t __tmp_in_tmp219;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)320; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp219;
}
tmp219[i0] = (role == SERVER) ? __tmp_in_tmp219 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp220 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)320,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp220 at (2590,1-2590,48) */
uint64_t __tmp_in_tmp220;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)320; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp220;
}
tmp220[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp220 : 0;
}
}
}
}

vector < uint64_t > tmp221 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp221 at (2593,1-2593,37) */
uint64_t __tmp_in_tmp221;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp221;
}
tmp221[i0] = (role == SERVER) ? __tmp_in_tmp221 : 0;
}

vector < uint64_t > tmp222 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp222 at (2596,1-2596,37) */
uint64_t __tmp_in_tmp222;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp222;
}
tmp222[i0] = (role == SERVER) ? __tmp_in_tmp222 : 0;
}

vector < uint64_t > tmp223 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp223 at (2599,1-2599,37) */
uint64_t __tmp_in_tmp223;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp223;
}
tmp223[i0] = (role == SERVER) ? __tmp_in_tmp223 : 0;
}

vector < uint64_t > tmp224 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp224 at (2602,1-2602,37) */
uint64_t __tmp_in_tmp224;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp224;
}
tmp224[i0] = (role == SERVER) ? __tmp_in_tmp224 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp225 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp225 at (2605,1-2605,47) */
uint64_t __tmp_in_tmp225;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp225;
}
tmp225[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp225 : 0;
}
}
}
}

vector < uint64_t > tmp226 = make_vector<uint64_t>( (int32_t)352);
/* Variable to read the clear value corresponding to the input variable tmp226 at (2608,1-2608,37) */
uint64_t __tmp_in_tmp226;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)352; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp226;
}
tmp226[i0] = (role == SERVER) ? __tmp_in_tmp226 : 0;
}

vector < uint64_t > tmp227 = make_vector<uint64_t>( (int32_t)352);
/* Variable to read the clear value corresponding to the input variable tmp227 at (2611,1-2611,37) */
uint64_t __tmp_in_tmp227;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)352; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp227;
}
tmp227[i0] = (role == SERVER) ? __tmp_in_tmp227 : 0;
}

vector < uint64_t > tmp228 = make_vector<uint64_t>( (int32_t)352);
/* Variable to read the clear value corresponding to the input variable tmp228 at (2614,1-2614,37) */
uint64_t __tmp_in_tmp228;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)352; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp228;
}
tmp228[i0] = (role == SERVER) ? __tmp_in_tmp228 : 0;
}

vector < uint64_t > tmp229 = make_vector<uint64_t>( (int32_t)352);
/* Variable to read the clear value corresponding to the input variable tmp229 at (2617,1-2617,37) */
uint64_t __tmp_in_tmp229;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)352; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp229;
}
tmp229[i0] = (role == SERVER) ? __tmp_in_tmp229 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp230 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)352,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp230 at (2620,1-2620,48) */
uint64_t __tmp_in_tmp230;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)352; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp230;
}
tmp230[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp230 : 0;
}
}
}
}

vector < uint64_t > tmp231 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp231 at (2623,1-2623,37) */
uint64_t __tmp_in_tmp231;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp231;
}
tmp231[i0] = (role == SERVER) ? __tmp_in_tmp231 : 0;
}

vector < uint64_t > tmp232 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp232 at (2626,1-2626,37) */
uint64_t __tmp_in_tmp232;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp232;
}
tmp232[i0] = (role == SERVER) ? __tmp_in_tmp232 : 0;
}

vector < uint64_t > tmp233 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp233 at (2629,1-2629,37) */
uint64_t __tmp_in_tmp233;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp233;
}
tmp233[i0] = (role == SERVER) ? __tmp_in_tmp233 : 0;
}

vector < uint64_t > tmp234 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp234 at (2632,1-2632,37) */
uint64_t __tmp_in_tmp234;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp234;
}
tmp234[i0] = (role == SERVER) ? __tmp_in_tmp234 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp235 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp235 at (2635,1-2635,47) */
uint64_t __tmp_in_tmp235;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp235;
}
tmp235[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp235 : 0;
}
}
}
}

vector < uint64_t > tmp236 = make_vector<uint64_t>( (int32_t)384);
/* Variable to read the clear value corresponding to the input variable tmp236 at (2638,1-2638,37) */
uint64_t __tmp_in_tmp236;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)384; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp236;
}
tmp236[i0] = (role == SERVER) ? __tmp_in_tmp236 : 0;
}

vector < uint64_t > tmp237 = make_vector<uint64_t>( (int32_t)384);
/* Variable to read the clear value corresponding to the input variable tmp237 at (2641,1-2641,37) */
uint64_t __tmp_in_tmp237;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)384; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp237;
}
tmp237[i0] = (role == SERVER) ? __tmp_in_tmp237 : 0;
}

vector < uint64_t > tmp238 = make_vector<uint64_t>( (int32_t)384);
/* Variable to read the clear value corresponding to the input variable tmp238 at (2644,1-2644,37) */
uint64_t __tmp_in_tmp238;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)384; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp238;
}
tmp238[i0] = (role == SERVER) ? __tmp_in_tmp238 : 0;
}

vector < uint64_t > tmp239 = make_vector<uint64_t>( (int32_t)384);
/* Variable to read the clear value corresponding to the input variable tmp239 at (2647,1-2647,37) */
uint64_t __tmp_in_tmp239;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)384; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp239;
}
tmp239[i0] = (role == SERVER) ? __tmp_in_tmp239 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp240 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)384,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp240 at (2650,1-2650,48) */
uint64_t __tmp_in_tmp240;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)384; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp240;
}
tmp240[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp240 : 0;
}
}
}
}

vector < uint64_t > tmp241 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp241 at (2653,1-2653,37) */
uint64_t __tmp_in_tmp241;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp241;
}
tmp241[i0] = (role == SERVER) ? __tmp_in_tmp241 : 0;
}

vector < uint64_t > tmp242 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp242 at (2656,1-2656,37) */
uint64_t __tmp_in_tmp242;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp242;
}
tmp242[i0] = (role == SERVER) ? __tmp_in_tmp242 : 0;
}

vector < uint64_t > tmp243 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp243 at (2659,1-2659,37) */
uint64_t __tmp_in_tmp243;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp243;
}
tmp243[i0] = (role == SERVER) ? __tmp_in_tmp243 : 0;
}

vector < uint64_t > tmp244 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp244 at (2662,1-2662,37) */
uint64_t __tmp_in_tmp244;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp244;
}
tmp244[i0] = (role == SERVER) ? __tmp_in_tmp244 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp245 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp245 at (2665,1-2665,47) */
uint64_t __tmp_in_tmp245;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp245;
}
tmp245[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp245 : 0;
}
}
}
}

vector < uint64_t > tmp246 = make_vector<uint64_t>( (int32_t)416);
/* Variable to read the clear value corresponding to the input variable tmp246 at (2668,1-2668,37) */
uint64_t __tmp_in_tmp246;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)416; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp246;
}
tmp246[i0] = (role == SERVER) ? __tmp_in_tmp246 : 0;
}

vector < uint64_t > tmp247 = make_vector<uint64_t>( (int32_t)416);
/* Variable to read the clear value corresponding to the input variable tmp247 at (2671,1-2671,37) */
uint64_t __tmp_in_tmp247;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)416; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp247;
}
tmp247[i0] = (role == SERVER) ? __tmp_in_tmp247 : 0;
}

vector < uint64_t > tmp248 = make_vector<uint64_t>( (int32_t)416);
/* Variable to read the clear value corresponding to the input variable tmp248 at (2674,1-2674,37) */
uint64_t __tmp_in_tmp248;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)416; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp248;
}
tmp248[i0] = (role == SERVER) ? __tmp_in_tmp248 : 0;
}

vector < uint64_t > tmp249 = make_vector<uint64_t>( (int32_t)416);
/* Variable to read the clear value corresponding to the input variable tmp249 at (2677,1-2677,37) */
uint64_t __tmp_in_tmp249;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)416; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp249;
}
tmp249[i0] = (role == SERVER) ? __tmp_in_tmp249 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp250 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)416,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp250 at (2680,1-2680,48) */
uint64_t __tmp_in_tmp250;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)416; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp250;
}
tmp250[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp250 : 0;
}
}
}
}

vector < uint64_t > tmp251 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp251 at (2683,1-2683,37) */
uint64_t __tmp_in_tmp251;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp251;
}
tmp251[i0] = (role == SERVER) ? __tmp_in_tmp251 : 0;
}

vector < uint64_t > tmp252 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp252 at (2686,1-2686,37) */
uint64_t __tmp_in_tmp252;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp252;
}
tmp252[i0] = (role == SERVER) ? __tmp_in_tmp252 : 0;
}

vector < uint64_t > tmp253 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp253 at (2689,1-2689,37) */
uint64_t __tmp_in_tmp253;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp253;
}
tmp253[i0] = (role == SERVER) ? __tmp_in_tmp253 : 0;
}

vector < uint64_t > tmp254 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp254 at (2692,1-2692,37) */
uint64_t __tmp_in_tmp254;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp254;
}
tmp254[i0] = (role == SERVER) ? __tmp_in_tmp254 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp255 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp255 at (2695,1-2695,47) */
uint64_t __tmp_in_tmp255;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp255;
}
tmp255[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp255 : 0;
}
}
}
}

vector < uint64_t > tmp256 = make_vector<uint64_t>( (int32_t)448);
/* Variable to read the clear value corresponding to the input variable tmp256 at (2698,1-2698,37) */
uint64_t __tmp_in_tmp256;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)448; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp256;
}
tmp256[i0] = (role == SERVER) ? __tmp_in_tmp256 : 0;
}

vector < uint64_t > tmp257 = make_vector<uint64_t>( (int32_t)448);
/* Variable to read the clear value corresponding to the input variable tmp257 at (2701,1-2701,37) */
uint64_t __tmp_in_tmp257;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)448; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp257;
}
tmp257[i0] = (role == SERVER) ? __tmp_in_tmp257 : 0;
}

vector < uint64_t > tmp258 = make_vector<uint64_t>( (int32_t)448);
/* Variable to read the clear value corresponding to the input variable tmp258 at (2704,1-2704,37) */
uint64_t __tmp_in_tmp258;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)448; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp258;
}
tmp258[i0] = (role == SERVER) ? __tmp_in_tmp258 : 0;
}

vector < uint64_t > tmp259 = make_vector<uint64_t>( (int32_t)448);
/* Variable to read the clear value corresponding to the input variable tmp259 at (2707,1-2707,37) */
uint64_t __tmp_in_tmp259;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)448; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp259;
}
tmp259[i0] = (role == SERVER) ? __tmp_in_tmp259 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp260 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)448,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp260 at (2710,1-2710,48) */
uint64_t __tmp_in_tmp260;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)448; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp260;
}
tmp260[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp260 : 0;
}
}
}
}

vector < uint64_t > tmp261 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp261 at (2713,1-2713,37) */
uint64_t __tmp_in_tmp261;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp261;
}
tmp261[i0] = (role == SERVER) ? __tmp_in_tmp261 : 0;
}

vector < uint64_t > tmp262 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp262 at (2716,1-2716,37) */
uint64_t __tmp_in_tmp262;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp262;
}
tmp262[i0] = (role == SERVER) ? __tmp_in_tmp262 : 0;
}

vector < uint64_t > tmp263 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp263 at (2719,1-2719,37) */
uint64_t __tmp_in_tmp263;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp263;
}
tmp263[i0] = (role == SERVER) ? __tmp_in_tmp263 : 0;
}

vector < uint64_t > tmp264 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp264 at (2722,1-2722,37) */
uint64_t __tmp_in_tmp264;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp264;
}
tmp264[i0] = (role == SERVER) ? __tmp_in_tmp264 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp265 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp265 at (2725,1-2725,47) */
uint64_t __tmp_in_tmp265;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp265;
}
tmp265[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp265 : 0;
}
}
}
}

vector < uint64_t > tmp266 = make_vector<uint64_t>( (int32_t)480);
/* Variable to read the clear value corresponding to the input variable tmp266 at (2728,1-2728,37) */
uint64_t __tmp_in_tmp266;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)480; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp266;
}
tmp266[i0] = (role == SERVER) ? __tmp_in_tmp266 : 0;
}

vector < uint64_t > tmp267 = make_vector<uint64_t>( (int32_t)480);
/* Variable to read the clear value corresponding to the input variable tmp267 at (2731,1-2731,37) */
uint64_t __tmp_in_tmp267;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)480; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp267;
}
tmp267[i0] = (role == SERVER) ? __tmp_in_tmp267 : 0;
}

vector < uint64_t > tmp268 = make_vector<uint64_t>( (int32_t)480);
/* Variable to read the clear value corresponding to the input variable tmp268 at (2734,1-2734,37) */
uint64_t __tmp_in_tmp268;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)480; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp268;
}
tmp268[i0] = (role == SERVER) ? __tmp_in_tmp268 : 0;
}

vector < uint64_t > tmp269 = make_vector<uint64_t>( (int32_t)480);
/* Variable to read the clear value corresponding to the input variable tmp269 at (2737,1-2737,37) */
uint64_t __tmp_in_tmp269;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)480; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp269;
}
tmp269[i0] = (role == SERVER) ? __tmp_in_tmp269 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp270 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)480,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp270 at (2740,1-2740,48) */
uint64_t __tmp_in_tmp270;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)480; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp270;
}
tmp270[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp270 : 0;
}
}
}
}

vector < uint64_t > tmp271 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp271 at (2743,1-2743,37) */
uint64_t __tmp_in_tmp271;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp271;
}
tmp271[i0] = (role == SERVER) ? __tmp_in_tmp271 : 0;
}

vector < uint64_t > tmp272 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp272 at (2746,1-2746,37) */
uint64_t __tmp_in_tmp272;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp272;
}
tmp272[i0] = (role == SERVER) ? __tmp_in_tmp272 : 0;
}

vector < uint64_t > tmp273 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp273 at (2749,1-2749,37) */
uint64_t __tmp_in_tmp273;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp273;
}
tmp273[i0] = (role == SERVER) ? __tmp_in_tmp273 : 0;
}

vector < uint64_t > tmp274 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp274 at (2752,1-2752,37) */
uint64_t __tmp_in_tmp274;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp274;
}
tmp274[i0] = (role == SERVER) ? __tmp_in_tmp274 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp275 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp275 at (2755,1-2755,47) */
uint64_t __tmp_in_tmp275;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp275;
}
tmp275[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp275 : 0;
}
}
}
}

vector < uint64_t > tmp276 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp276 at (2758,1-2758,37) */
uint64_t __tmp_in_tmp276;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp276;
}
tmp276[i0] = (role == SERVER) ? __tmp_in_tmp276 : 0;
}

vector < uint64_t > tmp277 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp277 at (2761,1-2761,37) */
uint64_t __tmp_in_tmp277;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp277;
}
tmp277[i0] = (role == SERVER) ? __tmp_in_tmp277 : 0;
}

vector < uint64_t > tmp278 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp278 at (2764,1-2764,37) */
uint64_t __tmp_in_tmp278;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp278;
}
tmp278[i0] = (role == SERVER) ? __tmp_in_tmp278 : 0;
}

vector < uint64_t > tmp279 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp279 at (2767,1-2767,37) */
uint64_t __tmp_in_tmp279;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp279;
}
tmp279[i0] = (role == SERVER) ? __tmp_in_tmp279 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp280 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp280 at (2770,1-2770,48) */
uint64_t __tmp_in_tmp280;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)512; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp280;
}
tmp280[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp280 : 0;
}
}
}
}

vector < uint64_t > tmp281 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp281 at (2773,1-2773,37) */
uint64_t __tmp_in_tmp281;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp281;
}
tmp281[i0] = (role == SERVER) ? __tmp_in_tmp281 : 0;
}

vector < uint64_t > tmp282 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp282 at (2776,1-2776,37) */
uint64_t __tmp_in_tmp282;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp282;
}
tmp282[i0] = (role == SERVER) ? __tmp_in_tmp282 : 0;
}

vector < uint64_t > tmp283 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp283 at (2779,1-2779,37) */
uint64_t __tmp_in_tmp283;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp283;
}
tmp283[i0] = (role == SERVER) ? __tmp_in_tmp283 : 0;
}

vector < uint64_t > tmp284 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp284 at (2782,1-2782,37) */
uint64_t __tmp_in_tmp284;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp284;
}
tmp284[i0] = (role == SERVER) ? __tmp_in_tmp284 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp285 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp285 at (2785,1-2785,47) */
uint64_t __tmp_in_tmp285;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp285;
}
tmp285[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp285 : 0;
}
}
}
}

vector < uint64_t > tmp286 = make_vector<uint64_t>( (int32_t)544);
/* Variable to read the clear value corresponding to the input variable tmp286 at (2788,1-2788,37) */
uint64_t __tmp_in_tmp286;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)544; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp286;
}
tmp286[i0] = (role == SERVER) ? __tmp_in_tmp286 : 0;
}

vector < uint64_t > tmp287 = make_vector<uint64_t>( (int32_t)544);
/* Variable to read the clear value corresponding to the input variable tmp287 at (2791,1-2791,37) */
uint64_t __tmp_in_tmp287;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)544; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp287;
}
tmp287[i0] = (role == SERVER) ? __tmp_in_tmp287 : 0;
}

vector < uint64_t > tmp288 = make_vector<uint64_t>( (int32_t)544);
/* Variable to read the clear value corresponding to the input variable tmp288 at (2794,1-2794,37) */
uint64_t __tmp_in_tmp288;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)544; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp288;
}
tmp288[i0] = (role == SERVER) ? __tmp_in_tmp288 : 0;
}

vector < uint64_t > tmp289 = make_vector<uint64_t>( (int32_t)544);
/* Variable to read the clear value corresponding to the input variable tmp289 at (2797,1-2797,37) */
uint64_t __tmp_in_tmp289;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)544; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp289;
}
tmp289[i0] = (role == SERVER) ? __tmp_in_tmp289 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp290 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)544,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp290 at (2800,1-2800,48) */
uint64_t __tmp_in_tmp290;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)544; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp290;
}
tmp290[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp290 : 0;
}
}
}
}

vector < uint64_t > tmp291 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp291 at (2803,1-2803,37) */
uint64_t __tmp_in_tmp291;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp291;
}
tmp291[i0] = (role == SERVER) ? __tmp_in_tmp291 : 0;
}

vector < uint64_t > tmp292 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp292 at (2806,1-2806,37) */
uint64_t __tmp_in_tmp292;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp292;
}
tmp292[i0] = (role == SERVER) ? __tmp_in_tmp292 : 0;
}

vector < uint64_t > tmp293 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp293 at (2809,1-2809,37) */
uint64_t __tmp_in_tmp293;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp293;
}
tmp293[i0] = (role == SERVER) ? __tmp_in_tmp293 : 0;
}

vector < uint64_t > tmp294 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp294 at (2812,1-2812,37) */
uint64_t __tmp_in_tmp294;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp294;
}
tmp294[i0] = (role == SERVER) ? __tmp_in_tmp294 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp295 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp295 at (2815,1-2815,47) */
uint64_t __tmp_in_tmp295;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp295;
}
tmp295[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp295 : 0;
}
}
}
}

vector < uint64_t > tmp296 = make_vector<uint64_t>( (int32_t)576);
/* Variable to read the clear value corresponding to the input variable tmp296 at (2818,1-2818,37) */
uint64_t __tmp_in_tmp296;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)576; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp296;
}
tmp296[i0] = (role == SERVER) ? __tmp_in_tmp296 : 0;
}

vector < uint64_t > tmp297 = make_vector<uint64_t>( (int32_t)576);
/* Variable to read the clear value corresponding to the input variable tmp297 at (2821,1-2821,37) */
uint64_t __tmp_in_tmp297;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)576; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp297;
}
tmp297[i0] = (role == SERVER) ? __tmp_in_tmp297 : 0;
}

vector < uint64_t > tmp298 = make_vector<uint64_t>( (int32_t)576);
/* Variable to read the clear value corresponding to the input variable tmp298 at (2824,1-2824,37) */
uint64_t __tmp_in_tmp298;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)576; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp298;
}
tmp298[i0] = (role == SERVER) ? __tmp_in_tmp298 : 0;
}

vector < uint64_t > tmp299 = make_vector<uint64_t>( (int32_t)576);
/* Variable to read the clear value corresponding to the input variable tmp299 at (2827,1-2827,37) */
uint64_t __tmp_in_tmp299;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)576; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp299;
}
tmp299[i0] = (role == SERVER) ? __tmp_in_tmp299 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp300 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)576,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp300 at (2830,1-2830,48) */
uint64_t __tmp_in_tmp300;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)576; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp300;
}
tmp300[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp300 : 0;
}
}
}
}

vector < uint64_t > tmp301 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp301 at (2833,1-2833,37) */
uint64_t __tmp_in_tmp301;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp301;
}
tmp301[i0] = (role == SERVER) ? __tmp_in_tmp301 : 0;
}

vector < uint64_t > tmp302 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp302 at (2836,1-2836,37) */
uint64_t __tmp_in_tmp302;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp302;
}
tmp302[i0] = (role == SERVER) ? __tmp_in_tmp302 : 0;
}

vector < uint64_t > tmp303 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp303 at (2839,1-2839,37) */
uint64_t __tmp_in_tmp303;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp303;
}
tmp303[i0] = (role == SERVER) ? __tmp_in_tmp303 : 0;
}

vector < uint64_t > tmp304 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp304 at (2842,1-2842,37) */
uint64_t __tmp_in_tmp304;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp304;
}
tmp304[i0] = (role == SERVER) ? __tmp_in_tmp304 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp305 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp305 at (2845,1-2845,47) */
uint64_t __tmp_in_tmp305;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp305;
}
tmp305[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp305 : 0;
}
}
}
}

vector < uint64_t > tmp306 = make_vector<uint64_t>( (int32_t)608);
/* Variable to read the clear value corresponding to the input variable tmp306 at (2848,1-2848,37) */
uint64_t __tmp_in_tmp306;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)608; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp306;
}
tmp306[i0] = (role == SERVER) ? __tmp_in_tmp306 : 0;
}

vector < uint64_t > tmp307 = make_vector<uint64_t>( (int32_t)608);
/* Variable to read the clear value corresponding to the input variable tmp307 at (2851,1-2851,37) */
uint64_t __tmp_in_tmp307;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)608; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp307;
}
tmp307[i0] = (role == SERVER) ? __tmp_in_tmp307 : 0;
}

vector < uint64_t > tmp308 = make_vector<uint64_t>( (int32_t)608);
/* Variable to read the clear value corresponding to the input variable tmp308 at (2854,1-2854,37) */
uint64_t __tmp_in_tmp308;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)608; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp308;
}
tmp308[i0] = (role == SERVER) ? __tmp_in_tmp308 : 0;
}

vector < uint64_t > tmp309 = make_vector<uint64_t>( (int32_t)608);
/* Variable to read the clear value corresponding to the input variable tmp309 at (2857,1-2857,37) */
uint64_t __tmp_in_tmp309;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)608; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp309;
}
tmp309[i0] = (role == SERVER) ? __tmp_in_tmp309 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp310 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)608,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp310 at (2860,1-2860,48) */
uint64_t __tmp_in_tmp310;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)608; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp310;
}
tmp310[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp310 : 0;
}
}
}
}

vector < uint64_t > tmp311 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp311 at (2863,1-2863,37) */
uint64_t __tmp_in_tmp311;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp311;
}
tmp311[i0] = (role == SERVER) ? __tmp_in_tmp311 : 0;
}

vector < uint64_t > tmp312 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp312 at (2866,1-2866,37) */
uint64_t __tmp_in_tmp312;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp312;
}
tmp312[i0] = (role == SERVER) ? __tmp_in_tmp312 : 0;
}

vector < uint64_t > tmp313 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp313 at (2869,1-2869,37) */
uint64_t __tmp_in_tmp313;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp313;
}
tmp313[i0] = (role == SERVER) ? __tmp_in_tmp313 : 0;
}

vector < uint64_t > tmp314 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp314 at (2872,1-2872,37) */
uint64_t __tmp_in_tmp314;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp314;
}
tmp314[i0] = (role == SERVER) ? __tmp_in_tmp314 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp315 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp315 at (2875,1-2875,47) */
uint64_t __tmp_in_tmp315;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp315;
}
tmp315[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp315 : 0;
}
}
}
}

vector < uint64_t > tmp316 = make_vector<uint64_t>( (int32_t)640);
/* Variable to read the clear value corresponding to the input variable tmp316 at (2878,1-2878,37) */
uint64_t __tmp_in_tmp316;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)640; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp316;
}
tmp316[i0] = (role == SERVER) ? __tmp_in_tmp316 : 0;
}

vector < uint64_t > tmp317 = make_vector<uint64_t>( (int32_t)640);
/* Variable to read the clear value corresponding to the input variable tmp317 at (2881,1-2881,37) */
uint64_t __tmp_in_tmp317;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)640; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp317;
}
tmp317[i0] = (role == SERVER) ? __tmp_in_tmp317 : 0;
}

vector < uint64_t > tmp318 = make_vector<uint64_t>( (int32_t)640);
/* Variable to read the clear value corresponding to the input variable tmp318 at (2884,1-2884,37) */
uint64_t __tmp_in_tmp318;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)640; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp318;
}
tmp318[i0] = (role == SERVER) ? __tmp_in_tmp318 : 0;
}

vector < uint64_t > tmp319 = make_vector<uint64_t>( (int32_t)640);
/* Variable to read the clear value corresponding to the input variable tmp319 at (2887,1-2887,37) */
uint64_t __tmp_in_tmp319;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)640; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp319;
}
tmp319[i0] = (role == SERVER) ? __tmp_in_tmp319 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp320 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)640,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp320 at (2890,1-2890,48) */
uint64_t __tmp_in_tmp320;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)640; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp320;
}
tmp320[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp320 : 0;
}
}
}
}

vector < uint64_t > tmp321 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp321 at (2893,1-2893,37) */
uint64_t __tmp_in_tmp321;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp321;
}
tmp321[i0] = (role == SERVER) ? __tmp_in_tmp321 : 0;
}

vector < uint64_t > tmp322 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp322 at (2896,1-2896,37) */
uint64_t __tmp_in_tmp322;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp322;
}
tmp322[i0] = (role == SERVER) ? __tmp_in_tmp322 : 0;
}

vector < uint64_t > tmp323 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp323 at (2899,1-2899,37) */
uint64_t __tmp_in_tmp323;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp323;
}
tmp323[i0] = (role == SERVER) ? __tmp_in_tmp323 : 0;
}

vector < uint64_t > tmp324 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp324 at (2902,1-2902,37) */
uint64_t __tmp_in_tmp324;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp324;
}
tmp324[i0] = (role == SERVER) ? __tmp_in_tmp324 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp325 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp325 at (2905,1-2905,47) */
uint64_t __tmp_in_tmp325;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp325;
}
tmp325[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp325 : 0;
}
}
}
}

vector < uint64_t > tmp326 = make_vector<uint64_t>( (int32_t)672);
/* Variable to read the clear value corresponding to the input variable tmp326 at (2908,1-2908,37) */
uint64_t __tmp_in_tmp326;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)672; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp326;
}
tmp326[i0] = (role == SERVER) ? __tmp_in_tmp326 : 0;
}

vector < uint64_t > tmp327 = make_vector<uint64_t>( (int32_t)672);
/* Variable to read the clear value corresponding to the input variable tmp327 at (2911,1-2911,37) */
uint64_t __tmp_in_tmp327;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)672; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp327;
}
tmp327[i0] = (role == SERVER) ? __tmp_in_tmp327 : 0;
}

vector < uint64_t > tmp328 = make_vector<uint64_t>( (int32_t)672);
/* Variable to read the clear value corresponding to the input variable tmp328 at (2914,1-2914,37) */
uint64_t __tmp_in_tmp328;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)672; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp328;
}
tmp328[i0] = (role == SERVER) ? __tmp_in_tmp328 : 0;
}

vector < uint64_t > tmp329 = make_vector<uint64_t>( (int32_t)672);
/* Variable to read the clear value corresponding to the input variable tmp329 at (2917,1-2917,37) */
uint64_t __tmp_in_tmp329;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)672; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp329;
}
tmp329[i0] = (role == SERVER) ? __tmp_in_tmp329 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp330 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)672,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp330 at (2920,1-2920,48) */
uint64_t __tmp_in_tmp330;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)672; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp330;
}
tmp330[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp330 : 0;
}
}
}
}

vector < uint64_t > tmp331 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp331 at (2923,1-2923,37) */
uint64_t __tmp_in_tmp331;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp331;
}
tmp331[i0] = (role == SERVER) ? __tmp_in_tmp331 : 0;
}

vector < uint64_t > tmp332 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp332 at (2926,1-2926,37) */
uint64_t __tmp_in_tmp332;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp332;
}
tmp332[i0] = (role == SERVER) ? __tmp_in_tmp332 : 0;
}

vector < uint64_t > tmp333 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp333 at (2929,1-2929,37) */
uint64_t __tmp_in_tmp333;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp333;
}
tmp333[i0] = (role == SERVER) ? __tmp_in_tmp333 : 0;
}

vector < uint64_t > tmp334 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp334 at (2932,1-2932,37) */
uint64_t __tmp_in_tmp334;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp334;
}
tmp334[i0] = (role == SERVER) ? __tmp_in_tmp334 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp335 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp335 at (2935,1-2935,47) */
uint64_t __tmp_in_tmp335;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp335;
}
tmp335[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp335 : 0;
}
}
}
}

vector < uint64_t > tmp336 = make_vector<uint64_t>( (int32_t)704);
/* Variable to read the clear value corresponding to the input variable tmp336 at (2938,1-2938,37) */
uint64_t __tmp_in_tmp336;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)704; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp336;
}
tmp336[i0] = (role == SERVER) ? __tmp_in_tmp336 : 0;
}

vector < uint64_t > tmp337 = make_vector<uint64_t>( (int32_t)704);
/* Variable to read the clear value corresponding to the input variable tmp337 at (2941,1-2941,37) */
uint64_t __tmp_in_tmp337;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)704; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp337;
}
tmp337[i0] = (role == SERVER) ? __tmp_in_tmp337 : 0;
}

vector < uint64_t > tmp338 = make_vector<uint64_t>( (int32_t)704);
/* Variable to read the clear value corresponding to the input variable tmp338 at (2944,1-2944,37) */
uint64_t __tmp_in_tmp338;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)704; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp338;
}
tmp338[i0] = (role == SERVER) ? __tmp_in_tmp338 : 0;
}

vector < uint64_t > tmp339 = make_vector<uint64_t>( (int32_t)704);
/* Variable to read the clear value corresponding to the input variable tmp339 at (2947,1-2947,37) */
uint64_t __tmp_in_tmp339;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)704; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp339;
}
tmp339[i0] = (role == SERVER) ? __tmp_in_tmp339 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp340 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)704,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp340 at (2950,1-2950,48) */
uint64_t __tmp_in_tmp340;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)704; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp340;
}
tmp340[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp340 : 0;
}
}
}
}

vector < uint64_t > tmp341 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp341 at (2953,1-2953,37) */
uint64_t __tmp_in_tmp341;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp341;
}
tmp341[i0] = (role == SERVER) ? __tmp_in_tmp341 : 0;
}

vector < uint64_t > tmp342 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp342 at (2956,1-2956,37) */
uint64_t __tmp_in_tmp342;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp342;
}
tmp342[i0] = (role == SERVER) ? __tmp_in_tmp342 : 0;
}

vector < uint64_t > tmp343 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp343 at (2959,1-2959,37) */
uint64_t __tmp_in_tmp343;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp343;
}
tmp343[i0] = (role == SERVER) ? __tmp_in_tmp343 : 0;
}

vector < uint64_t > tmp344 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp344 at (2962,1-2962,37) */
uint64_t __tmp_in_tmp344;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp344;
}
tmp344[i0] = (role == SERVER) ? __tmp_in_tmp344 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp345 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp345 at (2965,1-2965,47) */
uint64_t __tmp_in_tmp345;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp345;
}
tmp345[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp345 : 0;
}
}
}
}

vector < uint64_t > tmp346 = make_vector<uint64_t>( (int32_t)736);
/* Variable to read the clear value corresponding to the input variable tmp346 at (2968,1-2968,37) */
uint64_t __tmp_in_tmp346;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)736; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp346;
}
tmp346[i0] = (role == SERVER) ? __tmp_in_tmp346 : 0;
}

vector < uint64_t > tmp347 = make_vector<uint64_t>( (int32_t)736);
/* Variable to read the clear value corresponding to the input variable tmp347 at (2971,1-2971,37) */
uint64_t __tmp_in_tmp347;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)736; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp347;
}
tmp347[i0] = (role == SERVER) ? __tmp_in_tmp347 : 0;
}

vector < uint64_t > tmp348 = make_vector<uint64_t>( (int32_t)736);
/* Variable to read the clear value corresponding to the input variable tmp348 at (2974,1-2974,37) */
uint64_t __tmp_in_tmp348;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)736; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp348;
}
tmp348[i0] = (role == SERVER) ? __tmp_in_tmp348 : 0;
}

vector < uint64_t > tmp349 = make_vector<uint64_t>( (int32_t)736);
/* Variable to read the clear value corresponding to the input variable tmp349 at (2977,1-2977,37) */
uint64_t __tmp_in_tmp349;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)736; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp349;
}
tmp349[i0] = (role == SERVER) ? __tmp_in_tmp349 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp350 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)736,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp350 at (2980,1-2980,48) */
uint64_t __tmp_in_tmp350;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)736; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp350;
}
tmp350[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp350 : 0;
}
}
}
}

vector < uint64_t > tmp351 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp351 at (2983,1-2983,37) */
uint64_t __tmp_in_tmp351;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp351;
}
tmp351[i0] = (role == SERVER) ? __tmp_in_tmp351 : 0;
}

vector < uint64_t > tmp352 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp352 at (2986,1-2986,37) */
uint64_t __tmp_in_tmp352;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp352;
}
tmp352[i0] = (role == SERVER) ? __tmp_in_tmp352 : 0;
}

vector < uint64_t > tmp353 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp353 at (2989,1-2989,37) */
uint64_t __tmp_in_tmp353;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp353;
}
tmp353[i0] = (role == SERVER) ? __tmp_in_tmp353 : 0;
}

vector < uint64_t > tmp354 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp354 at (2992,1-2992,37) */
uint64_t __tmp_in_tmp354;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp354;
}
tmp354[i0] = (role == SERVER) ? __tmp_in_tmp354 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp355 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp355 at (2995,1-2995,47) */
uint64_t __tmp_in_tmp355;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp355;
}
tmp355[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp355 : 0;
}
}
}
}

vector < uint64_t > tmp356 = make_vector<uint64_t>( (int32_t)768);
/* Variable to read the clear value corresponding to the input variable tmp356 at (2998,1-2998,37) */
uint64_t __tmp_in_tmp356;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)768; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp356;
}
tmp356[i0] = (role == SERVER) ? __tmp_in_tmp356 : 0;
}

vector < uint64_t > tmp357 = make_vector<uint64_t>( (int32_t)768);
/* Variable to read the clear value corresponding to the input variable tmp357 at (3001,1-3001,37) */
uint64_t __tmp_in_tmp357;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)768; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp357;
}
tmp357[i0] = (role == SERVER) ? __tmp_in_tmp357 : 0;
}

vector < uint64_t > tmp358 = make_vector<uint64_t>( (int32_t)768);
/* Variable to read the clear value corresponding to the input variable tmp358 at (3004,1-3004,37) */
uint64_t __tmp_in_tmp358;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)768; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp358;
}
tmp358[i0] = (role == SERVER) ? __tmp_in_tmp358 : 0;
}

vector < uint64_t > tmp359 = make_vector<uint64_t>( (int32_t)768);
/* Variable to read the clear value corresponding to the input variable tmp359 at (3007,1-3007,37) */
uint64_t __tmp_in_tmp359;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)768; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp359;
}
tmp359[i0] = (role == SERVER) ? __tmp_in_tmp359 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp360 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)768,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp360 at (3010,1-3010,48) */
uint64_t __tmp_in_tmp360;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)768; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp360;
}
tmp360[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp360 : 0;
}
}
}
}

vector < uint64_t > tmp361 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp361 at (3013,1-3013,37) */
uint64_t __tmp_in_tmp361;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp361;
}
tmp361[i0] = (role == SERVER) ? __tmp_in_tmp361 : 0;
}

vector < uint64_t > tmp362 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp362 at (3016,1-3016,37) */
uint64_t __tmp_in_tmp362;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp362;
}
tmp362[i0] = (role == SERVER) ? __tmp_in_tmp362 : 0;
}

vector < uint64_t > tmp363 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp363 at (3019,1-3019,37) */
uint64_t __tmp_in_tmp363;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp363;
}
tmp363[i0] = (role == SERVER) ? __tmp_in_tmp363 : 0;
}

vector < uint64_t > tmp364 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp364 at (3022,1-3022,37) */
uint64_t __tmp_in_tmp364;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp364;
}
tmp364[i0] = (role == SERVER) ? __tmp_in_tmp364 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp365 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp365 at (3025,1-3025,47) */
uint64_t __tmp_in_tmp365;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp365;
}
tmp365[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp365 : 0;
}
}
}
}

vector < uint64_t > tmp366 = make_vector<uint64_t>( (int32_t)800);
/* Variable to read the clear value corresponding to the input variable tmp366 at (3028,1-3028,37) */
uint64_t __tmp_in_tmp366;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)800; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp366;
}
tmp366[i0] = (role == SERVER) ? __tmp_in_tmp366 : 0;
}

vector < uint64_t > tmp367 = make_vector<uint64_t>( (int32_t)800);
/* Variable to read the clear value corresponding to the input variable tmp367 at (3031,1-3031,37) */
uint64_t __tmp_in_tmp367;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)800; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp367;
}
tmp367[i0] = (role == SERVER) ? __tmp_in_tmp367 : 0;
}

vector < uint64_t > tmp368 = make_vector<uint64_t>( (int32_t)800);
/* Variable to read the clear value corresponding to the input variable tmp368 at (3034,1-3034,37) */
uint64_t __tmp_in_tmp368;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)800; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp368;
}
tmp368[i0] = (role == SERVER) ? __tmp_in_tmp368 : 0;
}

vector < uint64_t > tmp369 = make_vector<uint64_t>( (int32_t)800);
/* Variable to read the clear value corresponding to the input variable tmp369 at (3037,1-3037,37) */
uint64_t __tmp_in_tmp369;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)800; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp369;
}
tmp369[i0] = (role == SERVER) ? __tmp_in_tmp369 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp370 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)800,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp370 at (3040,1-3040,48) */
uint64_t __tmp_in_tmp370;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)800; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp370;
}
tmp370[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp370 : 0;
}
}
}
}

vector < uint64_t > tmp371 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp371 at (3043,1-3043,37) */
uint64_t __tmp_in_tmp371;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp371;
}
tmp371[i0] = (role == SERVER) ? __tmp_in_tmp371 : 0;
}

vector < uint64_t > tmp372 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp372 at (3046,1-3046,37) */
uint64_t __tmp_in_tmp372;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp372;
}
tmp372[i0] = (role == SERVER) ? __tmp_in_tmp372 : 0;
}

vector < uint64_t > tmp373 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp373 at (3049,1-3049,37) */
uint64_t __tmp_in_tmp373;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp373;
}
tmp373[i0] = (role == SERVER) ? __tmp_in_tmp373 : 0;
}

vector < uint64_t > tmp374 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp374 at (3052,1-3052,37) */
uint64_t __tmp_in_tmp374;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp374;
}
tmp374[i0] = (role == SERVER) ? __tmp_in_tmp374 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp375 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp375 at (3055,1-3055,47) */
uint64_t __tmp_in_tmp375;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp375;
}
tmp375[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp375 : 0;
}
}
}
}

vector < uint64_t > tmp376 = make_vector<uint64_t>( (int32_t)832);
/* Variable to read the clear value corresponding to the input variable tmp376 at (3058,1-3058,37) */
uint64_t __tmp_in_tmp376;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)832; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp376;
}
tmp376[i0] = (role == SERVER) ? __tmp_in_tmp376 : 0;
}

vector < uint64_t > tmp377 = make_vector<uint64_t>( (int32_t)832);
/* Variable to read the clear value corresponding to the input variable tmp377 at (3061,1-3061,37) */
uint64_t __tmp_in_tmp377;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)832; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp377;
}
tmp377[i0] = (role == SERVER) ? __tmp_in_tmp377 : 0;
}

vector < uint64_t > tmp378 = make_vector<uint64_t>( (int32_t)832);
/* Variable to read the clear value corresponding to the input variable tmp378 at (3064,1-3064,37) */
uint64_t __tmp_in_tmp378;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)832; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp378;
}
tmp378[i0] = (role == SERVER) ? __tmp_in_tmp378 : 0;
}

vector < uint64_t > tmp379 = make_vector<uint64_t>( (int32_t)832);
/* Variable to read the clear value corresponding to the input variable tmp379 at (3067,1-3067,37) */
uint64_t __tmp_in_tmp379;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)832; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp379;
}
tmp379[i0] = (role == SERVER) ? __tmp_in_tmp379 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp380 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)832,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp380 at (3070,1-3070,48) */
uint64_t __tmp_in_tmp380;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)832; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp380;
}
tmp380[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp380 : 0;
}
}
}
}

vector < uint64_t > tmp381 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp381 at (3073,1-3073,37) */
uint64_t __tmp_in_tmp381;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp381;
}
tmp381[i0] = (role == SERVER) ? __tmp_in_tmp381 : 0;
}

vector < uint64_t > tmp382 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp382 at (3076,1-3076,37) */
uint64_t __tmp_in_tmp382;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp382;
}
tmp382[i0] = (role == SERVER) ? __tmp_in_tmp382 : 0;
}

vector < uint64_t > tmp383 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp383 at (3079,1-3079,37) */
uint64_t __tmp_in_tmp383;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp383;
}
tmp383[i0] = (role == SERVER) ? __tmp_in_tmp383 : 0;
}

vector < uint64_t > tmp384 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp384 at (3082,1-3082,37) */
uint64_t __tmp_in_tmp384;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp384;
}
tmp384[i0] = (role == SERVER) ? __tmp_in_tmp384 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp385 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp385 at (3085,1-3085,47) */
uint64_t __tmp_in_tmp385;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp385;
}
tmp385[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp385 : 0;
}
}
}
}

vector < uint64_t > tmp386 = make_vector<uint64_t>( (int32_t)864);
/* Variable to read the clear value corresponding to the input variable tmp386 at (3088,1-3088,37) */
uint64_t __tmp_in_tmp386;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)864; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp386;
}
tmp386[i0] = (role == SERVER) ? __tmp_in_tmp386 : 0;
}

vector < uint64_t > tmp387 = make_vector<uint64_t>( (int32_t)864);
/* Variable to read the clear value corresponding to the input variable tmp387 at (3091,1-3091,37) */
uint64_t __tmp_in_tmp387;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)864; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp387;
}
tmp387[i0] = (role == SERVER) ? __tmp_in_tmp387 : 0;
}

vector < uint64_t > tmp388 = make_vector<uint64_t>( (int32_t)864);
/* Variable to read the clear value corresponding to the input variable tmp388 at (3094,1-3094,37) */
uint64_t __tmp_in_tmp388;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)864; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp388;
}
tmp388[i0] = (role == SERVER) ? __tmp_in_tmp388 : 0;
}

vector < uint64_t > tmp389 = make_vector<uint64_t>( (int32_t)864);
/* Variable to read the clear value corresponding to the input variable tmp389 at (3097,1-3097,37) */
uint64_t __tmp_in_tmp389;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)864; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp389;
}
tmp389[i0] = (role == SERVER) ? __tmp_in_tmp389 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp390 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)864,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp390 at (3100,1-3100,48) */
uint64_t __tmp_in_tmp390;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)864; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp390;
}
tmp390[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp390 : 0;
}
}
}
}

vector < uint64_t > tmp391 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp391 at (3103,1-3103,37) */
uint64_t __tmp_in_tmp391;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp391;
}
tmp391[i0] = (role == SERVER) ? __tmp_in_tmp391 : 0;
}

vector < uint64_t > tmp392 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp392 at (3106,1-3106,37) */
uint64_t __tmp_in_tmp392;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp392;
}
tmp392[i0] = (role == SERVER) ? __tmp_in_tmp392 : 0;
}

vector < uint64_t > tmp393 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp393 at (3109,1-3109,37) */
uint64_t __tmp_in_tmp393;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp393;
}
tmp393[i0] = (role == SERVER) ? __tmp_in_tmp393 : 0;
}

vector < uint64_t > tmp394 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp394 at (3112,1-3112,37) */
uint64_t __tmp_in_tmp394;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp394;
}
tmp394[i0] = (role == SERVER) ? __tmp_in_tmp394 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp395 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp395 at (3115,1-3115,47) */
uint64_t __tmp_in_tmp395;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp395;
}
tmp395[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp395 : 0;
}
}
}
}

vector < uint64_t > tmp396 = make_vector<uint64_t>( (int32_t)896);
/* Variable to read the clear value corresponding to the input variable tmp396 at (3118,1-3118,37) */
uint64_t __tmp_in_tmp396;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)896; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp396;
}
tmp396[i0] = (role == SERVER) ? __tmp_in_tmp396 : 0;
}

vector < uint64_t > tmp397 = make_vector<uint64_t>( (int32_t)896);
/* Variable to read the clear value corresponding to the input variable tmp397 at (3121,1-3121,37) */
uint64_t __tmp_in_tmp397;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)896; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp397;
}
tmp397[i0] = (role == SERVER) ? __tmp_in_tmp397 : 0;
}

vector < uint64_t > tmp398 = make_vector<uint64_t>( (int32_t)896);
/* Variable to read the clear value corresponding to the input variable tmp398 at (3124,1-3124,37) */
uint64_t __tmp_in_tmp398;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)896; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp398;
}
tmp398[i0] = (role == SERVER) ? __tmp_in_tmp398 : 0;
}

vector < uint64_t > tmp399 = make_vector<uint64_t>( (int32_t)896);
/* Variable to read the clear value corresponding to the input variable tmp399 at (3127,1-3127,37) */
uint64_t __tmp_in_tmp399;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)896; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp399;
}
tmp399[i0] = (role == SERVER) ? __tmp_in_tmp399 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp400 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)896,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp400 at (3130,1-3130,48) */
uint64_t __tmp_in_tmp400;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)896; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp400;
}
tmp400[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp400 : 0;
}
}
}
}

vector < uint64_t > tmp401 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp401 at (3133,1-3133,37) */
uint64_t __tmp_in_tmp401;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp401;
}
tmp401[i0] = (role == SERVER) ? __tmp_in_tmp401 : 0;
}

vector < uint64_t > tmp402 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp402 at (3136,1-3136,37) */
uint64_t __tmp_in_tmp402;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp402;
}
tmp402[i0] = (role == SERVER) ? __tmp_in_tmp402 : 0;
}

vector < uint64_t > tmp403 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp403 at (3139,1-3139,37) */
uint64_t __tmp_in_tmp403;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp403;
}
tmp403[i0] = (role == SERVER) ? __tmp_in_tmp403 : 0;
}

vector < uint64_t > tmp404 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp404 at (3142,1-3142,37) */
uint64_t __tmp_in_tmp404;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp404;
}
tmp404[i0] = (role == SERVER) ? __tmp_in_tmp404 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp405 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp405 at (3145,1-3145,47) */
uint64_t __tmp_in_tmp405;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp405;
}
tmp405[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp405 : 0;
}
}
}
}

vector < uint64_t > tmp406 = make_vector<uint64_t>( (int32_t)928);
/* Variable to read the clear value corresponding to the input variable tmp406 at (3148,1-3148,37) */
uint64_t __tmp_in_tmp406;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)928; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp406;
}
tmp406[i0] = (role == SERVER) ? __tmp_in_tmp406 : 0;
}

vector < uint64_t > tmp407 = make_vector<uint64_t>( (int32_t)928);
/* Variable to read the clear value corresponding to the input variable tmp407 at (3151,1-3151,37) */
uint64_t __tmp_in_tmp407;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)928; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp407;
}
tmp407[i0] = (role == SERVER) ? __tmp_in_tmp407 : 0;
}

vector < uint64_t > tmp408 = make_vector<uint64_t>( (int32_t)928);
/* Variable to read the clear value corresponding to the input variable tmp408 at (3154,1-3154,37) */
uint64_t __tmp_in_tmp408;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)928; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp408;
}
tmp408[i0] = (role == SERVER) ? __tmp_in_tmp408 : 0;
}

vector < uint64_t > tmp409 = make_vector<uint64_t>( (int32_t)928);
/* Variable to read the clear value corresponding to the input variable tmp409 at (3157,1-3157,37) */
uint64_t __tmp_in_tmp409;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)928; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp409;
}
tmp409[i0] = (role == SERVER) ? __tmp_in_tmp409 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp410 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)928,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp410 at (3160,1-3160,48) */
uint64_t __tmp_in_tmp410;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)928; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp410;
}
tmp410[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp410 : 0;
}
}
}
}

vector < uint64_t > tmp411 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp411 at (3163,1-3163,37) */
uint64_t __tmp_in_tmp411;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp411;
}
tmp411[i0] = (role == SERVER) ? __tmp_in_tmp411 : 0;
}

vector < uint64_t > tmp412 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp412 at (3166,1-3166,37) */
uint64_t __tmp_in_tmp412;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp412;
}
tmp412[i0] = (role == SERVER) ? __tmp_in_tmp412 : 0;
}

vector < uint64_t > tmp413 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp413 at (3169,1-3169,37) */
uint64_t __tmp_in_tmp413;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp413;
}
tmp413[i0] = (role == SERVER) ? __tmp_in_tmp413 : 0;
}

vector < uint64_t > tmp414 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp414 at (3172,1-3172,37) */
uint64_t __tmp_in_tmp414;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp414;
}
tmp414[i0] = (role == SERVER) ? __tmp_in_tmp414 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp415 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp415 at (3175,1-3175,47) */
uint64_t __tmp_in_tmp415;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp415;
}
tmp415[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp415 : 0;
}
}
}
}

vector < uint64_t > tmp416 = make_vector<uint64_t>( (int32_t)960);
/* Variable to read the clear value corresponding to the input variable tmp416 at (3178,1-3178,37) */
uint64_t __tmp_in_tmp416;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)960; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp416;
}
tmp416[i0] = (role == SERVER) ? __tmp_in_tmp416 : 0;
}

vector < uint64_t > tmp417 = make_vector<uint64_t>( (int32_t)960);
/* Variable to read the clear value corresponding to the input variable tmp417 at (3181,1-3181,37) */
uint64_t __tmp_in_tmp417;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)960; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp417;
}
tmp417[i0] = (role == SERVER) ? __tmp_in_tmp417 : 0;
}

vector < uint64_t > tmp418 = make_vector<uint64_t>( (int32_t)960);
/* Variable to read the clear value corresponding to the input variable tmp418 at (3184,1-3184,37) */
uint64_t __tmp_in_tmp418;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)960; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp418;
}
tmp418[i0] = (role == SERVER) ? __tmp_in_tmp418 : 0;
}

vector < uint64_t > tmp419 = make_vector<uint64_t>( (int32_t)960);
/* Variable to read the clear value corresponding to the input variable tmp419 at (3187,1-3187,37) */
uint64_t __tmp_in_tmp419;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)960; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp419;
}
tmp419[i0] = (role == SERVER) ? __tmp_in_tmp419 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp420 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)960,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp420 at (3190,1-3190,48) */
uint64_t __tmp_in_tmp420;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)960; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp420;
}
tmp420[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp420 : 0;
}
}
}
}

vector < uint64_t > tmp421 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp421 at (3193,1-3193,37) */
uint64_t __tmp_in_tmp421;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp421;
}
tmp421[i0] = (role == SERVER) ? __tmp_in_tmp421 : 0;
}

vector < uint64_t > tmp422 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp422 at (3196,1-3196,37) */
uint64_t __tmp_in_tmp422;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp422;
}
tmp422[i0] = (role == SERVER) ? __tmp_in_tmp422 : 0;
}

vector < uint64_t > tmp423 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp423 at (3199,1-3199,37) */
uint64_t __tmp_in_tmp423;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp423;
}
tmp423[i0] = (role == SERVER) ? __tmp_in_tmp423 : 0;
}

vector < uint64_t > tmp424 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp424 at (3202,1-3202,37) */
uint64_t __tmp_in_tmp424;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp424;
}
tmp424[i0] = (role == SERVER) ? __tmp_in_tmp424 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp425 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp425 at (3205,1-3205,47) */
uint64_t __tmp_in_tmp425;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp425;
}
tmp425[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp425 : 0;
}
}
}
}

vector < uint64_t > tmp426 = make_vector<uint64_t>( (int32_t)992);
/* Variable to read the clear value corresponding to the input variable tmp426 at (3208,1-3208,37) */
uint64_t __tmp_in_tmp426;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)992; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp426;
}
tmp426[i0] = (role == SERVER) ? __tmp_in_tmp426 : 0;
}

vector < uint64_t > tmp427 = make_vector<uint64_t>( (int32_t)992);
/* Variable to read the clear value corresponding to the input variable tmp427 at (3211,1-3211,37) */
uint64_t __tmp_in_tmp427;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)992; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp427;
}
tmp427[i0] = (role == SERVER) ? __tmp_in_tmp427 : 0;
}

vector < uint64_t > tmp428 = make_vector<uint64_t>( (int32_t)992);
/* Variable to read the clear value corresponding to the input variable tmp428 at (3214,1-3214,37) */
uint64_t __tmp_in_tmp428;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)992; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp428;
}
tmp428[i0] = (role == SERVER) ? __tmp_in_tmp428 : 0;
}

vector < uint64_t > tmp429 = make_vector<uint64_t>( (int32_t)992);
/* Variable to read the clear value corresponding to the input variable tmp429 at (3217,1-3217,37) */
uint64_t __tmp_in_tmp429;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)992; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp429;
}
tmp429[i0] = (role == SERVER) ? __tmp_in_tmp429 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp430 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)992,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp430 at (3220,1-3220,48) */
uint64_t __tmp_in_tmp430;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)992; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp430;
}
tmp430[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp430 : 0;
}
}
}
}

vector < uint64_t > tmp431 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp431 at (3223,1-3223,37) */
uint64_t __tmp_in_tmp431;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp431;
}
tmp431[i0] = (role == SERVER) ? __tmp_in_tmp431 : 0;
}

vector < uint64_t > tmp432 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp432 at (3226,1-3226,37) */
uint64_t __tmp_in_tmp432;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp432;
}
tmp432[i0] = (role == SERVER) ? __tmp_in_tmp432 : 0;
}

vector < uint64_t > tmp433 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp433 at (3229,1-3229,37) */
uint64_t __tmp_in_tmp433;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp433;
}
tmp433[i0] = (role == SERVER) ? __tmp_in_tmp433 : 0;
}

vector < uint64_t > tmp434 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp434 at (3232,1-3232,37) */
uint64_t __tmp_in_tmp434;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp434;
}
tmp434[i0] = (role == SERVER) ? __tmp_in_tmp434 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp435 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp435 at (3235,1-3235,47) */
uint64_t __tmp_in_tmp435;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp435;
}
tmp435[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp435 : 0;
}
}
}
}

vector < uint64_t > tmp436 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp436 at (3238,1-3238,38) */
uint64_t __tmp_in_tmp436;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp436;
}
tmp436[i0] = (role == SERVER) ? __tmp_in_tmp436 : 0;
}

vector < uint64_t > tmp437 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp437 at (3241,1-3241,38) */
uint64_t __tmp_in_tmp437;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp437;
}
tmp437[i0] = (role == SERVER) ? __tmp_in_tmp437 : 0;
}

vector < uint64_t > tmp438 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp438 at (3244,1-3244,38) */
uint64_t __tmp_in_tmp438;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp438;
}
tmp438[i0] = (role == SERVER) ? __tmp_in_tmp438 : 0;
}

vector < uint64_t > tmp439 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp439 at (3247,1-3247,38) */
uint64_t __tmp_in_tmp439;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp439;
}
tmp439[i0] = (role == SERVER) ? __tmp_in_tmp439 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp440 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp440 at (3250,1-3250,49) */
uint64_t __tmp_in_tmp440;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1024; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)512; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp440;
}
tmp440[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp440 : 0;
}
}
}
}

vector < uint64_t > tmp441 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp441 at (3253,1-3253,37) */
uint64_t __tmp_in_tmp441;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp441;
}
tmp441[i0] = (role == SERVER) ? __tmp_in_tmp441 : 0;
}

vector < uint64_t > tmp442 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp442 at (3256,1-3256,37) */
uint64_t __tmp_in_tmp442;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp442;
}
tmp442[i0] = (role == SERVER) ? __tmp_in_tmp442 : 0;
}

vector < uint64_t > tmp443 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp443 at (3259,1-3259,37) */
uint64_t __tmp_in_tmp443;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp443;
}
tmp443[i0] = (role == SERVER) ? __tmp_in_tmp443 : 0;
}

vector < uint64_t > tmp444 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp444 at (3262,1-3262,37) */
uint64_t __tmp_in_tmp444;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp444;
}
tmp444[i0] = (role == SERVER) ? __tmp_in_tmp444 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp445 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp445 at (3265,1-3265,48) */
uint64_t __tmp_in_tmp445;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)512; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp445;
}
tmp445[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp445 : 0;
}
}
}
}

vector < uint64_t > tmp446 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp446 at (3268,1-3268,37) */
uint64_t __tmp_in_tmp446;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp446;
}
tmp446[i0] = (role == SERVER) ? __tmp_in_tmp446 : 0;
}

vector < uint64_t > tmp447 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp447 at (3271,1-3271,37) */
uint64_t __tmp_in_tmp447;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp447;
}
tmp447[i0] = (role == SERVER) ? __tmp_in_tmp447 : 0;
}

vector < uint64_t > tmp448 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp448 at (3274,1-3274,37) */
uint64_t __tmp_in_tmp448;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp448;
}
tmp448[i0] = (role == SERVER) ? __tmp_in_tmp448 : 0;
}

vector < uint64_t > tmp449 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp449 at (3277,1-3277,37) */
uint64_t __tmp_in_tmp449;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp449;
}
tmp449[i0] = (role == SERVER) ? __tmp_in_tmp449 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp450 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp450 at (3280,1-3280,47) */
uint64_t __tmp_in_tmp450;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp450;
}
tmp450[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp450 : 0;
}
}
}
}

vector < uint64_t > tmp451 = make_vector<uint64_t>( (int32_t)544);
/* Variable to read the clear value corresponding to the input variable tmp451 at (3283,1-3283,37) */
uint64_t __tmp_in_tmp451;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)544; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp451;
}
tmp451[i0] = (role == SERVER) ? __tmp_in_tmp451 : 0;
}

vector < uint64_t > tmp452 = make_vector<uint64_t>( (int32_t)544);
/* Variable to read the clear value corresponding to the input variable tmp452 at (3286,1-3286,37) */
uint64_t __tmp_in_tmp452;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)544; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp452;
}
tmp452[i0] = (role == SERVER) ? __tmp_in_tmp452 : 0;
}

vector < uint64_t > tmp453 = make_vector<uint64_t>( (int32_t)544);
/* Variable to read the clear value corresponding to the input variable tmp453 at (3289,1-3289,37) */
uint64_t __tmp_in_tmp453;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)544; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp453;
}
tmp453[i0] = (role == SERVER) ? __tmp_in_tmp453 : 0;
}

vector < uint64_t > tmp454 = make_vector<uint64_t>( (int32_t)544);
/* Variable to read the clear value corresponding to the input variable tmp454 at (3292,1-3292,37) */
uint64_t __tmp_in_tmp454;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)544; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp454;
}
tmp454[i0] = (role == SERVER) ? __tmp_in_tmp454 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp455 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)544,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp455 at (3295,1-3295,48) */
uint64_t __tmp_in_tmp455;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)544; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp455;
}
tmp455[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp455 : 0;
}
}
}
}

vector < uint64_t > tmp456 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp456 at (3298,1-3298,37) */
uint64_t __tmp_in_tmp456;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp456;
}
tmp456[i0] = (role == SERVER) ? __tmp_in_tmp456 : 0;
}

vector < uint64_t > tmp457 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp457 at (3301,1-3301,37) */
uint64_t __tmp_in_tmp457;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp457;
}
tmp457[i0] = (role == SERVER) ? __tmp_in_tmp457 : 0;
}

vector < uint64_t > tmp458 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp458 at (3304,1-3304,37) */
uint64_t __tmp_in_tmp458;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp458;
}
tmp458[i0] = (role == SERVER) ? __tmp_in_tmp458 : 0;
}

vector < uint64_t > tmp459 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp459 at (3307,1-3307,37) */
uint64_t __tmp_in_tmp459;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp459;
}
tmp459[i0] = (role == SERVER) ? __tmp_in_tmp459 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp460 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp460 at (3310,1-3310,47) */
uint64_t __tmp_in_tmp460;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp460;
}
tmp460[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp460 : 0;
}
}
}
}

vector < uint64_t > tmp461 = make_vector<uint64_t>( (int32_t)576);
/* Variable to read the clear value corresponding to the input variable tmp461 at (3313,1-3313,37) */
uint64_t __tmp_in_tmp461;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)576; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp461;
}
tmp461[i0] = (role == SERVER) ? __tmp_in_tmp461 : 0;
}

vector < uint64_t > tmp462 = make_vector<uint64_t>( (int32_t)576);
/* Variable to read the clear value corresponding to the input variable tmp462 at (3316,1-3316,37) */
uint64_t __tmp_in_tmp462;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)576; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp462;
}
tmp462[i0] = (role == SERVER) ? __tmp_in_tmp462 : 0;
}

vector < uint64_t > tmp463 = make_vector<uint64_t>( (int32_t)576);
/* Variable to read the clear value corresponding to the input variable tmp463 at (3319,1-3319,37) */
uint64_t __tmp_in_tmp463;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)576; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp463;
}
tmp463[i0] = (role == SERVER) ? __tmp_in_tmp463 : 0;
}

vector < uint64_t > tmp464 = make_vector<uint64_t>( (int32_t)576);
/* Variable to read the clear value corresponding to the input variable tmp464 at (3322,1-3322,37) */
uint64_t __tmp_in_tmp464;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)576; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp464;
}
tmp464[i0] = (role == SERVER) ? __tmp_in_tmp464 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp465 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)576,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp465 at (3325,1-3325,48) */
uint64_t __tmp_in_tmp465;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)576; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp465;
}
tmp465[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp465 : 0;
}
}
}
}

vector < uint64_t > tmp466 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp466 at (3328,1-3328,37) */
uint64_t __tmp_in_tmp466;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp466;
}
tmp466[i0] = (role == SERVER) ? __tmp_in_tmp466 : 0;
}

vector < uint64_t > tmp467 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp467 at (3331,1-3331,37) */
uint64_t __tmp_in_tmp467;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp467;
}
tmp467[i0] = (role == SERVER) ? __tmp_in_tmp467 : 0;
}

vector < uint64_t > tmp468 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp468 at (3334,1-3334,37) */
uint64_t __tmp_in_tmp468;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp468;
}
tmp468[i0] = (role == SERVER) ? __tmp_in_tmp468 : 0;
}

vector < uint64_t > tmp469 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp469 at (3337,1-3337,37) */
uint64_t __tmp_in_tmp469;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp469;
}
tmp469[i0] = (role == SERVER) ? __tmp_in_tmp469 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp470 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp470 at (3340,1-3340,47) */
uint64_t __tmp_in_tmp470;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp470;
}
tmp470[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp470 : 0;
}
}
}
}

vector < uint64_t > tmp471 = make_vector<uint64_t>( (int32_t)608);
/* Variable to read the clear value corresponding to the input variable tmp471 at (3343,1-3343,37) */
uint64_t __tmp_in_tmp471;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)608; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp471;
}
tmp471[i0] = (role == SERVER) ? __tmp_in_tmp471 : 0;
}

vector < uint64_t > tmp472 = make_vector<uint64_t>( (int32_t)608);
/* Variable to read the clear value corresponding to the input variable tmp472 at (3346,1-3346,37) */
uint64_t __tmp_in_tmp472;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)608; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp472;
}
tmp472[i0] = (role == SERVER) ? __tmp_in_tmp472 : 0;
}

vector < uint64_t > tmp473 = make_vector<uint64_t>( (int32_t)608);
/* Variable to read the clear value corresponding to the input variable tmp473 at (3349,1-3349,37) */
uint64_t __tmp_in_tmp473;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)608; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp473;
}
tmp473[i0] = (role == SERVER) ? __tmp_in_tmp473 : 0;
}

vector < uint64_t > tmp474 = make_vector<uint64_t>( (int32_t)608);
/* Variable to read the clear value corresponding to the input variable tmp474 at (3352,1-3352,37) */
uint64_t __tmp_in_tmp474;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)608; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp474;
}
tmp474[i0] = (role == SERVER) ? __tmp_in_tmp474 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp475 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)608,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp475 at (3355,1-3355,48) */
uint64_t __tmp_in_tmp475;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)608; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp475;
}
tmp475[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp475 : 0;
}
}
}
}

vector < uint64_t > tmp476 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp476 at (3358,1-3358,37) */
uint64_t __tmp_in_tmp476;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp476;
}
tmp476[i0] = (role == SERVER) ? __tmp_in_tmp476 : 0;
}

vector < uint64_t > tmp477 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp477 at (3361,1-3361,37) */
uint64_t __tmp_in_tmp477;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp477;
}
tmp477[i0] = (role == SERVER) ? __tmp_in_tmp477 : 0;
}

vector < uint64_t > tmp478 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp478 at (3364,1-3364,37) */
uint64_t __tmp_in_tmp478;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp478;
}
tmp478[i0] = (role == SERVER) ? __tmp_in_tmp478 : 0;
}

vector < uint64_t > tmp479 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp479 at (3367,1-3367,37) */
uint64_t __tmp_in_tmp479;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp479;
}
tmp479[i0] = (role == SERVER) ? __tmp_in_tmp479 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp480 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp480 at (3370,1-3370,47) */
uint64_t __tmp_in_tmp480;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp480;
}
tmp480[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp480 : 0;
}
}
}
}

vector < uint64_t > tmp481 = make_vector<uint64_t>( (int32_t)640);
/* Variable to read the clear value corresponding to the input variable tmp481 at (3373,1-3373,37) */
uint64_t __tmp_in_tmp481;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)640; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp481;
}
tmp481[i0] = (role == SERVER) ? __tmp_in_tmp481 : 0;
}

vector < uint64_t > tmp482 = make_vector<uint64_t>( (int32_t)640);
/* Variable to read the clear value corresponding to the input variable tmp482 at (3376,1-3376,37) */
uint64_t __tmp_in_tmp482;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)640; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp482;
}
tmp482[i0] = (role == SERVER) ? __tmp_in_tmp482 : 0;
}

vector < uint64_t > tmp483 = make_vector<uint64_t>( (int32_t)640);
/* Variable to read the clear value corresponding to the input variable tmp483 at (3379,1-3379,37) */
uint64_t __tmp_in_tmp483;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)640; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp483;
}
tmp483[i0] = (role == SERVER) ? __tmp_in_tmp483 : 0;
}

vector < uint64_t > tmp484 = make_vector<uint64_t>( (int32_t)640);
/* Variable to read the clear value corresponding to the input variable tmp484 at (3382,1-3382,37) */
uint64_t __tmp_in_tmp484;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)640; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp484;
}
tmp484[i0] = (role == SERVER) ? __tmp_in_tmp484 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp485 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)640,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp485 at (3385,1-3385,48) */
uint64_t __tmp_in_tmp485;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)640; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp485;
}
tmp485[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp485 : 0;
}
}
}
}

vector < uint64_t > tmp486 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp486 at (3388,1-3388,37) */
uint64_t __tmp_in_tmp486;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp486;
}
tmp486[i0] = (role == SERVER) ? __tmp_in_tmp486 : 0;
}

vector < uint64_t > tmp487 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp487 at (3391,1-3391,37) */
uint64_t __tmp_in_tmp487;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp487;
}
tmp487[i0] = (role == SERVER) ? __tmp_in_tmp487 : 0;
}

vector < uint64_t > tmp488 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp488 at (3394,1-3394,37) */
uint64_t __tmp_in_tmp488;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp488;
}
tmp488[i0] = (role == SERVER) ? __tmp_in_tmp488 : 0;
}

vector < uint64_t > tmp489 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp489 at (3397,1-3397,37) */
uint64_t __tmp_in_tmp489;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp489;
}
tmp489[i0] = (role == SERVER) ? __tmp_in_tmp489 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp490 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp490 at (3400,1-3400,47) */
uint64_t __tmp_in_tmp490;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp490;
}
tmp490[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp490 : 0;
}
}
}
}

vector < uint64_t > tmp491 = make_vector<uint64_t>( (int32_t)672);
/* Variable to read the clear value corresponding to the input variable tmp491 at (3403,1-3403,37) */
uint64_t __tmp_in_tmp491;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)672; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp491;
}
tmp491[i0] = (role == SERVER) ? __tmp_in_tmp491 : 0;
}

vector < uint64_t > tmp492 = make_vector<uint64_t>( (int32_t)672);
/* Variable to read the clear value corresponding to the input variable tmp492 at (3406,1-3406,37) */
uint64_t __tmp_in_tmp492;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)672; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp492;
}
tmp492[i0] = (role == SERVER) ? __tmp_in_tmp492 : 0;
}

vector < uint64_t > tmp493 = make_vector<uint64_t>( (int32_t)672);
/* Variable to read the clear value corresponding to the input variable tmp493 at (3409,1-3409,37) */
uint64_t __tmp_in_tmp493;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)672; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp493;
}
tmp493[i0] = (role == SERVER) ? __tmp_in_tmp493 : 0;
}

vector < uint64_t > tmp494 = make_vector<uint64_t>( (int32_t)672);
/* Variable to read the clear value corresponding to the input variable tmp494 at (3412,1-3412,37) */
uint64_t __tmp_in_tmp494;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)672; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp494;
}
tmp494[i0] = (role == SERVER) ? __tmp_in_tmp494 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp495 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)672,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp495 at (3415,1-3415,48) */
uint64_t __tmp_in_tmp495;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)672; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp495;
}
tmp495[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp495 : 0;
}
}
}
}

vector < uint64_t > tmp496 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp496 at (3418,1-3418,37) */
uint64_t __tmp_in_tmp496;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp496;
}
tmp496[i0] = (role == SERVER) ? __tmp_in_tmp496 : 0;
}

vector < uint64_t > tmp497 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp497 at (3421,1-3421,37) */
uint64_t __tmp_in_tmp497;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp497;
}
tmp497[i0] = (role == SERVER) ? __tmp_in_tmp497 : 0;
}

vector < uint64_t > tmp498 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp498 at (3424,1-3424,37) */
uint64_t __tmp_in_tmp498;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp498;
}
tmp498[i0] = (role == SERVER) ? __tmp_in_tmp498 : 0;
}

vector < uint64_t > tmp499 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp499 at (3427,1-3427,37) */
uint64_t __tmp_in_tmp499;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp499;
}
tmp499[i0] = (role == SERVER) ? __tmp_in_tmp499 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp500 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp500 at (3430,1-3430,47) */
uint64_t __tmp_in_tmp500;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp500;
}
tmp500[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp500 : 0;
}
}
}
}

vector < uint64_t > tmp501 = make_vector<uint64_t>( (int32_t)704);
/* Variable to read the clear value corresponding to the input variable tmp501 at (3433,1-3433,37) */
uint64_t __tmp_in_tmp501;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)704; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp501;
}
tmp501[i0] = (role == SERVER) ? __tmp_in_tmp501 : 0;
}

vector < uint64_t > tmp502 = make_vector<uint64_t>( (int32_t)704);
/* Variable to read the clear value corresponding to the input variable tmp502 at (3436,1-3436,37) */
uint64_t __tmp_in_tmp502;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)704; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp502;
}
tmp502[i0] = (role == SERVER) ? __tmp_in_tmp502 : 0;
}

vector < uint64_t > tmp503 = make_vector<uint64_t>( (int32_t)704);
/* Variable to read the clear value corresponding to the input variable tmp503 at (3439,1-3439,37) */
uint64_t __tmp_in_tmp503;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)704; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp503;
}
tmp503[i0] = (role == SERVER) ? __tmp_in_tmp503 : 0;
}

vector < uint64_t > tmp504 = make_vector<uint64_t>( (int32_t)704);
/* Variable to read the clear value corresponding to the input variable tmp504 at (3442,1-3442,37) */
uint64_t __tmp_in_tmp504;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)704; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp504;
}
tmp504[i0] = (role == SERVER) ? __tmp_in_tmp504 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp505 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)704,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp505 at (3445,1-3445,48) */
uint64_t __tmp_in_tmp505;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)704; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp505;
}
tmp505[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp505 : 0;
}
}
}
}

vector < uint64_t > tmp506 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp506 at (3448,1-3448,37) */
uint64_t __tmp_in_tmp506;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp506;
}
tmp506[i0] = (role == SERVER) ? __tmp_in_tmp506 : 0;
}

vector < uint64_t > tmp507 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp507 at (3451,1-3451,37) */
uint64_t __tmp_in_tmp507;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp507;
}
tmp507[i0] = (role == SERVER) ? __tmp_in_tmp507 : 0;
}

vector < uint64_t > tmp508 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp508 at (3454,1-3454,37) */
uint64_t __tmp_in_tmp508;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp508;
}
tmp508[i0] = (role == SERVER) ? __tmp_in_tmp508 : 0;
}

vector < uint64_t > tmp509 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp509 at (3457,1-3457,37) */
uint64_t __tmp_in_tmp509;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp509;
}
tmp509[i0] = (role == SERVER) ? __tmp_in_tmp509 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp510 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp510 at (3460,1-3460,47) */
uint64_t __tmp_in_tmp510;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp510;
}
tmp510[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp510 : 0;
}
}
}
}

vector < uint64_t > tmp511 = make_vector<uint64_t>( (int32_t)736);
/* Variable to read the clear value corresponding to the input variable tmp511 at (3463,1-3463,37) */
uint64_t __tmp_in_tmp511;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)736; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp511;
}
tmp511[i0] = (role == SERVER) ? __tmp_in_tmp511 : 0;
}

vector < uint64_t > tmp512 = make_vector<uint64_t>( (int32_t)736);
/* Variable to read the clear value corresponding to the input variable tmp512 at (3466,1-3466,37) */
uint64_t __tmp_in_tmp512;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)736; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp512;
}
tmp512[i0] = (role == SERVER) ? __tmp_in_tmp512 : 0;
}

vector < uint64_t > tmp513 = make_vector<uint64_t>( (int32_t)736);
/* Variable to read the clear value corresponding to the input variable tmp513 at (3469,1-3469,37) */
uint64_t __tmp_in_tmp513;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)736; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp513;
}
tmp513[i0] = (role == SERVER) ? __tmp_in_tmp513 : 0;
}

vector < uint64_t > tmp514 = make_vector<uint64_t>( (int32_t)736);
/* Variable to read the clear value corresponding to the input variable tmp514 at (3472,1-3472,37) */
uint64_t __tmp_in_tmp514;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)736; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp514;
}
tmp514[i0] = (role == SERVER) ? __tmp_in_tmp514 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp515 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)736,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp515 at (3475,1-3475,48) */
uint64_t __tmp_in_tmp515;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)736; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp515;
}
tmp515[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp515 : 0;
}
}
}
}

vector < uint64_t > tmp516 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp516 at (3478,1-3478,37) */
uint64_t __tmp_in_tmp516;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp516;
}
tmp516[i0] = (role == SERVER) ? __tmp_in_tmp516 : 0;
}

vector < uint64_t > tmp517 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp517 at (3481,1-3481,37) */
uint64_t __tmp_in_tmp517;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp517;
}
tmp517[i0] = (role == SERVER) ? __tmp_in_tmp517 : 0;
}

vector < uint64_t > tmp518 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp518 at (3484,1-3484,37) */
uint64_t __tmp_in_tmp518;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp518;
}
tmp518[i0] = (role == SERVER) ? __tmp_in_tmp518 : 0;
}

vector < uint64_t > tmp519 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp519 at (3487,1-3487,37) */
uint64_t __tmp_in_tmp519;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp519;
}
tmp519[i0] = (role == SERVER) ? __tmp_in_tmp519 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp520 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp520 at (3490,1-3490,47) */
uint64_t __tmp_in_tmp520;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp520;
}
tmp520[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp520 : 0;
}
}
}
}

vector < uint64_t > tmp521 = make_vector<uint64_t>( (int32_t)768);
/* Variable to read the clear value corresponding to the input variable tmp521 at (3493,1-3493,37) */
uint64_t __tmp_in_tmp521;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)768; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp521;
}
tmp521[i0] = (role == SERVER) ? __tmp_in_tmp521 : 0;
}

vector < uint64_t > tmp522 = make_vector<uint64_t>( (int32_t)768);
/* Variable to read the clear value corresponding to the input variable tmp522 at (3496,1-3496,37) */
uint64_t __tmp_in_tmp522;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)768; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp522;
}
tmp522[i0] = (role == SERVER) ? __tmp_in_tmp522 : 0;
}

vector < uint64_t > tmp523 = make_vector<uint64_t>( (int32_t)768);
/* Variable to read the clear value corresponding to the input variable tmp523 at (3499,1-3499,37) */
uint64_t __tmp_in_tmp523;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)768; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp523;
}
tmp523[i0] = (role == SERVER) ? __tmp_in_tmp523 : 0;
}

vector < uint64_t > tmp524 = make_vector<uint64_t>( (int32_t)768);
/* Variable to read the clear value corresponding to the input variable tmp524 at (3502,1-3502,37) */
uint64_t __tmp_in_tmp524;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)768; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp524;
}
tmp524[i0] = (role == SERVER) ? __tmp_in_tmp524 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp525 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)768,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp525 at (3505,1-3505,48) */
uint64_t __tmp_in_tmp525;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)768; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp525;
}
tmp525[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp525 : 0;
}
}
}
}

vector < uint64_t > tmp526 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp526 at (3508,1-3508,37) */
uint64_t __tmp_in_tmp526;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp526;
}
tmp526[i0] = (role == SERVER) ? __tmp_in_tmp526 : 0;
}

vector < uint64_t > tmp527 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp527 at (3511,1-3511,37) */
uint64_t __tmp_in_tmp527;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp527;
}
tmp527[i0] = (role == SERVER) ? __tmp_in_tmp527 : 0;
}

vector < uint64_t > tmp528 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp528 at (3514,1-3514,37) */
uint64_t __tmp_in_tmp528;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp528;
}
tmp528[i0] = (role == SERVER) ? __tmp_in_tmp528 : 0;
}

vector < uint64_t > tmp529 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp529 at (3517,1-3517,37) */
uint64_t __tmp_in_tmp529;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp529;
}
tmp529[i0] = (role == SERVER) ? __tmp_in_tmp529 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp530 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp530 at (3520,1-3520,47) */
uint64_t __tmp_in_tmp530;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp530;
}
tmp530[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp530 : 0;
}
}
}
}

vector < uint64_t > tmp531 = make_vector<uint64_t>( (int32_t)800);
/* Variable to read the clear value corresponding to the input variable tmp531 at (3523,1-3523,37) */
uint64_t __tmp_in_tmp531;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)800; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp531;
}
tmp531[i0] = (role == SERVER) ? __tmp_in_tmp531 : 0;
}

vector < uint64_t > tmp532 = make_vector<uint64_t>( (int32_t)800);
/* Variable to read the clear value corresponding to the input variable tmp532 at (3526,1-3526,37) */
uint64_t __tmp_in_tmp532;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)800; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp532;
}
tmp532[i0] = (role == SERVER) ? __tmp_in_tmp532 : 0;
}

vector < uint64_t > tmp533 = make_vector<uint64_t>( (int32_t)800);
/* Variable to read the clear value corresponding to the input variable tmp533 at (3529,1-3529,37) */
uint64_t __tmp_in_tmp533;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)800; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp533;
}
tmp533[i0] = (role == SERVER) ? __tmp_in_tmp533 : 0;
}

vector < uint64_t > tmp534 = make_vector<uint64_t>( (int32_t)800);
/* Variable to read the clear value corresponding to the input variable tmp534 at (3532,1-3532,37) */
uint64_t __tmp_in_tmp534;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)800; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp534;
}
tmp534[i0] = (role == SERVER) ? __tmp_in_tmp534 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp535 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)800,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp535 at (3535,1-3535,48) */
uint64_t __tmp_in_tmp535;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)800; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp535;
}
tmp535[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp535 : 0;
}
}
}
}

vector < uint64_t > tmp536 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp536 at (3538,1-3538,37) */
uint64_t __tmp_in_tmp536;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp536;
}
tmp536[i0] = (role == SERVER) ? __tmp_in_tmp536 : 0;
}

vector < uint64_t > tmp537 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp537 at (3541,1-3541,37) */
uint64_t __tmp_in_tmp537;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp537;
}
tmp537[i0] = (role == SERVER) ? __tmp_in_tmp537 : 0;
}

vector < uint64_t > tmp538 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp538 at (3544,1-3544,37) */
uint64_t __tmp_in_tmp538;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp538;
}
tmp538[i0] = (role == SERVER) ? __tmp_in_tmp538 : 0;
}

vector < uint64_t > tmp539 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp539 at (3547,1-3547,37) */
uint64_t __tmp_in_tmp539;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp539;
}
tmp539[i0] = (role == SERVER) ? __tmp_in_tmp539 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp540 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp540 at (3550,1-3550,47) */
uint64_t __tmp_in_tmp540;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp540;
}
tmp540[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp540 : 0;
}
}
}
}

vector < uint64_t > tmp541 = make_vector<uint64_t>( (int32_t)832);
/* Variable to read the clear value corresponding to the input variable tmp541 at (3553,1-3553,37) */
uint64_t __tmp_in_tmp541;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)832; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp541;
}
tmp541[i0] = (role == SERVER) ? __tmp_in_tmp541 : 0;
}

vector < uint64_t > tmp542 = make_vector<uint64_t>( (int32_t)832);
/* Variable to read the clear value corresponding to the input variable tmp542 at (3556,1-3556,37) */
uint64_t __tmp_in_tmp542;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)832; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp542;
}
tmp542[i0] = (role == SERVER) ? __tmp_in_tmp542 : 0;
}

vector < uint64_t > tmp543 = make_vector<uint64_t>( (int32_t)832);
/* Variable to read the clear value corresponding to the input variable tmp543 at (3559,1-3559,37) */
uint64_t __tmp_in_tmp543;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)832; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp543;
}
tmp543[i0] = (role == SERVER) ? __tmp_in_tmp543 : 0;
}

vector < uint64_t > tmp544 = make_vector<uint64_t>( (int32_t)832);
/* Variable to read the clear value corresponding to the input variable tmp544 at (3562,1-3562,37) */
uint64_t __tmp_in_tmp544;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)832; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp544;
}
tmp544[i0] = (role == SERVER) ? __tmp_in_tmp544 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp545 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)832,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp545 at (3565,1-3565,48) */
uint64_t __tmp_in_tmp545;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)832; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp545;
}
tmp545[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp545 : 0;
}
}
}
}

vector < uint64_t > tmp546 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp546 at (3568,1-3568,37) */
uint64_t __tmp_in_tmp546;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp546;
}
tmp546[i0] = (role == SERVER) ? __tmp_in_tmp546 : 0;
}

vector < uint64_t > tmp547 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp547 at (3571,1-3571,37) */
uint64_t __tmp_in_tmp547;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp547;
}
tmp547[i0] = (role == SERVER) ? __tmp_in_tmp547 : 0;
}

vector < uint64_t > tmp548 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp548 at (3574,1-3574,37) */
uint64_t __tmp_in_tmp548;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp548;
}
tmp548[i0] = (role == SERVER) ? __tmp_in_tmp548 : 0;
}

vector < uint64_t > tmp549 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp549 at (3577,1-3577,37) */
uint64_t __tmp_in_tmp549;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp549;
}
tmp549[i0] = (role == SERVER) ? __tmp_in_tmp549 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp550 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp550 at (3580,1-3580,47) */
uint64_t __tmp_in_tmp550;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp550;
}
tmp550[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp550 : 0;
}
}
}
}

vector < uint64_t > tmp551 = make_vector<uint64_t>( (int32_t)864);
/* Variable to read the clear value corresponding to the input variable tmp551 at (3583,1-3583,37) */
uint64_t __tmp_in_tmp551;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)864; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp551;
}
tmp551[i0] = (role == SERVER) ? __tmp_in_tmp551 : 0;
}

vector < uint64_t > tmp552 = make_vector<uint64_t>( (int32_t)864);
/* Variable to read the clear value corresponding to the input variable tmp552 at (3586,1-3586,37) */
uint64_t __tmp_in_tmp552;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)864; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp552;
}
tmp552[i0] = (role == SERVER) ? __tmp_in_tmp552 : 0;
}

vector < uint64_t > tmp553 = make_vector<uint64_t>( (int32_t)864);
/* Variable to read the clear value corresponding to the input variable tmp553 at (3589,1-3589,37) */
uint64_t __tmp_in_tmp553;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)864; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp553;
}
tmp553[i0] = (role == SERVER) ? __tmp_in_tmp553 : 0;
}

vector < uint64_t > tmp554 = make_vector<uint64_t>( (int32_t)864);
/* Variable to read the clear value corresponding to the input variable tmp554 at (3592,1-3592,37) */
uint64_t __tmp_in_tmp554;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)864; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp554;
}
tmp554[i0] = (role == SERVER) ? __tmp_in_tmp554 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp555 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)864,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp555 at (3595,1-3595,48) */
uint64_t __tmp_in_tmp555;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)864; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp555;
}
tmp555[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp555 : 0;
}
}
}
}

vector < uint64_t > tmp556 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp556 at (3598,1-3598,37) */
uint64_t __tmp_in_tmp556;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp556;
}
tmp556[i0] = (role == SERVER) ? __tmp_in_tmp556 : 0;
}

vector < uint64_t > tmp557 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp557 at (3601,1-3601,37) */
uint64_t __tmp_in_tmp557;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp557;
}
tmp557[i0] = (role == SERVER) ? __tmp_in_tmp557 : 0;
}

vector < uint64_t > tmp558 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp558 at (3604,1-3604,37) */
uint64_t __tmp_in_tmp558;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp558;
}
tmp558[i0] = (role == SERVER) ? __tmp_in_tmp558 : 0;
}

vector < uint64_t > tmp559 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp559 at (3607,1-3607,37) */
uint64_t __tmp_in_tmp559;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp559;
}
tmp559[i0] = (role == SERVER) ? __tmp_in_tmp559 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp560 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp560 at (3610,1-3610,47) */
uint64_t __tmp_in_tmp560;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp560;
}
tmp560[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp560 : 0;
}
}
}
}

vector < uint64_t > tmp561 = make_vector<uint64_t>( (int32_t)896);
/* Variable to read the clear value corresponding to the input variable tmp561 at (3613,1-3613,37) */
uint64_t __tmp_in_tmp561;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)896; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp561;
}
tmp561[i0] = (role == SERVER) ? __tmp_in_tmp561 : 0;
}

vector < uint64_t > tmp562 = make_vector<uint64_t>( (int32_t)896);
/* Variable to read the clear value corresponding to the input variable tmp562 at (3616,1-3616,37) */
uint64_t __tmp_in_tmp562;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)896; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp562;
}
tmp562[i0] = (role == SERVER) ? __tmp_in_tmp562 : 0;
}

vector < uint64_t > tmp563 = make_vector<uint64_t>( (int32_t)896);
/* Variable to read the clear value corresponding to the input variable tmp563 at (3619,1-3619,37) */
uint64_t __tmp_in_tmp563;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)896; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp563;
}
tmp563[i0] = (role == SERVER) ? __tmp_in_tmp563 : 0;
}

vector < uint64_t > tmp564 = make_vector<uint64_t>( (int32_t)896);
/* Variable to read the clear value corresponding to the input variable tmp564 at (3622,1-3622,37) */
uint64_t __tmp_in_tmp564;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)896; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp564;
}
tmp564[i0] = (role == SERVER) ? __tmp_in_tmp564 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp565 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)896,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp565 at (3625,1-3625,48) */
uint64_t __tmp_in_tmp565;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)896; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp565;
}
tmp565[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp565 : 0;
}
}
}
}

vector < uint64_t > tmp566 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp566 at (3628,1-3628,37) */
uint64_t __tmp_in_tmp566;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp566;
}
tmp566[i0] = (role == SERVER) ? __tmp_in_tmp566 : 0;
}

vector < uint64_t > tmp567 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp567 at (3631,1-3631,37) */
uint64_t __tmp_in_tmp567;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp567;
}
tmp567[i0] = (role == SERVER) ? __tmp_in_tmp567 : 0;
}

vector < uint64_t > tmp568 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp568 at (3634,1-3634,37) */
uint64_t __tmp_in_tmp568;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp568;
}
tmp568[i0] = (role == SERVER) ? __tmp_in_tmp568 : 0;
}

vector < uint64_t > tmp569 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp569 at (3637,1-3637,37) */
uint64_t __tmp_in_tmp569;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp569;
}
tmp569[i0] = (role == SERVER) ? __tmp_in_tmp569 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp570 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp570 at (3640,1-3640,47) */
uint64_t __tmp_in_tmp570;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp570;
}
tmp570[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp570 : 0;
}
}
}
}

vector < uint64_t > tmp571 = make_vector<uint64_t>( (int32_t)928);
/* Variable to read the clear value corresponding to the input variable tmp571 at (3643,1-3643,37) */
uint64_t __tmp_in_tmp571;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)928; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp571;
}
tmp571[i0] = (role == SERVER) ? __tmp_in_tmp571 : 0;
}

vector < uint64_t > tmp572 = make_vector<uint64_t>( (int32_t)928);
/* Variable to read the clear value corresponding to the input variable tmp572 at (3646,1-3646,37) */
uint64_t __tmp_in_tmp572;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)928; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp572;
}
tmp572[i0] = (role == SERVER) ? __tmp_in_tmp572 : 0;
}

vector < uint64_t > tmp573 = make_vector<uint64_t>( (int32_t)928);
/* Variable to read the clear value corresponding to the input variable tmp573 at (3649,1-3649,37) */
uint64_t __tmp_in_tmp573;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)928; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp573;
}
tmp573[i0] = (role == SERVER) ? __tmp_in_tmp573 : 0;
}

vector < uint64_t > tmp574 = make_vector<uint64_t>( (int32_t)928);
/* Variable to read the clear value corresponding to the input variable tmp574 at (3652,1-3652,37) */
uint64_t __tmp_in_tmp574;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)928; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp574;
}
tmp574[i0] = (role == SERVER) ? __tmp_in_tmp574 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp575 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)928,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp575 at (3655,1-3655,48) */
uint64_t __tmp_in_tmp575;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)928; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp575;
}
tmp575[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp575 : 0;
}
}
}
}

vector < uint64_t > tmp576 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp576 at (3658,1-3658,37) */
uint64_t __tmp_in_tmp576;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp576;
}
tmp576[i0] = (role == SERVER) ? __tmp_in_tmp576 : 0;
}

vector < uint64_t > tmp577 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp577 at (3661,1-3661,37) */
uint64_t __tmp_in_tmp577;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp577;
}
tmp577[i0] = (role == SERVER) ? __tmp_in_tmp577 : 0;
}

vector < uint64_t > tmp578 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp578 at (3664,1-3664,37) */
uint64_t __tmp_in_tmp578;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp578;
}
tmp578[i0] = (role == SERVER) ? __tmp_in_tmp578 : 0;
}

vector < uint64_t > tmp579 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp579 at (3667,1-3667,37) */
uint64_t __tmp_in_tmp579;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp579;
}
tmp579[i0] = (role == SERVER) ? __tmp_in_tmp579 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp580 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp580 at (3670,1-3670,47) */
uint64_t __tmp_in_tmp580;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp580;
}
tmp580[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp580 : 0;
}
}
}
}

vector < uint64_t > tmp581 = make_vector<uint64_t>( (int32_t)960);
/* Variable to read the clear value corresponding to the input variable tmp581 at (3673,1-3673,37) */
uint64_t __tmp_in_tmp581;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)960; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp581;
}
tmp581[i0] = (role == SERVER) ? __tmp_in_tmp581 : 0;
}

vector < uint64_t > tmp582 = make_vector<uint64_t>( (int32_t)960);
/* Variable to read the clear value corresponding to the input variable tmp582 at (3676,1-3676,37) */
uint64_t __tmp_in_tmp582;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)960; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp582;
}
tmp582[i0] = (role == SERVER) ? __tmp_in_tmp582 : 0;
}

vector < uint64_t > tmp583 = make_vector<uint64_t>( (int32_t)960);
/* Variable to read the clear value corresponding to the input variable tmp583 at (3679,1-3679,37) */
uint64_t __tmp_in_tmp583;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)960; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp583;
}
tmp583[i0] = (role == SERVER) ? __tmp_in_tmp583 : 0;
}

vector < uint64_t > tmp584 = make_vector<uint64_t>( (int32_t)960);
/* Variable to read the clear value corresponding to the input variable tmp584 at (3682,1-3682,37) */
uint64_t __tmp_in_tmp584;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)960; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp584;
}
tmp584[i0] = (role == SERVER) ? __tmp_in_tmp584 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp585 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)960,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp585 at (3685,1-3685,48) */
uint64_t __tmp_in_tmp585;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)960; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp585;
}
tmp585[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp585 : 0;
}
}
}
}

vector < uint64_t > tmp586 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp586 at (3688,1-3688,37) */
uint64_t __tmp_in_tmp586;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp586;
}
tmp586[i0] = (role == SERVER) ? __tmp_in_tmp586 : 0;
}

vector < uint64_t > tmp587 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp587 at (3691,1-3691,37) */
uint64_t __tmp_in_tmp587;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp587;
}
tmp587[i0] = (role == SERVER) ? __tmp_in_tmp587 : 0;
}

vector < uint64_t > tmp588 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp588 at (3694,1-3694,37) */
uint64_t __tmp_in_tmp588;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp588;
}
tmp588[i0] = (role == SERVER) ? __tmp_in_tmp588 : 0;
}

vector < uint64_t > tmp589 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp589 at (3697,1-3697,37) */
uint64_t __tmp_in_tmp589;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp589;
}
tmp589[i0] = (role == SERVER) ? __tmp_in_tmp589 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp590 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp590 at (3700,1-3700,47) */
uint64_t __tmp_in_tmp590;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp590;
}
tmp590[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp590 : 0;
}
}
}
}

vector < uint64_t > tmp591 = make_vector<uint64_t>( (int32_t)992);
/* Variable to read the clear value corresponding to the input variable tmp591 at (3703,1-3703,37) */
uint64_t __tmp_in_tmp591;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)992; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp591;
}
tmp591[i0] = (role == SERVER) ? __tmp_in_tmp591 : 0;
}

vector < uint64_t > tmp592 = make_vector<uint64_t>( (int32_t)992);
/* Variable to read the clear value corresponding to the input variable tmp592 at (3706,1-3706,37) */
uint64_t __tmp_in_tmp592;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)992; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp592;
}
tmp592[i0] = (role == SERVER) ? __tmp_in_tmp592 : 0;
}

vector < uint64_t > tmp593 = make_vector<uint64_t>( (int32_t)992);
/* Variable to read the clear value corresponding to the input variable tmp593 at (3709,1-3709,37) */
uint64_t __tmp_in_tmp593;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)992; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp593;
}
tmp593[i0] = (role == SERVER) ? __tmp_in_tmp593 : 0;
}

vector < uint64_t > tmp594 = make_vector<uint64_t>( (int32_t)992);
/* Variable to read the clear value corresponding to the input variable tmp594 at (3712,1-3712,37) */
uint64_t __tmp_in_tmp594;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)992; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp594;
}
tmp594[i0] = (role == SERVER) ? __tmp_in_tmp594 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp595 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)992,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp595 at (3715,1-3715,48) */
uint64_t __tmp_in_tmp595;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)992; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp595;
}
tmp595[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp595 : 0;
}
}
}
}

vector < uint64_t > tmp596 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp596 at (3718,1-3718,37) */
uint64_t __tmp_in_tmp596;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp596;
}
tmp596[i0] = (role == SERVER) ? __tmp_in_tmp596 : 0;
}

vector < uint64_t > tmp597 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp597 at (3721,1-3721,37) */
uint64_t __tmp_in_tmp597;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp597;
}
tmp597[i0] = (role == SERVER) ? __tmp_in_tmp597 : 0;
}

vector < uint64_t > tmp598 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp598 at (3724,1-3724,37) */
uint64_t __tmp_in_tmp598;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp598;
}
tmp598[i0] = (role == SERVER) ? __tmp_in_tmp598 : 0;
}

vector < uint64_t > tmp599 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp599 at (3727,1-3727,37) */
uint64_t __tmp_in_tmp599;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp599;
}
tmp599[i0] = (role == SERVER) ? __tmp_in_tmp599 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp600 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp600 at (3730,1-3730,47) */
uint64_t __tmp_in_tmp600;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp600;
}
tmp600[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp600 : 0;
}
}
}
}

vector < uint64_t > tmp601 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp601 at (3733,1-3733,38) */
uint64_t __tmp_in_tmp601;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp601;
}
tmp601[i0] = (role == SERVER) ? __tmp_in_tmp601 : 0;
}

vector < uint64_t > tmp602 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp602 at (3736,1-3736,38) */
uint64_t __tmp_in_tmp602;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp602;
}
tmp602[i0] = (role == SERVER) ? __tmp_in_tmp602 : 0;
}

vector < uint64_t > tmp603 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp603 at (3739,1-3739,38) */
uint64_t __tmp_in_tmp603;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp603;
}
tmp603[i0] = (role == SERVER) ? __tmp_in_tmp603 : 0;
}

vector < uint64_t > tmp604 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp604 at (3742,1-3742,38) */
uint64_t __tmp_in_tmp604;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp604;
}
tmp604[i0] = (role == SERVER) ? __tmp_in_tmp604 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp605 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)1000);
/* Variable to read the clear value corresponding to the input variable tmp605 at (3745,1-3745,50) */
uint64_t __tmp_in_tmp605;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1024; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1000; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp605;
}
tmp605[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp605 : 0;
}
}
}
}

vector < uint64_t > tmp606 = make_vector<uint64_t>( (int32_t)1000);
/* Variable to read the clear value corresponding to the input variable tmp606 at (3748,1-3748,38) */
uint64_t __tmp_in_tmp606;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1000; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp606;
}
tmp606[i0] = (role == SERVER) ? __tmp_in_tmp606 : 0;
}
StartComputation();

vector < vector < vector < vector < uint64_t > > > > tmp607 = make_vector<uint64_t>( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)64);
Conv2DWrapper( (int32_t)1,  (int32_t)224,  (int32_t)224,  (int32_t)3,  (int32_t)7,  (int32_t)7,  (int32_t)64,  (int32_t)2,  (int32_t)3,  (int32_t)2,  (int32_t)3,  (int32_t)2,  (int32_t)2, tmp0, tmp1, tmp607);
ClearMemSecret4( (int32_t)1,  (int32_t)224,  (int32_t)224,  (int32_t)3, tmp0);
ClearMemSecret4( (int32_t)7,  (int32_t)7,  (int32_t)3,  (int32_t)64, tmp1);

vector < vector < vector < vector < uint64_t > > > > tmp610 = make_vector<uint64_t>( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)64);
ScaleDown4( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)64, tmp607,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)64, tmp607, tmp2, tmp3,  (int32_t)0,  (int32_t)11, tmp610);
ClearMemSecret1( (int32_t)64, tmp3);
ClearMemSecret1( (int32_t)64, tmp2);
ClearMemSecret4( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)64, tmp607);

vector < vector < vector < vector < uint64_t > > > > tmp614 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
MaxPool( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64,  (int32_t)3,  (int32_t)3,  (int32_t)0,  (int32_t)1,  (int32_t)0,  (int32_t)1,  (int32_t)2,  (int32_t)2,  (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)64, tmp610, tmp614);
ClearMemSecret4( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)64, tmp610);

vector < vector < vector < vector < uint64_t > > > > tmp616 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp614, tmp616,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp614);

vector < vector < vector < vector < uint64_t > > > > tmp618 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
FusedBatchNorm4411( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp616, tmp6, tmp7,  (int32_t)0,  (int32_t)11, tmp618);
ClearMemSecret1( (int32_t)64, tmp6);
ClearMemSecret1( (int32_t)64, tmp7);

vector < vector < vector < vector < uint64_t > > > > tmp621 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp618, tmp621,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp618);

vector < vector < vector < vector < uint64_t > > > > tmp623 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp621, tmp10, tmp623);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)128, tmp10);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp621);

vector < vector < vector < vector < uint64_t > > > > tmp626 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp623,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp623, tmp11, tmp12,  (int32_t)0,  (int32_t)11, tmp626);
ClearMemSecret1( (int32_t)128, tmp12);
ClearMemSecret1( (int32_t)128, tmp11);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp623);

vector < vector < vector < vector < uint64_t > > > > tmp630 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp626, tmp630,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp626);

vector < vector < vector < vector < uint64_t > > > > tmp632 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp630, tmp15, tmp632);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp630);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp15);

int32_t tmp635 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp636 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)96);
ScaleDown4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32, tmp632,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)96,  (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp616,  (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32, tmp632, tmp635, tmp636);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32, tmp632);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp616);
ClearMemPublic(tmp635);

vector < vector < vector < vector < uint64_t > > > > tmp640 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)96);
FusedBatchNorm4411( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)96, tmp636, tmp16, tmp17,  (int32_t)0,  (int32_t)11, tmp640);
ClearMemSecret1( (int32_t)96, tmp17);
ClearMemSecret1( (int32_t)96, tmp16);

vector < vector < vector < vector < uint64_t > > > > tmp643 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)96);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)96, tmp640, tmp643,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)96, tmp640);

vector < vector < vector < vector < uint64_t > > > > tmp645 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)96,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp643, tmp20, tmp645);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)96,  (int32_t)128, tmp20);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)96, tmp643);

vector < vector < vector < vector < uint64_t > > > > tmp648 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp645,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp645, tmp21, tmp22,  (int32_t)0,  (int32_t)11, tmp648);
ClearMemSecret1( (int32_t)128, tmp22);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp645);
ClearMemSecret1( (int32_t)128, tmp21);

vector < vector < vector < vector < uint64_t > > > > tmp652 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp648, tmp652,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp648);

vector < vector < vector < vector < uint64_t > > > > tmp654 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp652, tmp25, tmp654);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp25);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp652);

int32_t tmp657 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp658 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32, tmp654,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128,  (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)96, tmp636,  (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32, tmp654, tmp657, tmp658);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32, tmp654);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)96, tmp636);
ClearMemPublic(tmp657);

vector < vector < vector < vector < uint64_t > > > > tmp662 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
FusedBatchNorm4411( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp658, tmp26, tmp27,  (int32_t)0,  (int32_t)11, tmp662);
ClearMemSecret1( (int32_t)128, tmp27);
ClearMemSecret1( (int32_t)128, tmp26);

vector < vector < vector < vector < uint64_t > > > > tmp665 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp662, tmp665,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp662);

vector < vector < vector < vector < uint64_t > > > > tmp667 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp665, tmp30, tmp667);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)128, tmp30);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp665);

vector < vector < vector < vector < uint64_t > > > > tmp670 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp667,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp667, tmp31, tmp32,  (int32_t)0,  (int32_t)11, tmp670);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp667);
ClearMemSecret1( (int32_t)128, tmp31);
ClearMemSecret1( (int32_t)128, tmp32);

vector < vector < vector < vector < uint64_t > > > > tmp674 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp670, tmp674,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp670);

vector < vector < vector < vector < uint64_t > > > > tmp676 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp674, tmp35, tmp676);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp35);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp674);

int32_t tmp679 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp680 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)160);
ScaleDown4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32, tmp676,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)160,  (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp658,  (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32, tmp676, tmp679, tmp680);
ClearMemPublic(tmp679);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32, tmp676);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp658);

vector < vector < vector < vector < uint64_t > > > > tmp684 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)160);
FusedBatchNorm4411( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)160, tmp680, tmp36, tmp37,  (int32_t)0,  (int32_t)11, tmp684);
ClearMemSecret1( (int32_t)160, tmp36);
ClearMemSecret1( (int32_t)160, tmp37);

vector < vector < vector < vector < uint64_t > > > > tmp687 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)160);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)160, tmp684, tmp687,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)160, tmp684);

vector < vector < vector < vector < uint64_t > > > > tmp689 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)160,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp687, tmp40, tmp689);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)160, tmp687);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)160,  (int32_t)128, tmp40);

vector < vector < vector < vector < uint64_t > > > > tmp692 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp689,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp689, tmp41, tmp42,  (int32_t)0,  (int32_t)11, tmp692);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp689);
ClearMemSecret1( (int32_t)128, tmp41);
ClearMemSecret1( (int32_t)128, tmp42);

vector < vector < vector < vector < uint64_t > > > > tmp696 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp692, tmp696,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp692);

vector < vector < vector < vector < uint64_t > > > > tmp698 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp696, tmp45, tmp698);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp696);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp45);

int32_t tmp701 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp702 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)192);
ScaleDown4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32, tmp698,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)192,  (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)160, tmp680,  (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32, tmp698, tmp701, tmp702);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32, tmp698);
ClearMemPublic(tmp701);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)160, tmp680);

vector < vector < vector < vector < uint64_t > > > > tmp706 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)192);
FusedBatchNorm4411( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)192, tmp702, tmp46, tmp47,  (int32_t)0,  (int32_t)11, tmp706);
ClearMemSecret1( (int32_t)192, tmp47);
ClearMemSecret1( (int32_t)192, tmp46);

vector < vector < vector < vector < uint64_t > > > > tmp709 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)192);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)192, tmp706, tmp709,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)192, tmp706);

vector < vector < vector < vector < uint64_t > > > > tmp711 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)192,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp709, tmp50, tmp711);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)192,  (int32_t)128, tmp50);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)192, tmp709);

vector < vector < vector < vector < uint64_t > > > > tmp714 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp711,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp711, tmp51, tmp52,  (int32_t)0,  (int32_t)11, tmp714);
ClearMemSecret1( (int32_t)128, tmp51);
ClearMemSecret1( (int32_t)128, tmp52);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp711);

vector < vector < vector < vector < uint64_t > > > > tmp718 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp714, tmp718,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp714);

vector < vector < vector < vector < uint64_t > > > > tmp720 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp718, tmp55, tmp720);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp55);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp718);

int32_t tmp723 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp724 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)224);
ScaleDown4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32, tmp720,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)224,  (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)192, tmp702,  (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32, tmp720, tmp723, tmp724);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)192, tmp702);
ClearMemPublic(tmp723);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32, tmp720);

vector < vector < vector < vector < uint64_t > > > > tmp728 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)224);
FusedBatchNorm4411( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)224, tmp724, tmp56, tmp57,  (int32_t)0,  (int32_t)11, tmp728);
ClearMemSecret1( (int32_t)224, tmp57);
ClearMemSecret1( (int32_t)224, tmp56);

vector < vector < vector < vector < uint64_t > > > > tmp731 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)224);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)224, tmp728, tmp731,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)224, tmp728);

vector < vector < vector < vector < uint64_t > > > > tmp733 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)224,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp731, tmp60, tmp733);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)224,  (int32_t)128, tmp60);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)224, tmp731);

vector < vector < vector < vector < uint64_t > > > > tmp736 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp733,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp733, tmp61, tmp62,  (int32_t)0,  (int32_t)11, tmp736);
ClearMemSecret1( (int32_t)128, tmp61);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp733);
ClearMemSecret1( (int32_t)128, tmp62);

vector < vector < vector < vector < uint64_t > > > > tmp740 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp736, tmp740,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp736);

vector < vector < vector < vector < uint64_t > > > > tmp742 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp740, tmp65, tmp742);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp65);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp740);

int32_t tmp745 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp746 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256);
ScaleDown4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32, tmp742,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256,  (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)224, tmp724,  (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32, tmp742, tmp745, tmp746);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)224, tmp724);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32, tmp742);
ClearMemPublic(tmp745);

vector < vector < vector < vector < uint64_t > > > > tmp750 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256);
FusedBatchNorm4411( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256, tmp746, tmp66, tmp67,  (int32_t)0,  (int32_t)11, tmp750);
ClearMemSecret1( (int32_t)256, tmp67);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256, tmp746);
ClearMemSecret1( (int32_t)256, tmp66);

vector < vector < vector < vector < uint64_t > > > > tmp754 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256, tmp750, tmp754,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256, tmp750);

vector < vector < vector < vector < uint64_t > > > > tmp756 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp754, tmp70, tmp756);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256, tmp754);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)128, tmp70);

vector < vector < vector < vector < uint64_t > > > > tmp759 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
AvgPool( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128,  (int32_t)2,  (int32_t)2,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)2,  (int32_t)2,  (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp756, tmp759);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp756);

vector < vector < vector < vector < uint64_t > > > > tmp761 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp759,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp759, tmp71, tmp72,  (int32_t)0,  (int32_t)11, tmp761);
ClearMemSecret1( (int32_t)128, tmp71);
ClearMemSecret1( (int32_t)128, tmp72);

vector < vector < vector < vector < uint64_t > > > > tmp764 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp761, tmp764,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp761);

vector < vector < vector < vector < uint64_t > > > > tmp766 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp764, tmp75, tmp766);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp764);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)128, tmp75);

vector < vector < vector < vector < uint64_t > > > > tmp769 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp766,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp766, tmp76, tmp77,  (int32_t)0,  (int32_t)11, tmp769);
ClearMemSecret1( (int32_t)128, tmp76);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp766);
ClearMemSecret1( (int32_t)128, tmp77);

vector < vector < vector < vector < uint64_t > > > > tmp773 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp769, tmp773,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp769);

vector < vector < vector < vector < uint64_t > > > > tmp775 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp773, tmp80, tmp775);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp773);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp80);

int32_t tmp778 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp779 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)160);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp775,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)160,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp759,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp775, tmp778, tmp779);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp775);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp759);
ClearMemPublic(tmp778);

vector < vector < vector < vector < uint64_t > > > > tmp783 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)160);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)160, tmp779, tmp81, tmp82,  (int32_t)0,  (int32_t)11, tmp783);
ClearMemSecret1( (int32_t)160, tmp82);
ClearMemSecret1( (int32_t)160, tmp81);

vector < vector < vector < vector < uint64_t > > > > tmp786 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)160);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)160, tmp783, tmp786,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)160, tmp783);

vector < vector < vector < vector < uint64_t > > > > tmp788 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)160,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp786, tmp85, tmp788);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)160,  (int32_t)128, tmp85);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)160, tmp786);

vector < vector < vector < vector < uint64_t > > > > tmp791 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp788,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp788, tmp86, tmp87,  (int32_t)0,  (int32_t)11, tmp791);
ClearMemSecret1( (int32_t)128, tmp87);
ClearMemSecret1( (int32_t)128, tmp86);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp788);

vector < vector < vector < vector < uint64_t > > > > tmp795 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp791, tmp795,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp791);

vector < vector < vector < vector < uint64_t > > > > tmp797 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp795, tmp90, tmp797);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp90);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp795);

int32_t tmp800 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp801 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)192);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp797,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)192,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)160, tmp779,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp797, tmp800, tmp801);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp797);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)160, tmp779);
ClearMemPublic(tmp800);

vector < vector < vector < vector < uint64_t > > > > tmp805 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)192);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)192, tmp801, tmp91, tmp92,  (int32_t)0,  (int32_t)11, tmp805);
ClearMemSecret1( (int32_t)192, tmp92);
ClearMemSecret1( (int32_t)192, tmp91);

vector < vector < vector < vector < uint64_t > > > > tmp808 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)192);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)192, tmp805, tmp808,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)192, tmp805);

vector < vector < vector < vector < uint64_t > > > > tmp810 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)192,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp808, tmp95, tmp810);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)192,  (int32_t)128, tmp95);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)192, tmp808);

vector < vector < vector < vector < uint64_t > > > > tmp813 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp810,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp810, tmp96, tmp97,  (int32_t)0,  (int32_t)11, tmp813);
ClearMemSecret1( (int32_t)128, tmp96);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp810);
ClearMemSecret1( (int32_t)128, tmp97);

vector < vector < vector < vector < uint64_t > > > > tmp817 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp813, tmp817,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp813);

vector < vector < vector < vector < uint64_t > > > > tmp819 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp817, tmp100, tmp819);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp817);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp100);

int32_t tmp822 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp823 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)224);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp819,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)224,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)192, tmp801,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp819, tmp822, tmp823);
ClearMemPublic(tmp822);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)192, tmp801);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp819);

vector < vector < vector < vector < uint64_t > > > > tmp827 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)224);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)224, tmp823, tmp101, tmp102,  (int32_t)0,  (int32_t)11, tmp827);
ClearMemSecret1( (int32_t)224, tmp102);
ClearMemSecret1( (int32_t)224, tmp101);

vector < vector < vector < vector < uint64_t > > > > tmp830 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)224);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)224, tmp827, tmp830,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)224, tmp827);

vector < vector < vector < vector < uint64_t > > > > tmp832 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)224,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp830, tmp105, tmp832);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)224, tmp830);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)224,  (int32_t)128, tmp105);

vector < vector < vector < vector < uint64_t > > > > tmp835 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp832,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp832, tmp106, tmp107,  (int32_t)0,  (int32_t)11, tmp835);
ClearMemSecret1( (int32_t)128, tmp106);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp832);
ClearMemSecret1( (int32_t)128, tmp107);

vector < vector < vector < vector < uint64_t > > > > tmp839 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp835, tmp839,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp835);

vector < vector < vector < vector < uint64_t > > > > tmp841 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp839, tmp110, tmp841);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp839);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp110);

int32_t tmp844 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp845 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)256);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp841,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)256,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)224, tmp823,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp841, tmp844, tmp845);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp841);
ClearMemPublic(tmp844);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)224, tmp823);

vector < vector < vector < vector < uint64_t > > > > tmp849 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)256);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)256, tmp845, tmp111, tmp112,  (int32_t)0,  (int32_t)11, tmp849);
ClearMemSecret1( (int32_t)256, tmp112);
ClearMemSecret1( (int32_t)256, tmp111);

vector < vector < vector < vector < uint64_t > > > > tmp852 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)256, tmp849, tmp852,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)256, tmp849);

vector < vector < vector < vector < uint64_t > > > > tmp854 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp852, tmp115, tmp854);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)128, tmp115);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)256, tmp852);

vector < vector < vector < vector < uint64_t > > > > tmp857 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp854,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp854, tmp116, tmp117,  (int32_t)0,  (int32_t)11, tmp857);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp854);
ClearMemSecret1( (int32_t)128, tmp117);
ClearMemSecret1( (int32_t)128, tmp116);

vector < vector < vector < vector < uint64_t > > > > tmp861 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp857, tmp861,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp857);

vector < vector < vector < vector < uint64_t > > > > tmp863 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp861, tmp120, tmp863);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp120);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp861);

int32_t tmp866 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp867 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)288);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp863,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)288,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)256, tmp845,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp863, tmp866, tmp867);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp863);
ClearMemPublic(tmp866);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)256, tmp845);

vector < vector < vector < vector < uint64_t > > > > tmp871 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)288);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)288, tmp867, tmp121, tmp122,  (int32_t)0,  (int32_t)11, tmp871);
ClearMemSecret1( (int32_t)288, tmp121);
ClearMemSecret1( (int32_t)288, tmp122);

vector < vector < vector < vector < uint64_t > > > > tmp874 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)288);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)288, tmp871, tmp874,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)288, tmp871);

vector < vector < vector < vector < uint64_t > > > > tmp876 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)288,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp874, tmp125, tmp876);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)288, tmp874);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)288,  (int32_t)128, tmp125);

vector < vector < vector < vector < uint64_t > > > > tmp879 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp876,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp876, tmp126, tmp127,  (int32_t)0,  (int32_t)11, tmp879);
ClearMemSecret1( (int32_t)128, tmp126);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp876);
ClearMemSecret1( (int32_t)128, tmp127);

vector < vector < vector < vector < uint64_t > > > > tmp883 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp879, tmp883,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp879);

vector < vector < vector < vector < uint64_t > > > > tmp885 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp883, tmp130, tmp885);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp883);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp130);

int32_t tmp888 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp889 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)320);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp885,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)320,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)288, tmp867,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp885, tmp888, tmp889);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)288, tmp867);
ClearMemPublic(tmp888);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp885);

vector < vector < vector < vector < uint64_t > > > > tmp893 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)320);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)320, tmp889, tmp131, tmp132,  (int32_t)0,  (int32_t)11, tmp893);
ClearMemSecret1( (int32_t)320, tmp132);
ClearMemSecret1( (int32_t)320, tmp131);

vector < vector < vector < vector < uint64_t > > > > tmp896 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)320);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)320, tmp893, tmp896,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)320, tmp893);

vector < vector < vector < vector < uint64_t > > > > tmp898 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)320,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp896, tmp135, tmp898);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)320, tmp896);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)320,  (int32_t)128, tmp135);

vector < vector < vector < vector < uint64_t > > > > tmp901 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp898,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp898, tmp136, tmp137,  (int32_t)0,  (int32_t)11, tmp901);
ClearMemSecret1( (int32_t)128, tmp136);
ClearMemSecret1( (int32_t)128, tmp137);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp898);

vector < vector < vector < vector < uint64_t > > > > tmp905 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp901, tmp905,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp901);

vector < vector < vector < vector < uint64_t > > > > tmp907 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp905, tmp140, tmp907);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp140);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp905);

int32_t tmp910 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp911 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)352);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp907,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)352,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)320, tmp889,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp907, tmp910, tmp911);
ClearMemPublic(tmp910);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)320, tmp889);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp907);

vector < vector < vector < vector < uint64_t > > > > tmp915 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)352);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)352, tmp911, tmp141, tmp142,  (int32_t)0,  (int32_t)11, tmp915);
ClearMemSecret1( (int32_t)352, tmp141);
ClearMemSecret1( (int32_t)352, tmp142);

vector < vector < vector < vector < uint64_t > > > > tmp918 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)352);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)352, tmp915, tmp918,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)352, tmp915);

vector < vector < vector < vector < uint64_t > > > > tmp920 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)352,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp918, tmp145, tmp920);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)352,  (int32_t)128, tmp145);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)352, tmp918);

vector < vector < vector < vector < uint64_t > > > > tmp923 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp920,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp920, tmp146, tmp147,  (int32_t)0,  (int32_t)11, tmp923);
ClearMemSecret1( (int32_t)128, tmp147);
ClearMemSecret1( (int32_t)128, tmp146);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp920);

vector < vector < vector < vector < uint64_t > > > > tmp927 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp923, tmp927,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp923);

vector < vector < vector < vector < uint64_t > > > > tmp929 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp927, tmp150, tmp929);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp150);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp927);

int32_t tmp932 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp933 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)384);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp929,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)384,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)352, tmp911,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp929, tmp932, tmp933);
ClearMemPublic(tmp932);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp929);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)352, tmp911);

vector < vector < vector < vector < uint64_t > > > > tmp937 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)384);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)384, tmp933, tmp151, tmp152,  (int32_t)0,  (int32_t)11, tmp937);
ClearMemSecret1( (int32_t)384, tmp151);
ClearMemSecret1( (int32_t)384, tmp152);

vector < vector < vector < vector < uint64_t > > > > tmp940 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)384);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)384, tmp937, tmp940,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)384, tmp937);

vector < vector < vector < vector < uint64_t > > > > tmp942 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)384,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp940, tmp155, tmp942);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)384,  (int32_t)128, tmp155);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)384, tmp940);

vector < vector < vector < vector < uint64_t > > > > tmp945 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp942,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp942, tmp156, tmp157,  (int32_t)0,  (int32_t)11, tmp945);
ClearMemSecret1( (int32_t)128, tmp156);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp942);
ClearMemSecret1( (int32_t)128, tmp157);

vector < vector < vector < vector < uint64_t > > > > tmp949 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp945, tmp949,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp945);

vector < vector < vector < vector < uint64_t > > > > tmp951 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp949, tmp160, tmp951);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp160);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp949);

int32_t tmp954 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp955 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)416);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp951,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)416,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)384, tmp933,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp951, tmp954, tmp955);
ClearMemPublic(tmp954);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp951);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)384, tmp933);

vector < vector < vector < vector < uint64_t > > > > tmp959 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)416);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)416, tmp955, tmp161, tmp162,  (int32_t)0,  (int32_t)11, tmp959);
ClearMemSecret1( (int32_t)416, tmp161);
ClearMemSecret1( (int32_t)416, tmp162);

vector < vector < vector < vector < uint64_t > > > > tmp962 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)416);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)416, tmp959, tmp962,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)416, tmp959);

vector < vector < vector < vector < uint64_t > > > > tmp964 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)416,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp962, tmp165, tmp964);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)416, tmp962);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)416,  (int32_t)128, tmp165);

vector < vector < vector < vector < uint64_t > > > > tmp967 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp964,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp964, tmp166, tmp167,  (int32_t)0,  (int32_t)11, tmp967);
ClearMemSecret1( (int32_t)128, tmp167);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp964);
ClearMemSecret1( (int32_t)128, tmp166);

vector < vector < vector < vector < uint64_t > > > > tmp971 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp967, tmp971,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp967);

vector < vector < vector < vector < uint64_t > > > > tmp973 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp971, tmp170, tmp973);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp170);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp971);

int32_t tmp976 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp977 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)448);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp973,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)448,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)416, tmp955,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp973, tmp976, tmp977);
ClearMemPublic(tmp976);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp973);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)416, tmp955);

vector < vector < vector < vector < uint64_t > > > > tmp981 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)448);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)448, tmp977, tmp171, tmp172,  (int32_t)0,  (int32_t)11, tmp981);
ClearMemSecret1( (int32_t)448, tmp172);
ClearMemSecret1( (int32_t)448, tmp171);

vector < vector < vector < vector < uint64_t > > > > tmp984 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)448);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)448, tmp981, tmp984,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)448, tmp981);

vector < vector < vector < vector < uint64_t > > > > tmp986 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)448,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp984, tmp175, tmp986);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)448,  (int32_t)128, tmp175);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)448, tmp984);

vector < vector < vector < vector < uint64_t > > > > tmp989 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp986,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp986, tmp176, tmp177,  (int32_t)0,  (int32_t)11, tmp989);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp986);
ClearMemSecret1( (int32_t)128, tmp177);
ClearMemSecret1( (int32_t)128, tmp176);

vector < vector < vector < vector < uint64_t > > > > tmp993 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp989, tmp993,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp989);

vector < vector < vector < vector < uint64_t > > > > tmp995 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp993, tmp180, tmp995);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp180);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp993);

int32_t tmp998 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp999 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)480);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp995,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)480,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)448, tmp977,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp995, tmp998, tmp999);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp995);
ClearMemPublic(tmp998);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)448, tmp977);

vector < vector < vector < vector < uint64_t > > > > tmp1003 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)480);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)480, tmp999, tmp181, tmp182,  (int32_t)0,  (int32_t)11, tmp1003);
ClearMemSecret1( (int32_t)480, tmp182);
ClearMemSecret1( (int32_t)480, tmp181);

vector < vector < vector < vector < uint64_t > > > > tmp1006 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)480);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)480, tmp1003, tmp1006,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)480, tmp1003);

vector < vector < vector < vector < uint64_t > > > > tmp1008 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)480,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1006, tmp185, tmp1008);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)480, tmp1006);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)480,  (int32_t)128, tmp185);

vector < vector < vector < vector < uint64_t > > > > tmp1011 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1008,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1008, tmp186, tmp187,  (int32_t)0,  (int32_t)11, tmp1011);
ClearMemSecret1( (int32_t)128, tmp187);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1008);
ClearMemSecret1( (int32_t)128, tmp186);

vector < vector < vector < vector < uint64_t > > > > tmp1015 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1011, tmp1015,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1011);

vector < vector < vector < vector < uint64_t > > > > tmp1017 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1015, tmp190, tmp1017);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp190);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1015);

int32_t tmp1020 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1021 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp1017,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)480, tmp999,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp1017, tmp1020, tmp1021);
ClearMemPublic(tmp1020);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)480, tmp999);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp1017);

vector < vector < vector < vector < uint64_t > > > > tmp1025 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp1021, tmp191, tmp192,  (int32_t)0,  (int32_t)11, tmp1025);
ClearMemSecret1( (int32_t)512, tmp191);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp1021);
ClearMemSecret1( (int32_t)512, tmp192);

vector < vector < vector < vector < uint64_t > > > > tmp1029 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp1025, tmp1029,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp1025);

vector < vector < vector < vector < uint64_t > > > > tmp1031 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)256);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1029, tmp195, tmp1031);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)256, tmp195);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp1029);

vector < vector < vector < vector < uint64_t > > > > tmp1034 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256);
AvgPool( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256,  (int32_t)2,  (int32_t)2,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)2,  (int32_t)2,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)256, tmp1031, tmp1034);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)256, tmp1031);

vector < vector < vector < vector < uint64_t > > > > tmp1036 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp1034,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp1034, tmp196, tmp197,  (int32_t)0,  (int32_t)11, tmp1036);
ClearMemSecret1( (int32_t)256, tmp197);
ClearMemSecret1( (int32_t)256, tmp196);

vector < vector < vector < vector < uint64_t > > > > tmp1039 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp1036, tmp1039,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp1036);

vector < vector < vector < vector < uint64_t > > > > tmp1041 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1039, tmp200, tmp1041);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp1039);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)128, tmp200);

vector < vector < vector < vector < uint64_t > > > > tmp1044 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1041,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1041, tmp201, tmp202,  (int32_t)0,  (int32_t)11, tmp1044);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1041);
ClearMemSecret1( (int32_t)128, tmp201);
ClearMemSecret1( (int32_t)128, tmp202);

vector < vector < vector < vector < uint64_t > > > > tmp1048 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1044, tmp1048,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1044);

vector < vector < vector < vector < uint64_t > > > > tmp1050 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1048, tmp205, tmp1050);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp205);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1048);

int32_t tmp1053 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1054 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)288);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1050,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)288,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp1034,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1050, tmp1053, tmp1054);
ClearMemPublic(tmp1053);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1050);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp1034);

vector < vector < vector < vector < uint64_t > > > > tmp1058 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)288);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)288, tmp1054, tmp206, tmp207,  (int32_t)0,  (int32_t)11, tmp1058);
ClearMemSecret1( (int32_t)288, tmp207);
ClearMemSecret1( (int32_t)288, tmp206);

vector < vector < vector < vector < uint64_t > > > > tmp1061 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)288);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)288, tmp1058, tmp1061,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)288, tmp1058);

vector < vector < vector < vector < uint64_t > > > > tmp1063 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)288,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1061, tmp210, tmp1063);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)288,  (int32_t)128, tmp210);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)288, tmp1061);

vector < vector < vector < vector < uint64_t > > > > tmp1066 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1063,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1063, tmp211, tmp212,  (int32_t)0,  (int32_t)11, tmp1066);
ClearMemSecret1( (int32_t)128, tmp212);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1063);
ClearMemSecret1( (int32_t)128, tmp211);

vector < vector < vector < vector < uint64_t > > > > tmp1070 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1066, tmp1070,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1066);

vector < vector < vector < vector < uint64_t > > > > tmp1072 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1070, tmp215, tmp1072);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp215);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1070);

int32_t tmp1075 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1076 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)320);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1072,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)320,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)288, tmp1054,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1072, tmp1075, tmp1076);
ClearMemPublic(tmp1075);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)288, tmp1054);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1072);

vector < vector < vector < vector < uint64_t > > > > tmp1080 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)320);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)320, tmp1076, tmp216, tmp217,  (int32_t)0,  (int32_t)11, tmp1080);
ClearMemSecret1( (int32_t)320, tmp217);
ClearMemSecret1( (int32_t)320, tmp216);

vector < vector < vector < vector < uint64_t > > > > tmp1083 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)320);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)320, tmp1080, tmp1083,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)320, tmp1080);

vector < vector < vector < vector < uint64_t > > > > tmp1085 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)320,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1083, tmp220, tmp1085);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)320,  (int32_t)128, tmp220);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)320, tmp1083);

vector < vector < vector < vector < uint64_t > > > > tmp1088 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1085,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1085, tmp221, tmp222,  (int32_t)0,  (int32_t)11, tmp1088);
ClearMemSecret1( (int32_t)128, tmp221);
ClearMemSecret1( (int32_t)128, tmp222);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1085);

vector < vector < vector < vector < uint64_t > > > > tmp1092 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1088, tmp1092,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1088);

vector < vector < vector < vector < uint64_t > > > > tmp1094 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1092, tmp225, tmp1094);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1092);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp225);

int32_t tmp1097 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1098 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)352);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1094,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)352,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)320, tmp1076,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1094, tmp1097, tmp1098);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)320, tmp1076);
ClearMemPublic(tmp1097);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1094);

vector < vector < vector < vector < uint64_t > > > > tmp1102 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)352);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)352, tmp1098, tmp226, tmp227,  (int32_t)0,  (int32_t)11, tmp1102);
ClearMemSecret1( (int32_t)352, tmp227);
ClearMemSecret1( (int32_t)352, tmp226);

vector < vector < vector < vector < uint64_t > > > > tmp1105 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)352);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)352, tmp1102, tmp1105,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)352, tmp1102);

vector < vector < vector < vector < uint64_t > > > > tmp1107 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)352,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1105, tmp230, tmp1107);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)352,  (int32_t)128, tmp230);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)352, tmp1105);

vector < vector < vector < vector < uint64_t > > > > tmp1110 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1107,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1107, tmp231, tmp232,  (int32_t)0,  (int32_t)11, tmp1110);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1107);
ClearMemSecret1( (int32_t)128, tmp232);
ClearMemSecret1( (int32_t)128, tmp231);

vector < vector < vector < vector < uint64_t > > > > tmp1114 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1110, tmp1114,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1110);

vector < vector < vector < vector < uint64_t > > > > tmp1116 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1114, tmp235, tmp1116);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp235);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1114);

int32_t tmp1119 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1120 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)384);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1116,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)384,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)352, tmp1098,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1116, tmp1119, tmp1120);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)352, tmp1098);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1116);
ClearMemPublic(tmp1119);

vector < vector < vector < vector < uint64_t > > > > tmp1124 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)384);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)384, tmp1120, tmp236, tmp237,  (int32_t)0,  (int32_t)11, tmp1124);
ClearMemSecret1( (int32_t)384, tmp236);
ClearMemSecret1( (int32_t)384, tmp237);

vector < vector < vector < vector < uint64_t > > > > tmp1127 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)384);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)384, tmp1124, tmp1127,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)384, tmp1124);

vector < vector < vector < vector < uint64_t > > > > tmp1129 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)384,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1127, tmp240, tmp1129);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)384,  (int32_t)128, tmp240);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)384, tmp1127);

vector < vector < vector < vector < uint64_t > > > > tmp1132 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1129,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1129, tmp241, tmp242,  (int32_t)0,  (int32_t)11, tmp1132);
ClearMemSecret1( (int32_t)128, tmp241);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1129);
ClearMemSecret1( (int32_t)128, tmp242);

vector < vector < vector < vector < uint64_t > > > > tmp1136 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1132, tmp1136,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1132);

vector < vector < vector < vector < uint64_t > > > > tmp1138 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1136, tmp245, tmp1138);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1136);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp245);

int32_t tmp1141 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1142 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)416);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1138,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)416,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)384, tmp1120,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1138, tmp1141, tmp1142);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1138);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)384, tmp1120);
ClearMemPublic(tmp1141);

vector < vector < vector < vector < uint64_t > > > > tmp1146 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)416);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)416, tmp1142, tmp246, tmp247,  (int32_t)0,  (int32_t)11, tmp1146);
ClearMemSecret1( (int32_t)416, tmp247);
ClearMemSecret1( (int32_t)416, tmp246);

vector < vector < vector < vector < uint64_t > > > > tmp1149 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)416);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)416, tmp1146, tmp1149,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)416, tmp1146);

vector < vector < vector < vector < uint64_t > > > > tmp1151 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)416,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1149, tmp250, tmp1151);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)416, tmp1149);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)416,  (int32_t)128, tmp250);

vector < vector < vector < vector < uint64_t > > > > tmp1154 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1151,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1151, tmp251, tmp252,  (int32_t)0,  (int32_t)11, tmp1154);
ClearMemSecret1( (int32_t)128, tmp251);
ClearMemSecret1( (int32_t)128, tmp252);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1151);

vector < vector < vector < vector < uint64_t > > > > tmp1158 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1154, tmp1158,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1154);

vector < vector < vector < vector < uint64_t > > > > tmp1160 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1158, tmp255, tmp1160);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1158);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp255);

int32_t tmp1163 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1164 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)448);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1160,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)448,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)416, tmp1142,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1160, tmp1163, tmp1164);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)416, tmp1142);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1160);
ClearMemPublic(tmp1163);

vector < vector < vector < vector < uint64_t > > > > tmp1168 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)448);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)448, tmp1164, tmp256, tmp257,  (int32_t)0,  (int32_t)11, tmp1168);
ClearMemSecret1( (int32_t)448, tmp257);
ClearMemSecret1( (int32_t)448, tmp256);

vector < vector < vector < vector < uint64_t > > > > tmp1171 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)448);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)448, tmp1168, tmp1171,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)448, tmp1168);

vector < vector < vector < vector < uint64_t > > > > tmp1173 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)448,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1171, tmp260, tmp1173);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)448, tmp1171);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)448,  (int32_t)128, tmp260);

vector < vector < vector < vector < uint64_t > > > > tmp1176 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1173,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1173, tmp261, tmp262,  (int32_t)0,  (int32_t)11, tmp1176);
ClearMemSecret1( (int32_t)128, tmp262);
ClearMemSecret1( (int32_t)128, tmp261);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1173);

vector < vector < vector < vector < uint64_t > > > > tmp1180 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1176, tmp1180,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1176);

vector < vector < vector < vector < uint64_t > > > > tmp1182 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1180, tmp265, tmp1182);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1180);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp265);

int32_t tmp1185 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1186 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1182,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)448, tmp1164,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1182, tmp1185, tmp1186);
ClearMemPublic(tmp1185);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1182);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)448, tmp1164);

vector < vector < vector < vector < uint64_t > > > > tmp1190 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp1186, tmp266, tmp267,  (int32_t)0,  (int32_t)11, tmp1190);
ClearMemSecret1( (int32_t)480, tmp266);
ClearMemSecret1( (int32_t)480, tmp267);

vector < vector < vector < vector < uint64_t > > > > tmp1193 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp1190, tmp1193,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp1190);

vector < vector < vector < vector < uint64_t > > > > tmp1195 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1193, tmp270, tmp1195);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp1193);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)480,  (int32_t)128, tmp270);

vector < vector < vector < vector < uint64_t > > > > tmp1198 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1195,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1195, tmp271, tmp272,  (int32_t)0,  (int32_t)11, tmp1198);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1195);
ClearMemSecret1( (int32_t)128, tmp271);
ClearMemSecret1( (int32_t)128, tmp272);

vector < vector < vector < vector < uint64_t > > > > tmp1202 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1198, tmp1202,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1198);

vector < vector < vector < vector < uint64_t > > > > tmp1204 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1202, tmp275, tmp1204);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp275);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1202);

int32_t tmp1207 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1208 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)512);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1204,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)512,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp1186,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1204, tmp1207, tmp1208);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1204);
ClearMemPublic(tmp1207);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp1186);

vector < vector < vector < vector < uint64_t > > > > tmp1212 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)512);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)512, tmp1208, tmp276, tmp277,  (int32_t)0,  (int32_t)11, tmp1212);
ClearMemSecret1( (int32_t)512, tmp277);
ClearMemSecret1( (int32_t)512, tmp276);

vector < vector < vector < vector < uint64_t > > > > tmp1215 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)512);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)512, tmp1212, tmp1215,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)512, tmp1212);

vector < vector < vector < vector < uint64_t > > > > tmp1217 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1215, tmp280, tmp1217);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)512, tmp1215);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)128, tmp280);

vector < vector < vector < vector < uint64_t > > > > tmp1220 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1217,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1217, tmp281, tmp282,  (int32_t)0,  (int32_t)11, tmp1220);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1217);
ClearMemSecret1( (int32_t)128, tmp281);
ClearMemSecret1( (int32_t)128, tmp282);

vector < vector < vector < vector < uint64_t > > > > tmp1224 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1220, tmp1224,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1220);

vector < vector < vector < vector < uint64_t > > > > tmp1226 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1224, tmp285, tmp1226);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1224);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp285);

int32_t tmp1229 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1230 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)544);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1226,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)544,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)512, tmp1208,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1226, tmp1229, tmp1230);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1226);
ClearMemPublic(tmp1229);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)512, tmp1208);

vector < vector < vector < vector < uint64_t > > > > tmp1234 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)544);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)544, tmp1230, tmp286, tmp287,  (int32_t)0,  (int32_t)11, tmp1234);
ClearMemSecret1( (int32_t)544, tmp286);
ClearMemSecret1( (int32_t)544, tmp287);

vector < vector < vector < vector < uint64_t > > > > tmp1237 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)544);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)544, tmp1234, tmp1237,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)544, tmp1234);

vector < vector < vector < vector < uint64_t > > > > tmp1239 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)544,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1237, tmp290, tmp1239);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)544, tmp1237);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)544,  (int32_t)128, tmp290);

vector < vector < vector < vector < uint64_t > > > > tmp1242 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1239,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1239, tmp291, tmp292,  (int32_t)0,  (int32_t)11, tmp1242);
ClearMemSecret1( (int32_t)128, tmp292);
ClearMemSecret1( (int32_t)128, tmp291);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1239);

vector < vector < vector < vector < uint64_t > > > > tmp1246 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1242, tmp1246,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1242);

vector < vector < vector < vector < uint64_t > > > > tmp1248 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1246, tmp295, tmp1248);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1246);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp295);

int32_t tmp1251 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1252 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1248,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)544, tmp1230,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1248, tmp1251, tmp1252);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1248);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)544, tmp1230);
ClearMemPublic(tmp1251);

vector < vector < vector < vector < uint64_t > > > > tmp1256 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576, tmp1252, tmp296, tmp297,  (int32_t)0,  (int32_t)11, tmp1256);
ClearMemSecret1( (int32_t)576, tmp297);
ClearMemSecret1( (int32_t)576, tmp296);

vector < vector < vector < vector < uint64_t > > > > tmp1259 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576, tmp1256, tmp1259,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576, tmp1256);

vector < vector < vector < vector < uint64_t > > > > tmp1261 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1259, tmp300, tmp1261);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)576,  (int32_t)128, tmp300);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576, tmp1259);

vector < vector < vector < vector < uint64_t > > > > tmp1264 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1261,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1261, tmp301, tmp302,  (int32_t)0,  (int32_t)11, tmp1264);
ClearMemSecret1( (int32_t)128, tmp302);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1261);
ClearMemSecret1( (int32_t)128, tmp301);

vector < vector < vector < vector < uint64_t > > > > tmp1268 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1264, tmp1268,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1264);

vector < vector < vector < vector < uint64_t > > > > tmp1270 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1268, tmp305, tmp1270);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1268);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp305);

int32_t tmp1273 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1274 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)608);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1270,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)608,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576, tmp1252,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1270, tmp1273, tmp1274);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576, tmp1252);
ClearMemPublic(tmp1273);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1270);

vector < vector < vector < vector < uint64_t > > > > tmp1278 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)608);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)608, tmp1274, tmp306, tmp307,  (int32_t)0,  (int32_t)11, tmp1278);
ClearMemSecret1( (int32_t)608, tmp307);
ClearMemSecret1( (int32_t)608, tmp306);

vector < vector < vector < vector < uint64_t > > > > tmp1281 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)608);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)608, tmp1278, tmp1281,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)608, tmp1278);

vector < vector < vector < vector < uint64_t > > > > tmp1283 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)608,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1281, tmp310, tmp1283);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)608,  (int32_t)128, tmp310);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)608, tmp1281);

vector < vector < vector < vector < uint64_t > > > > tmp1286 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1283,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1283, tmp311, tmp312,  (int32_t)0,  (int32_t)11, tmp1286);
ClearMemSecret1( (int32_t)128, tmp311);
ClearMemSecret1( (int32_t)128, tmp312);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1283);

vector < vector < vector < vector < uint64_t > > > > tmp1290 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1286, tmp1290,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1286);

vector < vector < vector < vector < uint64_t > > > > tmp1292 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1290, tmp315, tmp1292);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp315);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1290);

int32_t tmp1295 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1296 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)640);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1292,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)640,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)608, tmp1274,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1292, tmp1295, tmp1296);
ClearMemPublic(tmp1295);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1292);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)608, tmp1274);

vector < vector < vector < vector < uint64_t > > > > tmp1300 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)640);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)640, tmp1296, tmp316, tmp317,  (int32_t)0,  (int32_t)11, tmp1300);
ClearMemSecret1( (int32_t)640, tmp316);
ClearMemSecret1( (int32_t)640, tmp317);

vector < vector < vector < vector < uint64_t > > > > tmp1303 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)640);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)640, tmp1300, tmp1303,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)640, tmp1300);

vector < vector < vector < vector < uint64_t > > > > tmp1305 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)640,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1303, tmp320, tmp1305);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)640,  (int32_t)128, tmp320);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)640, tmp1303);

vector < vector < vector < vector < uint64_t > > > > tmp1308 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1305,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1305, tmp321, tmp322,  (int32_t)0,  (int32_t)11, tmp1308);
ClearMemSecret1( (int32_t)128, tmp321);
ClearMemSecret1( (int32_t)128, tmp322);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1305);

vector < vector < vector < vector < uint64_t > > > > tmp1312 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1308, tmp1312,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1308);

vector < vector < vector < vector < uint64_t > > > > tmp1314 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1312, tmp325, tmp1314);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1312);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp325);

int32_t tmp1317 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1318 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)672);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1314,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)672,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)640, tmp1296,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1314, tmp1317, tmp1318);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1314);
ClearMemPublic(tmp1317);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)640, tmp1296);

vector < vector < vector < vector < uint64_t > > > > tmp1322 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)672);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)672, tmp1318, tmp326, tmp327,  (int32_t)0,  (int32_t)11, tmp1322);
ClearMemSecret1( (int32_t)672, tmp327);
ClearMemSecret1( (int32_t)672, tmp326);

vector < vector < vector < vector < uint64_t > > > > tmp1325 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)672);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)672, tmp1322, tmp1325,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)672, tmp1322);

vector < vector < vector < vector < uint64_t > > > > tmp1327 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)672,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1325, tmp330, tmp1327);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)672,  (int32_t)128, tmp330);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)672, tmp1325);

vector < vector < vector < vector < uint64_t > > > > tmp1330 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1327,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1327, tmp331, tmp332,  (int32_t)0,  (int32_t)11, tmp1330);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1327);
ClearMemSecret1( (int32_t)128, tmp331);
ClearMemSecret1( (int32_t)128, tmp332);

vector < vector < vector < vector < uint64_t > > > > tmp1334 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1330, tmp1334,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1330);

vector < vector < vector < vector < uint64_t > > > > tmp1336 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1334, tmp335, tmp1336);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1334);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp335);

int32_t tmp1339 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1340 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)704);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1336,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)704,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)672, tmp1318,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1336, tmp1339, tmp1340);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)672, tmp1318);
ClearMemPublic(tmp1339);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1336);

vector < vector < vector < vector < uint64_t > > > > tmp1344 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)704);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)704, tmp1340, tmp336, tmp337,  (int32_t)0,  (int32_t)11, tmp1344);
ClearMemSecret1( (int32_t)704, tmp336);
ClearMemSecret1( (int32_t)704, tmp337);

vector < vector < vector < vector < uint64_t > > > > tmp1347 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)704);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)704, tmp1344, tmp1347,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)704, tmp1344);

vector < vector < vector < vector < uint64_t > > > > tmp1349 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)704,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1347, tmp340, tmp1349);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)704,  (int32_t)128, tmp340);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)704, tmp1347);

vector < vector < vector < vector < uint64_t > > > > tmp1352 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1349,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1349, tmp341, tmp342,  (int32_t)0,  (int32_t)11, tmp1352);
ClearMemSecret1( (int32_t)128, tmp342);
ClearMemSecret1( (int32_t)128, tmp341);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1349);

vector < vector < vector < vector < uint64_t > > > > tmp1356 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1352, tmp1356,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1352);

vector < vector < vector < vector < uint64_t > > > > tmp1358 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1356, tmp345, tmp1358);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp345);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1356);

int32_t tmp1361 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1362 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)736);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1358,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)736,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)704, tmp1340,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1358, tmp1361, tmp1362);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)704, tmp1340);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1358);
ClearMemPublic(tmp1361);

vector < vector < vector < vector < uint64_t > > > > tmp1366 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)736);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)736, tmp1362, tmp346, tmp347,  (int32_t)0,  (int32_t)11, tmp1366);
ClearMemSecret1( (int32_t)736, tmp347);
ClearMemSecret1( (int32_t)736, tmp346);

vector < vector < vector < vector < uint64_t > > > > tmp1369 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)736);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)736, tmp1366, tmp1369,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)736, tmp1366);

vector < vector < vector < vector < uint64_t > > > > tmp1371 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)736,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1369, tmp350, tmp1371);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)736, tmp1369);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)736,  (int32_t)128, tmp350);

vector < vector < vector < vector < uint64_t > > > > tmp1374 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1371,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1371, tmp351, tmp352,  (int32_t)0,  (int32_t)11, tmp1374);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1371);
ClearMemSecret1( (int32_t)128, tmp352);
ClearMemSecret1( (int32_t)128, tmp351);

vector < vector < vector < vector < uint64_t > > > > tmp1378 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1374, tmp1378,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1374);

vector < vector < vector < vector < uint64_t > > > > tmp1380 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1378, tmp355, tmp1380);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp355);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1378);

int32_t tmp1383 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1384 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)768);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1380,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)768,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)736, tmp1362,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1380, tmp1383, tmp1384);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1380);
ClearMemPublic(tmp1383);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)736, tmp1362);

vector < vector < vector < vector < uint64_t > > > > tmp1388 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)768);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)768, tmp1384, tmp356, tmp357,  (int32_t)0,  (int32_t)11, tmp1388);
ClearMemSecret1( (int32_t)768, tmp356);
ClearMemSecret1( (int32_t)768, tmp357);

vector < vector < vector < vector < uint64_t > > > > tmp1391 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)768);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)768, tmp1388, tmp1391,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)768, tmp1388);

vector < vector < vector < vector < uint64_t > > > > tmp1393 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)768,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1391, tmp360, tmp1393);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)768, tmp1391);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)768,  (int32_t)128, tmp360);

vector < vector < vector < vector < uint64_t > > > > tmp1396 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1393,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1393, tmp361, tmp362,  (int32_t)0,  (int32_t)11, tmp1396);
ClearMemSecret1( (int32_t)128, tmp362);
ClearMemSecret1( (int32_t)128, tmp361);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1393);

vector < vector < vector < vector < uint64_t > > > > tmp1400 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1396, tmp1400,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1396);

vector < vector < vector < vector < uint64_t > > > > tmp1402 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1400, tmp365, tmp1402);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1400);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp365);

int32_t tmp1405 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1406 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)800);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1402,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)800,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)768, tmp1384,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1402, tmp1405, tmp1406);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)768, tmp1384);
ClearMemPublic(tmp1405);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1402);

vector < vector < vector < vector < uint64_t > > > > tmp1410 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)800);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)800, tmp1406, tmp366, tmp367,  (int32_t)0,  (int32_t)11, tmp1410);
ClearMemSecret1( (int32_t)800, tmp367);
ClearMemSecret1( (int32_t)800, tmp366);

vector < vector < vector < vector < uint64_t > > > > tmp1413 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)800);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)800, tmp1410, tmp1413,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)800, tmp1410);

vector < vector < vector < vector < uint64_t > > > > tmp1415 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)800,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1413, tmp370, tmp1415);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)800, tmp1413);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)800,  (int32_t)128, tmp370);

vector < vector < vector < vector < uint64_t > > > > tmp1418 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1415,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1415, tmp371, tmp372,  (int32_t)0,  (int32_t)11, tmp1418);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1415);
ClearMemSecret1( (int32_t)128, tmp372);
ClearMemSecret1( (int32_t)128, tmp371);

vector < vector < vector < vector < uint64_t > > > > tmp1422 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1418, tmp1422,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1418);

vector < vector < vector < vector < uint64_t > > > > tmp1424 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1422, tmp375, tmp1424);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1422);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp375);

int32_t tmp1427 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1428 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)832);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1424,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)832,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)800, tmp1406,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1424, tmp1427, tmp1428);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)800, tmp1406);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1424);
ClearMemPublic(tmp1427);

vector < vector < vector < vector < uint64_t > > > > tmp1432 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)832);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)832, tmp1428, tmp376, tmp377,  (int32_t)0,  (int32_t)11, tmp1432);
ClearMemSecret1( (int32_t)832, tmp377);
ClearMemSecret1( (int32_t)832, tmp376);

vector < vector < vector < vector < uint64_t > > > > tmp1435 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)832);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)832, tmp1432, tmp1435,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)832, tmp1432);

vector < vector < vector < vector < uint64_t > > > > tmp1437 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)832,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1435, tmp380, tmp1437);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)832,  (int32_t)128, tmp380);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)832, tmp1435);

vector < vector < vector < vector < uint64_t > > > > tmp1440 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1437,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1437, tmp381, tmp382,  (int32_t)0,  (int32_t)11, tmp1440);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1437);
ClearMemSecret1( (int32_t)128, tmp382);
ClearMemSecret1( (int32_t)128, tmp381);

vector < vector < vector < vector < uint64_t > > > > tmp1444 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1440, tmp1444,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1440);

vector < vector < vector < vector < uint64_t > > > > tmp1446 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1444, tmp385, tmp1446);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp385);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1444);

int32_t tmp1449 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1450 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)864);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1446,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)864,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)832, tmp1428,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1446, tmp1449, tmp1450);
ClearMemPublic(tmp1449);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1446);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)832, tmp1428);

vector < vector < vector < vector < uint64_t > > > > tmp1454 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)864);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)864, tmp1450, tmp386, tmp387,  (int32_t)0,  (int32_t)11, tmp1454);
ClearMemSecret1( (int32_t)864, tmp387);
ClearMemSecret1( (int32_t)864, tmp386);

vector < vector < vector < vector < uint64_t > > > > tmp1457 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)864);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)864, tmp1454, tmp1457,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)864, tmp1454);

vector < vector < vector < vector < uint64_t > > > > tmp1459 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)864,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1457, tmp390, tmp1459);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)864, tmp1457);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)864,  (int32_t)128, tmp390);

vector < vector < vector < vector < uint64_t > > > > tmp1462 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1459,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1459, tmp391, tmp392,  (int32_t)0,  (int32_t)11, tmp1462);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1459);
ClearMemSecret1( (int32_t)128, tmp392);
ClearMemSecret1( (int32_t)128, tmp391);

vector < vector < vector < vector < uint64_t > > > > tmp1466 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1462, tmp1466,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1462);

vector < vector < vector < vector < uint64_t > > > > tmp1468 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1466, tmp395, tmp1468);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp395);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1466);

int32_t tmp1471 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1472 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)896);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1468,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)896,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)864, tmp1450,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1468, tmp1471, tmp1472);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1468);
ClearMemPublic(tmp1471);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)864, tmp1450);

vector < vector < vector < vector < uint64_t > > > > tmp1476 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)896);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)896, tmp1472, tmp396, tmp397,  (int32_t)0,  (int32_t)11, tmp1476);
ClearMemSecret1( (int32_t)896, tmp397);
ClearMemSecret1( (int32_t)896, tmp396);

vector < vector < vector < vector < uint64_t > > > > tmp1479 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)896);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)896, tmp1476, tmp1479,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)896, tmp1476);

vector < vector < vector < vector < uint64_t > > > > tmp1481 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)896,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1479, tmp400, tmp1481);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)896,  (int32_t)128, tmp400);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)896, tmp1479);

vector < vector < vector < vector < uint64_t > > > > tmp1484 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1481,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1481, tmp401, tmp402,  (int32_t)0,  (int32_t)11, tmp1484);
ClearMemSecret1( (int32_t)128, tmp401);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1481);
ClearMemSecret1( (int32_t)128, tmp402);

vector < vector < vector < vector < uint64_t > > > > tmp1488 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1484, tmp1488,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1484);

vector < vector < vector < vector < uint64_t > > > > tmp1490 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1488, tmp405, tmp1490);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp405);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1488);

int32_t tmp1493 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1494 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)928);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1490,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)928,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)896, tmp1472,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1490, tmp1493, tmp1494);
ClearMemPublic(tmp1493);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1490);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)896, tmp1472);

vector < vector < vector < vector < uint64_t > > > > tmp1498 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)928);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)928, tmp1494, tmp406, tmp407,  (int32_t)0,  (int32_t)11, tmp1498);
ClearMemSecret1( (int32_t)928, tmp406);
ClearMemSecret1( (int32_t)928, tmp407);

vector < vector < vector < vector < uint64_t > > > > tmp1501 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)928);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)928, tmp1498, tmp1501,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)928, tmp1498);

vector < vector < vector < vector < uint64_t > > > > tmp1503 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)928,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1501, tmp410, tmp1503);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)928,  (int32_t)128, tmp410);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)928, tmp1501);

vector < vector < vector < vector < uint64_t > > > > tmp1506 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1503,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1503, tmp411, tmp412,  (int32_t)0,  (int32_t)11, tmp1506);
ClearMemSecret1( (int32_t)128, tmp412);
ClearMemSecret1( (int32_t)128, tmp411);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1503);

vector < vector < vector < vector < uint64_t > > > > tmp1510 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1506, tmp1510,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1506);

vector < vector < vector < vector < uint64_t > > > > tmp1512 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1510, tmp415, tmp1512);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp415);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1510);

int32_t tmp1515 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1516 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)960);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1512,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)960,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)928, tmp1494,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1512, tmp1515, tmp1516);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)928, tmp1494);
ClearMemPublic(tmp1515);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1512);

vector < vector < vector < vector < uint64_t > > > > tmp1520 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)960);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)960, tmp1516, tmp416, tmp417,  (int32_t)0,  (int32_t)11, tmp1520);
ClearMemSecret1( (int32_t)960, tmp417);
ClearMemSecret1( (int32_t)960, tmp416);

vector < vector < vector < vector < uint64_t > > > > tmp1523 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)960);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)960, tmp1520, tmp1523,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)960, tmp1520);

vector < vector < vector < vector < uint64_t > > > > tmp1525 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)960,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1523, tmp420, tmp1525);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)960, tmp1523);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)960,  (int32_t)128, tmp420);

vector < vector < vector < vector < uint64_t > > > > tmp1528 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1525,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1525, tmp421, tmp422,  (int32_t)0,  (int32_t)11, tmp1528);
ClearMemSecret1( (int32_t)128, tmp421);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1525);
ClearMemSecret1( (int32_t)128, tmp422);

vector < vector < vector < vector < uint64_t > > > > tmp1532 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1528, tmp1532,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1528);

vector < vector < vector < vector < uint64_t > > > > tmp1534 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1532, tmp425, tmp1534);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1532);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp425);

int32_t tmp1537 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1538 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)992);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1534,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)992,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)960, tmp1516,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1534, tmp1537, tmp1538);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)960, tmp1516);
ClearMemPublic(tmp1537);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1534);

vector < vector < vector < vector < uint64_t > > > > tmp1542 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)992);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)992, tmp1538, tmp426, tmp427,  (int32_t)0,  (int32_t)11, tmp1542);
ClearMemSecret1( (int32_t)992, tmp427);
ClearMemSecret1( (int32_t)992, tmp426);

vector < vector < vector < vector < uint64_t > > > > tmp1545 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)992);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)992, tmp1542, tmp1545,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)992, tmp1542);

vector < vector < vector < vector < uint64_t > > > > tmp1547 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)992,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1545, tmp430, tmp1547);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)992,  (int32_t)128, tmp430);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)992, tmp1545);

vector < vector < vector < vector < uint64_t > > > > tmp1550 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1547,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1547, tmp431, tmp432,  (int32_t)0,  (int32_t)11, tmp1550);
ClearMemSecret1( (int32_t)128, tmp432);
ClearMemSecret1( (int32_t)128, tmp431);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1547);

vector < vector < vector < vector < uint64_t > > > > tmp1554 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1550, tmp1554,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1550);

vector < vector < vector < vector < uint64_t > > > > tmp1556 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1554, tmp435, tmp1556);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1554);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp435);

int32_t tmp1559 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1560 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1556,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)992, tmp1538,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1556, tmp1559, tmp1560);
ClearMemPublic(tmp1559);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1556);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)992, tmp1538);

vector < vector < vector < vector < uint64_t > > > > tmp1564 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp1560, tmp436, tmp437,  (int32_t)0,  (int32_t)11, tmp1564);
ClearMemSecret1( (int32_t)1024, tmp436);
ClearMemSecret1( (int32_t)1024, tmp437);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp1560);

vector < vector < vector < vector < uint64_t > > > > tmp1568 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp1564, tmp1568,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp1564);

vector < vector < vector < vector < uint64_t > > > > tmp1570 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)512);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024,  (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1568, tmp440, tmp1570);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)512, tmp440);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp1568);

vector < vector < vector < vector < uint64_t > > > > tmp1573 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512);
AvgPool( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512,  (int32_t)2,  (int32_t)2,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)2,  (int32_t)2,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)512, tmp1570, tmp1573);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)512, tmp1570);

vector < vector < vector < vector < uint64_t > > > > tmp1575 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512, tmp1573,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512, tmp1573, tmp441, tmp442,  (int32_t)0,  (int32_t)11, tmp1575);
ClearMemSecret1( (int32_t)512, tmp442);
ClearMemSecret1( (int32_t)512, tmp441);

vector < vector < vector < vector < uint64_t > > > > tmp1578 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512, tmp1575, tmp1578,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512, tmp1575);

vector < vector < vector < vector < uint64_t > > > > tmp1580 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1578, tmp445, tmp1580);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)128, tmp445);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512, tmp1578);

vector < vector < vector < vector < uint64_t > > > > tmp1583 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1580,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1580, tmp446, tmp447,  (int32_t)0,  (int32_t)11, tmp1583);
ClearMemSecret1( (int32_t)128, tmp446);
ClearMemSecret1( (int32_t)128, tmp447);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1580);

vector < vector < vector < vector < uint64_t > > > > tmp1587 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1583, tmp1587,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1583);

vector < vector < vector < vector < uint64_t > > > > tmp1589 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1587, tmp450, tmp1589);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp450);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1587);

int32_t tmp1592 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1593 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)544);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1589,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)544,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512, tmp1573,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1589, tmp1592, tmp1593);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1589);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512, tmp1573);
ClearMemPublic(tmp1592);

vector < vector < vector < vector < uint64_t > > > > tmp1597 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)544);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)544, tmp1593, tmp451, tmp452,  (int32_t)0,  (int32_t)11, tmp1597);
ClearMemSecret1( (int32_t)544, tmp451);
ClearMemSecret1( (int32_t)544, tmp452);

vector < vector < vector < vector < uint64_t > > > > tmp1600 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)544);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)544, tmp1597, tmp1600,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)544, tmp1597);

vector < vector < vector < vector < uint64_t > > > > tmp1602 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)544,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1600, tmp455, tmp1602);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)544, tmp1600);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)544,  (int32_t)128, tmp455);

vector < vector < vector < vector < uint64_t > > > > tmp1605 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1602,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1602, tmp456, tmp457,  (int32_t)0,  (int32_t)11, tmp1605);
ClearMemSecret1( (int32_t)128, tmp457);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1602);
ClearMemSecret1( (int32_t)128, tmp456);

vector < vector < vector < vector < uint64_t > > > > tmp1609 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1605, tmp1609,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1605);

vector < vector < vector < vector < uint64_t > > > > tmp1611 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1609, tmp460, tmp1611);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1609);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp460);

int32_t tmp1614 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1615 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)576);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1611,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)576,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)544, tmp1593,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1611, tmp1614, tmp1615);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1611);
ClearMemPublic(tmp1614);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)544, tmp1593);

vector < vector < vector < vector < uint64_t > > > > tmp1619 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)576);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)576, tmp1615, tmp461, tmp462,  (int32_t)0,  (int32_t)11, tmp1619);
ClearMemSecret1( (int32_t)576, tmp461);
ClearMemSecret1( (int32_t)576, tmp462);

vector < vector < vector < vector < uint64_t > > > > tmp1622 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)576);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)576, tmp1619, tmp1622,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)576, tmp1619);

vector < vector < vector < vector < uint64_t > > > > tmp1624 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)576,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1622, tmp465, tmp1624);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)576, tmp1622);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)576,  (int32_t)128, tmp465);

vector < vector < vector < vector < uint64_t > > > > tmp1627 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1624,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1624, tmp466, tmp467,  (int32_t)0,  (int32_t)11, tmp1627);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1624);
ClearMemSecret1( (int32_t)128, tmp466);
ClearMemSecret1( (int32_t)128, tmp467);

vector < vector < vector < vector < uint64_t > > > > tmp1631 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1627, tmp1631,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1627);

vector < vector < vector < vector < uint64_t > > > > tmp1633 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1631, tmp470, tmp1633);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1631);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp470);

int32_t tmp1636 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1637 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)608);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1633,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)608,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)576, tmp1615,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1633, tmp1636, tmp1637);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)576, tmp1615);
ClearMemPublic(tmp1636);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1633);

vector < vector < vector < vector < uint64_t > > > > tmp1641 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)608);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)608, tmp1637, tmp471, tmp472,  (int32_t)0,  (int32_t)11, tmp1641);
ClearMemSecret1( (int32_t)608, tmp471);
ClearMemSecret1( (int32_t)608, tmp472);

vector < vector < vector < vector < uint64_t > > > > tmp1644 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)608);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)608, tmp1641, tmp1644,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)608, tmp1641);

vector < vector < vector < vector < uint64_t > > > > tmp1646 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)608,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1644, tmp475, tmp1646);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)608,  (int32_t)128, tmp475);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)608, tmp1644);

vector < vector < vector < vector < uint64_t > > > > tmp1649 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1646,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1646, tmp476, tmp477,  (int32_t)0,  (int32_t)11, tmp1649);
ClearMemSecret1( (int32_t)128, tmp477);
ClearMemSecret1( (int32_t)128, tmp476);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1646);

vector < vector < vector < vector < uint64_t > > > > tmp1653 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1649, tmp1653,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1649);

vector < vector < vector < vector < uint64_t > > > > tmp1655 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1653, tmp480, tmp1655);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp480);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1653);

int32_t tmp1658 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1659 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)640);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1655,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)640,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)608, tmp1637,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1655, tmp1658, tmp1659);
ClearMemPublic(tmp1658);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)608, tmp1637);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1655);

vector < vector < vector < vector < uint64_t > > > > tmp1663 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)640);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)640, tmp1659, tmp481, tmp482,  (int32_t)0,  (int32_t)11, tmp1663);
ClearMemSecret1( (int32_t)640, tmp481);
ClearMemSecret1( (int32_t)640, tmp482);

vector < vector < vector < vector < uint64_t > > > > tmp1666 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)640);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)640, tmp1663, tmp1666,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)640, tmp1663);

vector < vector < vector < vector < uint64_t > > > > tmp1668 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)640,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1666, tmp485, tmp1668);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)640, tmp1666);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)640,  (int32_t)128, tmp485);

vector < vector < vector < vector < uint64_t > > > > tmp1671 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1668,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1668, tmp486, tmp487,  (int32_t)0,  (int32_t)11, tmp1671);
ClearMemSecret1( (int32_t)128, tmp486);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1668);
ClearMemSecret1( (int32_t)128, tmp487);

vector < vector < vector < vector < uint64_t > > > > tmp1675 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1671, tmp1675,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1671);

vector < vector < vector < vector < uint64_t > > > > tmp1677 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1675, tmp490, tmp1677);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1675);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp490);

int32_t tmp1680 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1681 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)672);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1677,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)672,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)640, tmp1659,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1677, tmp1680, tmp1681);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1677);
ClearMemPublic(tmp1680);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)640, tmp1659);

vector < vector < vector < vector < uint64_t > > > > tmp1685 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)672);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)672, tmp1681, tmp491, tmp492,  (int32_t)0,  (int32_t)11, tmp1685);
ClearMemSecret1( (int32_t)672, tmp492);
ClearMemSecret1( (int32_t)672, tmp491);

vector < vector < vector < vector < uint64_t > > > > tmp1688 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)672);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)672, tmp1685, tmp1688,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)672, tmp1685);

vector < vector < vector < vector < uint64_t > > > > tmp1690 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)672,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1688, tmp495, tmp1690);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)672,  (int32_t)128, tmp495);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)672, tmp1688);

vector < vector < vector < vector < uint64_t > > > > tmp1693 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1690,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1690, tmp496, tmp497,  (int32_t)0,  (int32_t)11, tmp1693);
ClearMemSecret1( (int32_t)128, tmp497);
ClearMemSecret1( (int32_t)128, tmp496);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1690);

vector < vector < vector < vector < uint64_t > > > > tmp1697 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1693, tmp1697,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1693);

vector < vector < vector < vector < uint64_t > > > > tmp1699 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1697, tmp500, tmp1699);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1697);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp500);

int32_t tmp1702 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1703 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)704);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1699,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)704,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)672, tmp1681,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1699, tmp1702, tmp1703);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1699);
ClearMemPublic(tmp1702);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)672, tmp1681);

vector < vector < vector < vector < uint64_t > > > > tmp1707 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)704);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)704, tmp1703, tmp501, tmp502,  (int32_t)0,  (int32_t)11, tmp1707);
ClearMemSecret1( (int32_t)704, tmp502);
ClearMemSecret1( (int32_t)704, tmp501);

vector < vector < vector < vector < uint64_t > > > > tmp1710 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)704);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)704, tmp1707, tmp1710,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)704, tmp1707);

vector < vector < vector < vector < uint64_t > > > > tmp1712 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)704,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1710, tmp505, tmp1712);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)704, tmp1710);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)704,  (int32_t)128, tmp505);

vector < vector < vector < vector < uint64_t > > > > tmp1715 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1712,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1712, tmp506, tmp507,  (int32_t)0,  (int32_t)11, tmp1715);
ClearMemSecret1( (int32_t)128, tmp507);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1712);
ClearMemSecret1( (int32_t)128, tmp506);

vector < vector < vector < vector < uint64_t > > > > tmp1719 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1715, tmp1719,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1715);

vector < vector < vector < vector < uint64_t > > > > tmp1721 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1719, tmp510, tmp1721);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp510);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1719);

int32_t tmp1724 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1725 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)736);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1721,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)736,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)704, tmp1703,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1721, tmp1724, tmp1725);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1721);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)704, tmp1703);
ClearMemPublic(tmp1724);

vector < vector < vector < vector < uint64_t > > > > tmp1729 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)736);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)736, tmp1725, tmp511, tmp512,  (int32_t)0,  (int32_t)11, tmp1729);
ClearMemSecret1( (int32_t)736, tmp512);
ClearMemSecret1( (int32_t)736, tmp511);

vector < vector < vector < vector < uint64_t > > > > tmp1732 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)736);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)736, tmp1729, tmp1732,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)736, tmp1729);

vector < vector < vector < vector < uint64_t > > > > tmp1734 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)736,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1732, tmp515, tmp1734);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)736,  (int32_t)128, tmp515);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)736, tmp1732);

vector < vector < vector < vector < uint64_t > > > > tmp1737 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1734,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1734, tmp516, tmp517,  (int32_t)0,  (int32_t)11, tmp1737);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1734);
ClearMemSecret1( (int32_t)128, tmp516);
ClearMemSecret1( (int32_t)128, tmp517);

vector < vector < vector < vector < uint64_t > > > > tmp1741 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1737, tmp1741,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1737);

vector < vector < vector < vector < uint64_t > > > > tmp1743 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1741, tmp520, tmp1743);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp520);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1741);

int32_t tmp1746 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1747 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)768);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1743,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)768,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)736, tmp1725,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1743, tmp1746, tmp1747);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)736, tmp1725);
ClearMemPublic(tmp1746);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1743);

vector < vector < vector < vector < uint64_t > > > > tmp1751 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)768);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)768, tmp1747, tmp521, tmp522,  (int32_t)0,  (int32_t)11, tmp1751);
ClearMemSecret1( (int32_t)768, tmp522);
ClearMemSecret1( (int32_t)768, tmp521);

vector < vector < vector < vector < uint64_t > > > > tmp1754 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)768);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)768, tmp1751, tmp1754,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)768, tmp1751);

vector < vector < vector < vector < uint64_t > > > > tmp1756 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)768,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1754, tmp525, tmp1756);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)768, tmp1754);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)768,  (int32_t)128, tmp525);

vector < vector < vector < vector < uint64_t > > > > tmp1759 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1756,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1756, tmp526, tmp527,  (int32_t)0,  (int32_t)11, tmp1759);
ClearMemSecret1( (int32_t)128, tmp527);
ClearMemSecret1( (int32_t)128, tmp526);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1756);

vector < vector < vector < vector < uint64_t > > > > tmp1763 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1759, tmp1763,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1759);

vector < vector < vector < vector < uint64_t > > > > tmp1765 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1763, tmp530, tmp1765);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp530);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1763);

int32_t tmp1768 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1769 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)800);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1765,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)800,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)768, tmp1747,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1765, tmp1768, tmp1769);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)768, tmp1747);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1765);
ClearMemPublic(tmp1768);

vector < vector < vector < vector < uint64_t > > > > tmp1773 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)800);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)800, tmp1769, tmp531, tmp532,  (int32_t)0,  (int32_t)11, tmp1773);
ClearMemSecret1( (int32_t)800, tmp532);
ClearMemSecret1( (int32_t)800, tmp531);

vector < vector < vector < vector < uint64_t > > > > tmp1776 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)800);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)800, tmp1773, tmp1776,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)800, tmp1773);

vector < vector < vector < vector < uint64_t > > > > tmp1778 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)800,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1776, tmp535, tmp1778);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)800,  (int32_t)128, tmp535);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)800, tmp1776);

vector < vector < vector < vector < uint64_t > > > > tmp1781 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1778,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1778, tmp536, tmp537,  (int32_t)0,  (int32_t)11, tmp1781);
ClearMemSecret1( (int32_t)128, tmp536);
ClearMemSecret1( (int32_t)128, tmp537);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1778);

vector < vector < vector < vector < uint64_t > > > > tmp1785 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1781, tmp1785,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1781);

vector < vector < vector < vector < uint64_t > > > > tmp1787 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1785, tmp540, tmp1787);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1785);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp540);

int32_t tmp1790 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1791 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)832);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1787,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)832,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)800, tmp1769,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1787, tmp1790, tmp1791);
ClearMemPublic(tmp1790);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1787);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)800, tmp1769);

vector < vector < vector < vector < uint64_t > > > > tmp1795 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)832);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)832, tmp1791, tmp541, tmp542,  (int32_t)0,  (int32_t)11, tmp1795);
ClearMemSecret1( (int32_t)832, tmp541);
ClearMemSecret1( (int32_t)832, tmp542);

vector < vector < vector < vector < uint64_t > > > > tmp1798 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)832);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)832, tmp1795, tmp1798,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)832, tmp1795);

vector < vector < vector < vector < uint64_t > > > > tmp1800 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)832,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1798, tmp545, tmp1800);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)832,  (int32_t)128, tmp545);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)832, tmp1798);

vector < vector < vector < vector < uint64_t > > > > tmp1803 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1800,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1800, tmp546, tmp547,  (int32_t)0,  (int32_t)11, tmp1803);
ClearMemSecret1( (int32_t)128, tmp546);
ClearMemSecret1( (int32_t)128, tmp547);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1800);

vector < vector < vector < vector < uint64_t > > > > tmp1807 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1803, tmp1807,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1803);

vector < vector < vector < vector < uint64_t > > > > tmp1809 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1807, tmp550, tmp1809);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp550);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1807);

int32_t tmp1812 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1813 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)864);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1809,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)864,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)832, tmp1791,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1809, tmp1812, tmp1813);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)832, tmp1791);
ClearMemPublic(tmp1812);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1809);

vector < vector < vector < vector < uint64_t > > > > tmp1817 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)864);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)864, tmp1813, tmp551, tmp552,  (int32_t)0,  (int32_t)11, tmp1817);
ClearMemSecret1( (int32_t)864, tmp552);
ClearMemSecret1( (int32_t)864, tmp551);

vector < vector < vector < vector < uint64_t > > > > tmp1820 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)864);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)864, tmp1817, tmp1820,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)864, tmp1817);

vector < vector < vector < vector < uint64_t > > > > tmp1822 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)864,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1820, tmp555, tmp1822);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)864,  (int32_t)128, tmp555);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)864, tmp1820);

vector < vector < vector < vector < uint64_t > > > > tmp1825 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1822,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1822, tmp556, tmp557,  (int32_t)0,  (int32_t)11, tmp1825);
ClearMemSecret1( (int32_t)128, tmp557);
ClearMemSecret1( (int32_t)128, tmp556);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1822);

vector < vector < vector < vector < uint64_t > > > > tmp1829 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1825, tmp1829,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1825);

vector < vector < vector < vector < uint64_t > > > > tmp1831 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1829, tmp560, tmp1831);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1829);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp560);

int32_t tmp1834 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1835 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)896);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1831,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)896,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)864, tmp1813,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1831, tmp1834, tmp1835);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1831);
ClearMemPublic(tmp1834);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)864, tmp1813);

vector < vector < vector < vector < uint64_t > > > > tmp1839 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)896);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)896, tmp1835, tmp561, tmp562,  (int32_t)0,  (int32_t)11, tmp1839);
ClearMemSecret1( (int32_t)896, tmp561);
ClearMemSecret1( (int32_t)896, tmp562);

vector < vector < vector < vector < uint64_t > > > > tmp1842 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)896);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)896, tmp1839, tmp1842,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)896, tmp1839);

vector < vector < vector < vector < uint64_t > > > > tmp1844 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)896,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1842, tmp565, tmp1844);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)896, tmp1842);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)896,  (int32_t)128, tmp565);

vector < vector < vector < vector < uint64_t > > > > tmp1847 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1844,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1844, tmp566, tmp567,  (int32_t)0,  (int32_t)11, tmp1847);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1844);
ClearMemSecret1( (int32_t)128, tmp566);
ClearMemSecret1( (int32_t)128, tmp567);

vector < vector < vector < vector < uint64_t > > > > tmp1851 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1847, tmp1851,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1847);

vector < vector < vector < vector < uint64_t > > > > tmp1853 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1851, tmp570, tmp1853);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1851);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp570);

int32_t tmp1856 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1857 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)928);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1853,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)928,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)896, tmp1835,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1853, tmp1856, tmp1857);
ClearMemPublic(tmp1856);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)896, tmp1835);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1853);

vector < vector < vector < vector < uint64_t > > > > tmp1861 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)928);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)928, tmp1857, tmp571, tmp572,  (int32_t)0,  (int32_t)11, tmp1861);
ClearMemSecret1( (int32_t)928, tmp571);
ClearMemSecret1( (int32_t)928, tmp572);

vector < vector < vector < vector < uint64_t > > > > tmp1864 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)928);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)928, tmp1861, tmp1864,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)928, tmp1861);

vector < vector < vector < vector < uint64_t > > > > tmp1866 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)928,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1864, tmp575, tmp1866);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)928,  (int32_t)128, tmp575);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)928, tmp1864);

vector < vector < vector < vector < uint64_t > > > > tmp1869 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1866,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1866, tmp576, tmp577,  (int32_t)0,  (int32_t)11, tmp1869);
ClearMemSecret1( (int32_t)128, tmp577);
ClearMemSecret1( (int32_t)128, tmp576);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1866);

vector < vector < vector < vector < uint64_t > > > > tmp1873 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1869, tmp1873,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1869);

vector < vector < vector < vector < uint64_t > > > > tmp1875 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1873, tmp580, tmp1875);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp580);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1873);

int32_t tmp1878 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1879 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)960);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1875,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)960,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)928, tmp1857,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1875, tmp1878, tmp1879);
ClearMemPublic(tmp1878);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)928, tmp1857);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1875);

vector < vector < vector < vector < uint64_t > > > > tmp1883 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)960);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)960, tmp1879, tmp581, tmp582,  (int32_t)0,  (int32_t)11, tmp1883);
ClearMemSecret1( (int32_t)960, tmp582);
ClearMemSecret1( (int32_t)960, tmp581);

vector < vector < vector < vector < uint64_t > > > > tmp1886 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)960);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)960, tmp1883, tmp1886,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)960, tmp1883);

vector < vector < vector < vector < uint64_t > > > > tmp1888 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)960,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1886, tmp585, tmp1888);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)960, tmp1886);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)960,  (int32_t)128, tmp585);

vector < vector < vector < vector < uint64_t > > > > tmp1891 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1888,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1888, tmp586, tmp587,  (int32_t)0,  (int32_t)11, tmp1891);
ClearMemSecret1( (int32_t)128, tmp587);
ClearMemSecret1( (int32_t)128, tmp586);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1888);

vector < vector < vector < vector < uint64_t > > > > tmp1895 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1891, tmp1895,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1891);

vector < vector < vector < vector < uint64_t > > > > tmp1897 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1895, tmp590, tmp1897);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1895);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp590);

int32_t tmp1900 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1901 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)992);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1897,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)992,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)960, tmp1879,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1897, tmp1900, tmp1901);
ClearMemPublic(tmp1900);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1897);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)960, tmp1879);

vector < vector < vector < vector < uint64_t > > > > tmp1905 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)992);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)992, tmp1901, tmp591, tmp592,  (int32_t)0,  (int32_t)11, tmp1905);
ClearMemSecret1( (int32_t)992, tmp591);
ClearMemSecret1( (int32_t)992, tmp592);

vector < vector < vector < vector < uint64_t > > > > tmp1908 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)992);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)992, tmp1905, tmp1908,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)992, tmp1905);

vector < vector < vector < vector < uint64_t > > > > tmp1910 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)992,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1908, tmp595, tmp1910);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)992,  (int32_t)128, tmp595);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)992, tmp1908);

vector < vector < vector < vector < uint64_t > > > > tmp1913 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1910,  (int32_t)11);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1910, tmp596, tmp597,  (int32_t)0,  (int32_t)11, tmp1913);
ClearMemSecret1( (int32_t)128, tmp596);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1910);
ClearMemSecret1( (int32_t)128, tmp597);

vector < vector < vector < vector < uint64_t > > > > tmp1917 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1913, tmp1917,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1913);

vector < vector < vector < vector < uint64_t > > > > tmp1919 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1917, tmp600, tmp1919);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp600);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1917);

int32_t tmp1922 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1923 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1024);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1919,  (int32_t)11);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1024,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)992, tmp1901,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1919, tmp1922, tmp1923);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp1919);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)992, tmp1901);
ClearMemPublic(tmp1922);

vector < vector < vector < vector < uint64_t > > > > tmp1927 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1024);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1024, tmp1923, tmp601, tmp602,  (int32_t)0,  (int32_t)11, tmp1927);
ClearMemSecret1( (int32_t)1024, tmp601);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1024, tmp1923);
ClearMemSecret1( (int32_t)1024, tmp602);

vector < vector < vector < vector < uint64_t > > > > tmp1931 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1024);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1024, tmp1927, tmp1931,  (int32_t)11, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1024, tmp1927);

vector < vector < vector < vector < uint64_t > > > > tmp1933 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1024);
AvgPool( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)7,  (int32_t)7,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1024, tmp1931, tmp1933);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1024, tmp1931);

vector < vector < vector < vector < uint64_t > > > > tmp1935 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1000);
Conv2DWrapper( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)1,  (int32_t)1,  (int32_t)1000,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1933, tmp605, tmp1935);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1024, tmp1933);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)1000, tmp605);

vector < vector < vector < vector < uint64_t > > > > tmp1938 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1000);
ScaleUp1( (int32_t)1000, tmp606,  (int32_t)11);
MatAddBroadCast4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1000, tmp1935, tmp606, tmp1938);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1000, tmp1935);
ClearMemSecret1( (int32_t)1000, tmp606);

int32_t tmp1941 =  (int32_t)3;

vector < vector < vector < uint64_t > > > tmp1942 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1);
ArgMax3( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1000, tmp1938, tmp1941, tmp1942);
ClearMemPublic(tmp1941);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1000, tmp1938);
EndComputation();
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
cout << (funcReconstruct2PCCons(tmp1942[i0][i1][i2], 2)) << endl;
}
}
}
cout << "----------------------------------" << endl;
cout << NUM_OF_PARTIES << "PC code, P" << partyNum << endl;
cout << NUM_ITERATIONS << " iterations, " << whichNetwork << endl;
cout << "----------------------------------" << endl << endl;


/****************************** CLEAN-UP ******************************/
delete aes_common;
delete aes_indep;
delete aes_a_1;
delete aes_a_2;
delete aes_b_1;
delete aes_b_2;
delete aes_c_1;
delete aes_share_conv_bit_shares_p0_p2;
delete aes_share_conv_bit_shares_p1_p2;
delete aes_share_conv_shares_mod_odd_p0_p2;
delete aes_share_conv_shares_mod_odd_p1_p2;
delete aes_comp_msb_shares_lsb_p0_p2;
delete aes_comp_msb_shares_lsb_p1_p2;
delete aes_comp_msb_shares_bit_vec_p0_p2;
delete aes_comp_msb_shares_bit_vec_p1_p2;
delete aes_conv_opti_a_1;
delete aes_conv_opti_a_2;
delete aes_conv_opti_b_1;
delete aes_conv_opti_b_2;
delete aes_conv_opti_c_1;
delete aes_parallel;
deleteObjects();

return 0;

}

